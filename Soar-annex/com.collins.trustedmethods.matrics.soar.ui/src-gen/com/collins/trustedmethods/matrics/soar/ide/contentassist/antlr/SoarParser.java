/*
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.33.0.
 */

package com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr;

import com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr.internal.InternalSoarParser;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SoarParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SoarGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SoarGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSoarProductionAccess().getAlternatives_1(), "rule__SoarProduction__Alternatives_1");
			builder.put(grammarAccess.getFlagsAccess().getAlternatives_1(), "rule__Flags__Alternatives_1");
			builder.put(grammarAccess.getStateImpConditionAccess().getAlternatives_2(), "rule__StateImpCondition__Alternatives_2");
			builder.put(grammarAccess.getPositiveCondAccess().getAlternatives(), "rule__PositiveCond__Alternatives");
			builder.put(grammarAccess.getCondForOneIdAccess().getAlternatives_2(), "rule__CondForOneId__Alternatives_2");
			builder.put(grammarAccess.getValueTestAccess().getAlternatives(), "rule__ValueTest__Alternatives");
			builder.put(grammarAccess.getTestAccess().getAlternatives(), "rule__Test__Alternatives");
			builder.put(grammarAccess.getSingleTestAccess().getAlternatives_1(), "rule__SingleTest__Alternatives_1");
			builder.put(grammarAccess.getRelationalTestAccess().getAlternatives(), "rule__RelationalTest__Alternatives");
			builder.put(grammarAccess.getRelationalTestAccess().getAlternatives_0_1(), "rule__RelationalTest__Alternatives_0_1");
			builder.put(grammarAccess.getVariableAccess().getAlternatives_1_1(), "rule__Variable__Alternatives_1_1");
			builder.put(grammarAccess.getActionSideAccess().getAlternatives_1(), "rule__ActionSide__Alternatives_1");
			builder.put(grammarAccess.getPrintAccess().getAlternatives_1_2(), "rule__Print__Alternatives_1_2");
			builder.put(grammarAccess.getFuncCallAccess().getAlternatives_2(), "rule__FuncCall__Alternatives_2");
			builder.put(grammarAccess.getFuncCallAccess().getAlternatives_2_0(), "rule__FuncCall__Alternatives_2_0");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1(), "rule__VariableorSymConstant__Alternatives_1");
			builder.put(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1_1(), "rule__VariableorSymConstant__Alternatives_1_1");
			builder.put(grammarAccess.getConstantAccess().getAlternatives_1(), "rule__Constant__Alternatives_1");
			builder.put(grammarAccess.getConstantAccess().getAlternatives_1_0(), "rule__Constant__Alternatives_1_0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getAlternatives(), "rule__PrefSpecifier__Alternatives");
			builder.put(grammarAccess.getUnaryPrefAccess().getAlternatives(), "rule__UnaryPref__Alternatives");
			builder.put(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives(), "rule__UnaryOrBinaryPref__Alternatives");
			builder.put(grammarAccess.getSoarAnnexLibraryAccess().getGroup(), "rule__SoarAnnexLibrary__Group__0");
			builder.put(grammarAccess.getSoarAnnexSubclauseAccess().getGroup(), "rule__SoarAnnexSubclause__Group__0");
			builder.put(grammarAccess.getSoarProductionAccess().getGroup(), "rule__SoarProduction__Group__0");
			builder.put(grammarAccess.getDocumentationAccess().getGroup(), "rule__Documentation__Group__0");
			builder.put(grammarAccess.getFlagsAccess().getGroup(), "rule__Flags__Group__0");
			builder.put(grammarAccess.getConditionSideAccess().getGroup(), "rule__ConditionSide__Group__0");
			builder.put(grammarAccess.getStateImpConditionAccess().getGroup(), "rule__StateImpCondition__Group__0");
			builder.put(grammarAccess.getCondAccess().getGroup(), "rule__Cond__Group__0");
			builder.put(grammarAccess.getPositiveCondAccess().getGroup_0(), "rule__PositiveCond__Group_0__0");
			builder.put(grammarAccess.getPositiveCondAccess().getGroup_0_1(), "rule__PositiveCond__Group_0_1__0");
			builder.put(grammarAccess.getPositiveCondAccess().getGroup_1(), "rule__PositiveCond__Group_1__0");
			builder.put(grammarAccess.getCondForOneIdAccess().getGroup(), "rule__CondForOneId__Group__0");
			builder.put(grammarAccess.getAttrValueTestAccess().getGroup(), "rule__AttrValueTest__Group__0");
			builder.put(grammarAccess.getAttrValueTestAccess().getGroup_4(), "rule__AttrValueTest__Group_4__0");
			builder.put(grammarAccess.getValueTestAccess().getGroup_0(), "rule__ValueTest__Group_0__0");
			builder.put(grammarAccess.getValueTestAccess().getGroup_0_1(), "rule__ValueTest__Group_0_1__0");
			builder.put(grammarAccess.getValueTestAccess().getGroup_1(), "rule__ValueTest__Group_1__0");
			builder.put(grammarAccess.getTestAccess().getGroup_0(), "rule__Test__Group_0__0");
			builder.put(grammarAccess.getTestAccess().getGroup_1(), "rule__Test__Group_1__0");
			builder.put(grammarAccess.getTestAccess().getGroup_2(), "rule__Test__Group_2__0");
			builder.put(grammarAccess.getTestAccess().getGroup_4(), "rule__Test__Group_4__0");
			builder.put(grammarAccess.getDisjunctionTestAccess().getGroup(), "rule__DisjunctionTest__Group__0");
			builder.put(grammarAccess.getSingleTestAccess().getGroup(), "rule__SingleTest__Group__0");
			builder.put(grammarAccess.getRelationalTestAccess().getGroup_0(), "rule__RelationalTest__Group_0__0");
			builder.put(grammarAccess.getRelationalTestAccess().getGroup_1(), "rule__RelationalTest__Group_1__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup_1(), "rule__Variable__Group_1__0");
			builder.put(grammarAccess.getActionSideAccess().getGroup(), "rule__ActionSide__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup_1(), "rule__Action__Group_1__0");
			builder.put(grammarAccess.getPrintAccess().getGroup(), "rule__Print__Group__0");
			builder.put(grammarAccess.getPrintAccess().getGroup_1(), "rule__Print__Group_1__0");
			builder.put(grammarAccess.getFuncCallAccess().getGroup(), "rule__FuncCall__Group__0");
			builder.put(grammarAccess.getAttrValueMakeAccess().getGroup(), "rule__AttrValueMake__Group__0");
			builder.put(grammarAccess.getAttrValueMakeAccess().getGroup_1(), "rule__AttrValueMake__Group_1__0");
			builder.put(grammarAccess.getAttrValueMakeAccess().getGroup_1_2(), "rule__AttrValueMake__Group_1_2__0");
			builder.put(grammarAccess.getVariableorSymConstantAccess().getGroup(), "rule__VariableorSymConstant__Group__0");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getValueMakeAccess().getGroup(), "rule__ValueMake__Group__0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getGroup_0(), "rule__PrefSpecifier__Group_0__0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getGroup_0_1(), "rule__PrefSpecifier__Group_0_1__0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getGroup_1(), "rule__PrefSpecifier__Group_1__0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getGroup_1_1(), "rule__PrefSpecifier__Group_1_1__0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getGroup_1_1_1(), "rule__PrefSpecifier__Group_1_1_1__0");
			builder.put(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1(), "rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1");
			builder.put(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1(), "rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1");
			builder.put(grammarAccess.getSoarProductionAccess().getNameAssignment_3(), "rule__SoarProduction__NameAssignment_3");
			builder.put(grammarAccess.getSoarProductionAccess().getDocAssignment_4(), "rule__SoarProduction__DocAssignment_4");
			builder.put(grammarAccess.getSoarProductionAccess().getFlagAssignment_5(), "rule__SoarProduction__FlagAssignment_5");
			builder.put(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6(), "rule__SoarProduction__ConditionsAssignment_6");
			builder.put(grammarAccess.getSoarProductionAccess().getActionsAssignment_8(), "rule__SoarProduction__ActionsAssignment_8");
			builder.put(grammarAccess.getConditionSideAccess().getStateImpConditionAssignment_1(), "rule__ConditionSide__StateImpConditionAssignment_1");
			builder.put(grammarAccess.getConditionSideAccess().getCondAssignment_2(), "rule__ConditionSide__CondAssignment_2");
			builder.put(grammarAccess.getStateImpConditionAccess().getIdTestAssignment_3(), "rule__StateImpCondition__IdTestAssignment_3");
			builder.put(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4(), "rule__StateImpCondition__AttrValueTestAssignment_4");
			builder.put(grammarAccess.getCondAccess().getCondAssignment_2(), "rule__Cond__CondAssignment_2");
			builder.put(grammarAccess.getPositiveCondAccess().getCondForOneIdAssignment_0_1_0(), "rule__PositiveCond__CondForOneIdAssignment_0_1_0");
			builder.put(grammarAccess.getPositiveCondAccess().getCondAssignment_1_1(), "rule__PositiveCond__CondAssignment_1_1");
			builder.put(grammarAccess.getCondForOneIdAccess().getIdTestAssignment_3(), "rule__CondForOneId__IdTestAssignment_3");
			builder.put(grammarAccess.getCondForOneIdAccess().getAttrValueTestAssignment_4(), "rule__CondForOneId__AttrValueTestAssignment_4");
			builder.put(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3(), "rule__AttrValueTest__AttrTestAssignment_3");
			builder.put(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_4_1(), "rule__AttrValueTest__AttrTestAssignment_4_1");
			builder.put(grammarAccess.getAttrValueTestAccess().getValueTestAssignment_5(), "rule__AttrValueTest__ValueTestAssignment_5");
			builder.put(grammarAccess.getValueTestAccess().getTestAssignment_0_1_0(), "rule__ValueTest__TestAssignment_0_1_0");
			builder.put(grammarAccess.getValueTestAccess().getCondForOneIdAssignment_1_0(), "rule__ValueTest__CondForOneIdAssignment_1_0");
			builder.put(grammarAccess.getTestAccess().getDisjunctionTestAssignment_0_2(), "rule__Test__DisjunctionTestAssignment_0_2");
			builder.put(grammarAccess.getTestAccess().getRelationalTestAssignment_1_0(), "rule__Test__RelationalTestAssignment_1_0");
			builder.put(grammarAccess.getTestAccess().getDisjunctionTestAssignment_2_1(), "rule__Test__DisjunctionTestAssignment_2_1");
			builder.put(grammarAccess.getTestAccess().getRelationalTestAssignment_3(), "rule__Test__RelationalTestAssignment_3");
			builder.put(grammarAccess.getDisjunctionTestAccess().getConstantAssignment_2(), "rule__DisjunctionTest__ConstantAssignment_2");
			builder.put(grammarAccess.getSingleTestAccess().getVariableAssignment_1_0(), "rule__SingleTest__VariableAssignment_1_0");
			builder.put(grammarAccess.getSingleTestAccess().getConstantAssignment_1_1(), "rule__SingleTest__ConstantAssignment_1_1");
			builder.put(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_0_2(), "rule__RelationalTest__SingleTestAssignment_0_2");
			builder.put(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_1_1(), "rule__RelationalTest__SingleTestAssignment_1_1");
			builder.put(grammarAccess.getActionSideAccess().getActionAssignment_1_0(), "rule__ActionSide__ActionAssignment_1_0");
			builder.put(grammarAccess.getActionSideAccess().getFuncCallAssignment_1_1(), "rule__ActionSide__FuncCallAssignment_1_1");
			builder.put(grammarAccess.getActionSideAccess().getPrintAssignment_1_2(), "rule__ActionSide__PrintAssignment_1_2");
			builder.put(grammarAccess.getActionAccess().getVariableAssignment_1_1(), "rule__Action__VariableAssignment_1_1");
			builder.put(grammarAccess.getActionAccess().getAttrValMakeAssignment_1_2(), "rule__Action__AttrValMakeAssignment_1_2");
			builder.put(grammarAccess.getPrintAccess().getVariableAssignment_1_2_1(), "rule__Print__VariableAssignment_1_2_1");
			builder.put(grammarAccess.getFuncCallAccess().getValueAssignment_3(), "rule__FuncCall__ValueAssignment_3");
			builder.put(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_1(), "rule__AttrValueMake__VariableOrSymConstantAssignment_1_1");
			builder.put(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_2_1(), "rule__AttrValueMake__VariableOrSymConstantAssignment_1_2_1");
			builder.put(grammarAccess.getAttrValueMakeAccess().getValueMakeAssignment_1_3(), "rule__AttrValueMake__ValueMakeAssignment_1_3");
			builder.put(grammarAccess.getVariableorSymConstantAccess().getVariableAssignment_1_0(), "rule__VariableorSymConstant__VariableAssignment_1_0");
			builder.put(grammarAccess.getValueMakeAccess().getValueAssignment_1(), "rule__ValueMake__ValueAssignment_1");
			builder.put(grammarAccess.getValueMakeAccess().getPrefSpecifierAssignment_2(), "rule__ValueMake__PrefSpecifierAssignment_2");
			builder.put(grammarAccess.getPrefSpecifierAccess().getUnaryPrefAssignment_0_1_0(), "rule__PrefSpecifier__UnaryPrefAssignment_0_1_0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefAssignment_1_1_0(), "rule__PrefSpecifier__UnaryOrBinaryPrefAssignment_1_1_0");
			builder.put(grammarAccess.getPrefSpecifierAccess().getValueAssignment_1_1_1_1(), "rule__PrefSpecifier__ValueAssignment_1_1_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SoarGrammarAccess grammarAccess;

	@Override
	protected InternalSoarParser createParser() {
		InternalSoarParser result = new InternalSoarParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public SoarGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SoarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
