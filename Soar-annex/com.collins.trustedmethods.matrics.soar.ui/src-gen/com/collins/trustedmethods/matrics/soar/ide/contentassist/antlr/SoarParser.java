/*
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

package com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr;

import com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr.internal.InternalSoarParser;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SoarParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SoarGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SoarGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSoarProductionAccess().getAlternatives_1(), "rule__SoarProduction__Alternatives_1");
			builder.put(grammarAccess.getFlagsAccess().getAlternatives_1(), "rule__Flags__Alternatives_1");
			builder.put(grammarAccess.getStateImpConditionAccess().getAlternatives_2(), "rule__StateImpCondition__Alternatives_2");
			builder.put(grammarAccess.getRelationalOpAccess().getAlternatives(), "rule__RelationalOp__Alternatives");
			builder.put(grammarAccess.getPrefixExprAccess().getAlternatives(), "rule__PrefixExpr__Alternatives");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getAlternatives(), "rule__AtomicConditionExpr__Alternatives");
			builder.put(grammarAccess.getActionSideExprAccess().getAlternatives(), "rule__ActionSideExpr__Alternatives");
			builder.put(grammarAccess.getUnaryPrefAccess().getAlternatives(), "rule__UnaryPref__Alternatives");
			builder.put(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives(), "rule__UnaryOrBinaryPref__Alternatives");
			builder.put(grammarAccess.getActionExprAccess().getAlternatives(), "rule__ActionExpr__Alternatives");
			builder.put(grammarAccess.getActionExprAccess().getAlternatives_2_1(), "rule__ActionExpr__Alternatives_2_1");
			builder.put(grammarAccess.getSymConstantAccess().getAlternatives_1(), "rule__SymConstant__Alternatives_1");
			builder.put(grammarAccess.getSoarAnnexLibraryAccess().getGroup(), "rule__SoarAnnexLibrary__Group__0");
			builder.put(grammarAccess.getSoarAnnexSubclauseAccess().getGroup(), "rule__SoarAnnexSubclause__Group__0");
			builder.put(grammarAccess.getSoarProductionAccess().getGroup(), "rule__SoarProduction__Group__0");
			builder.put(grammarAccess.getFlagsAccess().getGroup(), "rule__Flags__Group__0");
			builder.put(grammarAccess.getStateImpConditionAccess().getGroup(), "rule__StateImpCondition__Group__0");
			builder.put(grammarAccess.getAttrValueTestAccess().getGroup(), "rule__AttrValueTest__Group__0");
			builder.put(grammarAccess.getAttrValueTestAccess().getGroup_3(), "rule__AttrValueTest__Group_3__0");
			builder.put(grammarAccess.getPlusExprAccess().getGroup(), "rule__PlusExpr__Group__0");
			builder.put(grammarAccess.getPlusExprAccess().getGroup_1(), "rule__PlusExpr__Group_1__0");
			builder.put(grammarAccess.getPlusExprAccess().getGroup_1_0(), "rule__PlusExpr__Group_1_0__0");
			builder.put(grammarAccess.getPlusExprAccess().getGroup_1_0_0(), "rule__PlusExpr__Group_1_0_0__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup(), "rule__RelationalExpr__Group__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup_1(), "rule__RelationalExpr__Group_1__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup_1_0(), "rule__RelationalExpr__Group_1_0__0");
			builder.put(grammarAccess.getRelationalExprAccess().getGroup_1_0_0(), "rule__RelationalExpr__Group_1_0_0__0");
			builder.put(grammarAccess.getPrefixExprAccess().getGroup_0(), "rule__PrefixExpr__Group_0__0");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getGroup_0(), "rule__AtomicConditionExpr__Group_0__0");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getGroup_1(), "rule__AtomicConditionExpr__Group_1__0");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getGroup_2(), "rule__AtomicConditionExpr__Group_2__0");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getGroup_3(), "rule__AtomicConditionExpr__Group_3__0");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getGroup_4(), "rule__AtomicConditionExpr__Group_4__0");
			builder.put(grammarAccess.getActionSideExprAccess().getGroup_0(), "rule__ActionSideExpr__Group_0__0");
			builder.put(grammarAccess.getActionSideExprAccess().getGroup_1(), "rule__ActionSideExpr__Group_1__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_0(), "rule__ActionExpr__Group_0__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_0_0(), "rule__ActionExpr__Group_0_0__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_1(), "rule__ActionExpr__Group_1__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_2(), "rule__ActionExpr__Group_2__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_3(), "rule__ActionExpr__Group_3__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_4(), "rule__ActionExpr__Group_4__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_5(), "rule__ActionExpr__Group_5__0");
			builder.put(grammarAccess.getActionExprAccess().getGroup_6(), "rule__ActionExpr__Group_6__0");
			builder.put(grammarAccess.getSymConstantAccess().getGroup(), "rule__SymConstant__Group__0");
			builder.put(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1(), "rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1");
			builder.put(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1(), "rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1");
			builder.put(grammarAccess.getSoarProductionAccess().getNameAssignment_3(), "rule__SoarProduction__NameAssignment_3");
			builder.put(grammarAccess.getSoarProductionAccess().getDocAssignment_4(), "rule__SoarProduction__DocAssignment_4");
			builder.put(grammarAccess.getSoarProductionAccess().getFlagAssignment_5(), "rule__SoarProduction__FlagAssignment_5");
			builder.put(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6(), "rule__SoarProduction__ConditionsAssignment_6");
			builder.put(grammarAccess.getSoarProductionAccess().getActionsAssignment_8(), "rule__SoarProduction__ActionsAssignment_8");
			builder.put(grammarAccess.getStateImpConditionAccess().getIdAssignment_3(), "rule__StateImpCondition__IdAssignment_3");
			builder.put(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4(), "rule__StateImpCondition__AttrValueTestAssignment_4");
			builder.put(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_2(), "rule__AttrValueTest__AttrTestAssignment_2");
			builder.put(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3_1(), "rule__AttrValueTest__AttrTestAssignment_3_1");
			builder.put(grammarAccess.getAttrValueTestAccess().getTestAssignment_4(), "rule__AttrValueTest__TestAssignment_4");
			builder.put(grammarAccess.getPlusExprAccess().getOpAssignment_1_0_0_1(), "rule__PlusExpr__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getPlusExprAccess().getRightAssignment_1_1(), "rule__PlusExpr__RightAssignment_1_1");
			builder.put(grammarAccess.getRelationalExprAccess().getOpAssignment_1_0_0_1(), "rule__RelationalExpr__OpAssignment_1_0_0_1");
			builder.put(grammarAccess.getRelationalExprAccess().getRightAssignment_1_1(), "rule__RelationalExpr__RightAssignment_1_1");
			builder.put(grammarAccess.getPrefixExprAccess().getOpAssignment_0_1(), "rule__PrefixExpr__OpAssignment_0_1");
			builder.put(grammarAccess.getPrefixExprAccess().getExprAssignment_0_2(), "rule__PrefixExpr__ExprAssignment_0_2");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_0_2(), "rule__AtomicConditionExpr__TestsAssignment_0_2");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_1_2(), "rule__AtomicConditionExpr__TestsAssignment_1_2");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getConstsAssignment_2_2(), "rule__AtomicConditionExpr__ConstsAssignment_2_2");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getValAssignment_3_1(), "rule__AtomicConditionExpr__ValAssignment_3_1");
			builder.put(grammarAccess.getAtomicConditionExprAccess().getValAssignment_4_1(), "rule__AtomicConditionExpr__ValAssignment_4_1");
			builder.put(grammarAccess.getActionSideExprAccess().getIdAssignment_0_1(), "rule__ActionSideExpr__IdAssignment_0_1");
			builder.put(grammarAccess.getActionSideExprAccess().getMakeIdAssignment_0_3(), "rule__ActionSideExpr__MakeIdAssignment_0_3");
			builder.put(grammarAccess.getActionSideExprAccess().getAttrValMakesAssignment_0_4(), "rule__ActionSideExpr__AttrValMakesAssignment_0_4");
			builder.put(grammarAccess.getActionSideExprAccess().getTextAssignment_1_2(), "rule__ActionSideExpr__TextAssignment_1_2");
			builder.put(grammarAccess.getActionExprAccess().getValAssignment_0_0_1(), "rule__ActionExpr__ValAssignment_0_0_1");
			builder.put(grammarAccess.getActionExprAccess().getValAssignment_1_1(), "rule__ActionExpr__ValAssignment_1_1");
			builder.put(grammarAccess.getActionExprAccess().getExprAssignment_4_1(), "rule__ActionExpr__ExprAssignment_4_1");
			builder.put(grammarAccess.getActionExprAccess().getExprsAssignment_6_2(), "rule__ActionExpr__ExprsAssignment_6_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SoarGrammarAccess grammarAccess;

	@Override
	protected InternalSoarParser createParser() {
		InternalSoarParser result = new InternalSoarParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_SL_COMMENT" };
	}

	public SoarGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SoarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
