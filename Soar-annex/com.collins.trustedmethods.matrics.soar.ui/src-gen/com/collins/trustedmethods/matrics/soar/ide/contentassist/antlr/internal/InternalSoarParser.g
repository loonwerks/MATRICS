/*
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.33.0.
 */

parser grammar InternalSoarParser;

options {
	tokenVocab=InternalSoarLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;

}
@members {
	private SoarGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Tilde", "'~'");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("Gp", "'gp'");
		tokenNameToValue.put("Sp", "'sp'");
		tokenNameToValue.put("QuotationMarkQuotationMarkQuotationMark", "'\"\"\"'");
		tokenNameToValue.put("HyphenMinusHyphenMinusGreaterThanSign", "'-->'");
		tokenNameToValue.put("LessThanSignEqualsSignGreaterThanSign", "'<=>'");
		tokenNameToValue.put("Chunk", "'chunk'");
		tokenNameToValue.put("State", "'state'");
		tokenNameToValue.put("Write", "'write'");
		tokenNameToValue.put("Crlf", "'(crlf)'");
		tokenNameToValue.put("Default", "'default'");
		tokenNameToValue.put("Impasse", "'impasse'");
		tokenNameToValue.put("Template", "'template'");
		tokenNameToValue.put("ISupport", "'i-support'");
		tokenNameToValue.put("OSupport", "'o-support'");
	}

	public void setGrammarAccess(SoarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary
:
{ before(grammarAccess.getAnnexLibraryRule()); }
	 ruleAnnexLibrary
{ after(grammarAccess.getAnnexLibraryRule()); } 
	 EOF 
;

// Rule AnnexLibrary
ruleAnnexLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall()); }
		ruleSoarAnnexLibrary
		{ after(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarAnnexLibrary
entryRuleSoarAnnexLibrary
:
{ before(grammarAccess.getSoarAnnexLibraryRule()); }
	 ruleSoarAnnexLibrary
{ after(grammarAccess.getSoarAnnexLibraryRule()); } 
	 EOF 
;

// Rule SoarAnnexLibrary
ruleSoarAnnexLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarAnnexLibraryAccess().getGroup()); }
		(rule__SoarAnnexLibrary__Group__0)
		{ after(grammarAccess.getSoarAnnexLibraryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarAnnexSubclause
entryRuleSoarAnnexSubclause
:
{ before(grammarAccess.getSoarAnnexSubclauseRule()); }
	 ruleSoarAnnexSubclause
{ after(grammarAccess.getSoarAnnexSubclauseRule()); } 
	 EOF 
;

// Rule SoarAnnexSubclause
ruleSoarAnnexSubclause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarAnnexSubclauseAccess().getGroup()); }
		(rule__SoarAnnexSubclause__Group__0)
		{ after(grammarAccess.getSoarAnnexSubclauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarProduction
entryRuleSoarProduction
:
{ before(grammarAccess.getSoarProductionRule()); }
	 ruleSoarProduction
{ after(grammarAccess.getSoarProductionRule()); } 
	 EOF 
;

// Rule SoarProduction
ruleSoarProduction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarProductionAccess().getGroup()); }
		(rule__SoarProduction__Group__0)
		{ after(grammarAccess.getSoarProductionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocumentation
entryRuleDocumentation
:
{ before(grammarAccess.getDocumentationRule()); }
	 ruleDocumentation
{ after(grammarAccess.getDocumentationRule()); } 
	 EOF 
;

// Rule Documentation
ruleDocumentation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentationAccess().getGroup()); }
		(rule__Documentation__Group__0)
		{ after(grammarAccess.getDocumentationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlags
entryRuleFlags
:
{ before(grammarAccess.getFlagsRule()); }
	 ruleFlags
{ after(grammarAccess.getFlagsRule()); } 
	 EOF 
;

// Rule Flags
ruleFlags 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlagsAccess().getGroup()); }
		(rule__Flags__Group__0)
		{ after(grammarAccess.getFlagsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionSide
entryRuleConditionSide
:
{ before(grammarAccess.getConditionSideRule()); }
	 ruleConditionSide
{ after(grammarAccess.getConditionSideRule()); } 
	 EOF 
;

// Rule ConditionSide
ruleConditionSide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionSideAccess().getGroup()); }
		(rule__ConditionSide__Group__0)
		{ after(grammarAccess.getConditionSideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateImpCondition
entryRuleStateImpCondition
:
{ before(grammarAccess.getStateImpConditionRule()); }
	 ruleStateImpCondition
{ after(grammarAccess.getStateImpConditionRule()); } 
	 EOF 
;

// Rule StateImpCondition
ruleStateImpCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getGroup()); }
		(rule__StateImpCondition__Group__0)
		{ after(grammarAccess.getStateImpConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCond
entryRuleCond
:
{ before(grammarAccess.getCondRule()); }
	 ruleCond
{ after(grammarAccess.getCondRule()); } 
	 EOF 
;

// Rule Cond
ruleCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondAccess().getGroup()); }
		(rule__Cond__Group__0)
		{ after(grammarAccess.getCondAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePositiveCond
entryRulePositiveCond
:
{ before(grammarAccess.getPositiveCondRule()); }
	 rulePositiveCond
{ after(grammarAccess.getPositiveCondRule()); } 
	 EOF 
;

// Rule PositiveCond
rulePositiveCond 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPositiveCondAccess().getAlternatives()); }
		(rule__PositiveCond__Alternatives)
		{ after(grammarAccess.getPositiveCondAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondForOneId
entryRuleCondForOneId
:
{ before(grammarAccess.getCondForOneIdRule()); }
	 ruleCondForOneId
{ after(grammarAccess.getCondForOneIdRule()); } 
	 EOF 
;

// Rule CondForOneId
ruleCondForOneId 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCondForOneIdAccess().getGroup()); }
		(rule__CondForOneId__Group__0)
		{ after(grammarAccess.getCondForOneIdAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttrValueTest
entryRuleAttrValueTest
:
{ before(grammarAccess.getAttrValueTestRule()); }
	 ruleAttrValueTest
{ after(grammarAccess.getAttrValueTestRule()); } 
	 EOF 
;

// Rule AttrValueTest
ruleAttrValueTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getGroup()); }
		(rule__AttrValueTest__Group__0)
		{ after(grammarAccess.getAttrValueTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueTest
entryRuleValueTest
:
{ before(grammarAccess.getValueTestRule()); }
	 ruleValueTest
{ after(grammarAccess.getValueTestRule()); } 
	 EOF 
;

// Rule ValueTest
ruleValueTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueTestAccess().getAlternatives()); }
		(rule__ValueTest__Alternatives)
		{ after(grammarAccess.getValueTestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTest
entryRuleTest
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestAccess().getAlternatives()); }
		(rule__Test__Alternatives)
		{ after(grammarAccess.getTestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDisjunctionTest
entryRuleDisjunctionTest
:
{ before(grammarAccess.getDisjunctionTestRule()); }
	 ruleDisjunctionTest
{ after(grammarAccess.getDisjunctionTestRule()); } 
	 EOF 
;

// Rule DisjunctionTest
ruleDisjunctionTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDisjunctionTestAccess().getGroup()); }
		(rule__DisjunctionTest__Group__0)
		{ after(grammarAccess.getDisjunctionTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSingleTest
entryRuleSingleTest
:
{ before(grammarAccess.getSingleTestRule()); }
	 ruleSingleTest
{ after(grammarAccess.getSingleTestRule()); } 
	 EOF 
;

// Rule SingleTest
ruleSingleTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSingleTestAccess().getGroup()); }
		(rule__SingleTest__Group__0)
		{ after(grammarAccess.getSingleTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalTest
entryRuleRelationalTest
:
{ before(grammarAccess.getRelationalTestRule()); }
	 ruleRelationalTest
{ after(grammarAccess.getRelationalTestRule()); } 
	 EOF 
;

// Rule RelationalTest
ruleRelationalTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalTestAccess().getAlternatives()); }
		(rule__RelationalTest__Alternatives)
		{ after(grammarAccess.getRelationalTestAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionSide
entryRuleActionSide
:
{ before(grammarAccess.getActionSideRule()); }
	 ruleActionSide
{ after(grammarAccess.getActionSideRule()); } 
	 EOF 
;

// Rule ActionSide
ruleActionSide 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionSideAccess().getGroup()); }
		(rule__ActionSide__Group__0)
		{ after(grammarAccess.getActionSideAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAction
entryRuleAction
:
{ before(grammarAccess.getActionRule()); }
	 ruleAction
{ after(grammarAccess.getActionRule()); } 
	 EOF 
;

// Rule Action
ruleAction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionAccess().getGroup()); }
		(rule__Action__Group__0)
		{ after(grammarAccess.getActionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrint
entryRulePrint
:
{ before(grammarAccess.getPrintRule()); }
	 rulePrint
{ after(grammarAccess.getPrintRule()); } 
	 EOF 
;

// Rule Print
rulePrint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrintAccess().getGroup()); }
		(rule__Print__Group__0)
		{ after(grammarAccess.getPrintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncCall
entryRuleFuncCall
:
{ before(grammarAccess.getFuncCallRule()); }
	 ruleFuncCall
{ after(grammarAccess.getFuncCallRule()); } 
	 EOF 
;

// Rule FuncCall
ruleFuncCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncCallAccess().getGroup()); }
		(rule__FuncCall__Group__0)
		{ after(grammarAccess.getFuncCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttrValueMake
entryRuleAttrValueMake
:
{ before(grammarAccess.getAttrValueMakeRule()); }
	 ruleAttrValueMake
{ after(grammarAccess.getAttrValueMakeRule()); } 
	 EOF 
;

// Rule AttrValueMake
ruleAttrValueMake 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttrValueMakeAccess().getGroup()); }
		(rule__AttrValueMake__Group__0)
		{ after(grammarAccess.getAttrValueMakeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableorSymConstant
entryRuleVariableorSymConstant
:
{ before(grammarAccess.getVariableorSymConstantRule()); }
	 ruleVariableorSymConstant
{ after(grammarAccess.getVariableorSymConstantRule()); } 
	 EOF 
;

// Rule VariableorSymConstant
ruleVariableorSymConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getGroup()); }
		(rule__VariableorSymConstant__Group__0)
		{ after(grammarAccess.getVariableorSymConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstant
entryRuleConstant
:
{ before(grammarAccess.getConstantRule()); }
	 ruleConstant
{ after(grammarAccess.getConstantRule()); } 
	 EOF 
;

// Rule Constant
ruleConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstantAccess().getGroup()); }
		(rule__Constant__Group__0)
		{ after(grammarAccess.getConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueMake
entryRuleValueMake
:
{ before(grammarAccess.getValueMakeRule()); }
	 ruleValueMake
{ after(grammarAccess.getValueMakeRule()); } 
	 EOF 
;

// Rule ValueMake
ruleValueMake 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueMakeAccess().getGroup()); }
		(rule__ValueMake__Group__0)
		{ after(grammarAccess.getValueMakeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefSpecifier
entryRulePrefSpecifier
:
{ before(grammarAccess.getPrefSpecifierRule()); }
	 rulePrefSpecifier
{ after(grammarAccess.getPrefSpecifierRule()); } 
	 EOF 
;

// Rule PrefSpecifier
rulePrefSpecifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getAlternatives()); }
		(rule__PrefSpecifier__Alternatives)
		{ after(grammarAccess.getPrefSpecifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryPref
entryRuleUnaryPref
:
{ before(grammarAccess.getUnaryPrefRule()); }
	 ruleUnaryPref
{ after(grammarAccess.getUnaryPrefRule()); } 
	 EOF 
;

// Rule UnaryPref
ruleUnaryPref 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryPrefAccess().getAlternatives()); }
		(rule__UnaryPref__Alternatives)
		{ after(grammarAccess.getUnaryPrefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOrBinaryPref
entryRuleUnaryOrBinaryPref
:
{ before(grammarAccess.getUnaryOrBinaryPrefRule()); }
	 ruleUnaryOrBinaryPref
{ after(grammarAccess.getUnaryOrBinaryPrefRule()); } 
	 EOF 
;

// Rule UnaryOrBinaryPref
ruleUnaryOrBinaryPref 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives()); }
		(rule__UnaryOrBinaryPref__Alternatives)
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTATE
entryRuleSTATE
:
{ before(grammarAccess.getSTATERule()); }
	 ruleSTATE
{ after(grammarAccess.getSTATERule()); } 
	 EOF 
;

// Rule STATE
ruleSTATE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTATEAccess().getStateKeyword()); }
		State
		{ after(grammarAccess.getSTATEAccess().getStateKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIMPASSE
entryRuleIMPASSE
:
{ before(grammarAccess.getIMPASSERule()); }
	 ruleIMPASSE
{ after(grammarAccess.getIMPASSERule()); } 
	 EOF 
;

// Rule IMPASSE
ruleIMPASSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIMPASSEAccess().getImpasseKeyword()); }
		Impasse
		{ after(grammarAccess.getIMPASSEAccess().getImpasseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()); }
		Sp
		{ after(grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()); }
		Gp
		{ after(grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlagsAccess().getOSupportKeyword_1_0()); }
		OSupport
		{ after(grammarAccess.getFlagsAccess().getOSupportKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getISupportKeyword_1_1()); }
		ISupport
		{ after(grammarAccess.getFlagsAccess().getISupportKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getChunkKeyword_1_2()); }
		Chunk
		{ after(grammarAccess.getFlagsAccess().getChunkKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getDefaultKeyword_1_3()); }
		Default
		{ after(grammarAccess.getFlagsAccess().getDefaultKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getTemplateKeyword_1_4()); }
		Template
		{ after(grammarAccess.getFlagsAccess().getTemplateKeyword_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()); }
		ruleSTATE
		{ after(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()); }
		ruleIMPASSE
		{ after(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveCondAccess().getGroup_0()); }
		(rule__PositiveCond__Group_0__0)
		{ after(grammarAccess.getPositiveCondAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPositiveCondAccess().getGroup_1()); }
		(rule__PositiveCond__Group_1__0)
		{ after(grammarAccess.getPositiveCondAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondForOneIdAccess().getSTATEParserRuleCall_2_0()); }
		ruleSTATE
		{ after(grammarAccess.getCondForOneIdAccess().getSTATEParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getCondForOneIdAccess().getIMPASSEParserRuleCall_2_1()); }
		ruleIMPASSE
		{ after(grammarAccess.getCondForOneIdAccess().getIMPASSEParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueTestAccess().getGroup_0()); }
		(rule__ValueTest__Group_0__0)
		{ after(grammarAccess.getValueTestAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueTestAccess().getGroup_1()); }
		(rule__ValueTest__Group_1__0)
		{ after(grammarAccess.getValueTestAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getGroup_0()); }
		(rule__Test__Group_0__0)
		{ after(grammarAccess.getTestAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTestAccess().getGroup_1()); }
		(rule__Test__Group_1__0)
		{ after(grammarAccess.getTestAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getTestAccess().getGroup_2()); }
		(rule__Test__Group_2__0)
		{ after(grammarAccess.getTestAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getTestAccess().getRelationalTestAssignment_3()); }
		(rule__Test__RelationalTestAssignment_3)
		{ after(grammarAccess.getTestAccess().getRelationalTestAssignment_3()); }
	)
	|
	(
		{ before(grammarAccess.getTestAccess().getGroup_4()); }
		(rule__Test__Group_4__0)
		{ after(grammarAccess.getTestAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleTestAccess().getVariableAssignment_1_0()); }
		(rule__SingleTest__VariableAssignment_1_0)
		{ after(grammarAccess.getSingleTestAccess().getVariableAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSingleTestAccess().getConstantAssignment_1_1()); }
		(rule__SingleTest__ConstantAssignment_1_1)
		{ after(grammarAccess.getSingleTestAccess().getConstantAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalTestAccess().getGroup_0()); }
		(rule__RelationalTest__Group_0__0)
		{ after(grammarAccess.getRelationalTestAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getGroup_1()); }
		(rule__RelationalTest__Group_1__0)
		{ after(grammarAccess.getRelationalTestAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalTestAccess().getLessThanSignGreaterThanSignKeyword_0_1_0()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getRelationalTestAccess().getLessThanSignGreaterThanSignKeyword_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getLessThanSignKeyword_0_1_1()); }
		LessThanSign
		{ after(grammarAccess.getRelationalTestAccess().getLessThanSignKeyword_0_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getGreaterThanSignKeyword_0_1_2()); }
		GreaterThanSign
		{ after(grammarAccess.getRelationalTestAccess().getGreaterThanSignKeyword_0_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignKeyword_0_1_3()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignKeyword_0_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getGreaterThanSignEqualsSignKeyword_0_1_4()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getRelationalTestAccess().getGreaterThanSignEqualsSignKeyword_0_1_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getEqualsSignEqualsSignKeyword_0_1_5()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getRelationalTestAccess().getEqualsSignEqualsSignKeyword_0_1_5()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6()); }
		LessThanSignEqualsSignGreaterThanSign
		{ after(grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalTestAccess().getEqualsSignKeyword_0_1_7()); }
		EqualsSign
		{ after(grammarAccess.getRelationalTestAccess().getEqualsSignKeyword_0_1_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getVariableAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableAccess().getSTATEParserRuleCall_1_1_1()); }
		ruleSTATE
		{ after(grammarAccess.getVariableAccess().getSTATEParserRuleCall_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideAccess().getActionAssignment_1_0()); }
		(rule__ActionSide__ActionAssignment_1_0)
		{ after(grammarAccess.getActionSideAccess().getActionAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionSideAccess().getFuncCallAssignment_1_1()); }
		(rule__ActionSide__FuncCallAssignment_1_1)
		{ after(grammarAccess.getActionSideAccess().getFuncCallAssignment_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionSideAccess().getPrintAssignment_1_2()); }
		(rule__ActionSide__PrintAssignment_1_2)
		{ after(grammarAccess.getActionSideAccess().getPrintAssignment_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Alternatives_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getPRINT_STRINGTerminalRuleCall_1_2_0()); }
		RULE_PRINT_STRING
		{ after(grammarAccess.getPrintAccess().getPRINT_STRINGTerminalRuleCall_1_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getVariableAssignment_1_2_1()); }
		(rule__Print__VariableAssignment_1_2_1)
		{ after(grammarAccess.getPrintAccess().getVariableAssignment_1_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrintAccess().getCrlfKeyword_1_2_2()); }
		Crlf
		{ after(grammarAccess.getPrintAccess().getCrlfKeyword_1_2_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getAlternatives_2_0()); }
		(rule__FuncCall__Alternatives_2_0)
		{ after(grammarAccess.getFuncCallAccess().getAlternatives_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getPlusSignKeyword_2_1()); }
		PlusSign
		{ after(grammarAccess.getFuncCallAccess().getPlusSignKeyword_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getHyphenMinusKeyword_2_2()); }
		HyphenMinus
		{ after(grammarAccess.getFuncCallAccess().getHyphenMinusKeyword_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getAsteriskKeyword_2_3()); }
		Asterisk
		{ after(grammarAccess.getFuncCallAccess().getAsteriskKeyword_2_3()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSolidusKeyword_2_4()); }
		Solidus
		{ after(grammarAccess.getFuncCallAccess().getSolidusKeyword_2_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Alternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getFuncCallAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getFuncCallAccess().getSTATEParserRuleCall_2_0_1()); }
		ruleSTATE
		{ after(grammarAccess.getFuncCallAccess().getSTATEParserRuleCall_2_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getConstantParserRuleCall_0()); }
		ruleConstant
		{ after(grammarAccess.getValueAccess().getConstantParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getFuncCallParserRuleCall_1()); }
		ruleFuncCall
		{ after(grammarAccess.getValueAccess().getFuncCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getVariableParserRuleCall_2()); }
		ruleVariable
		{ after(grammarAccess.getValueAccess().getVariableParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getVariableAssignment_1_0()); }
		(rule__VariableorSymConstant__VariableAssignment_1_0)
		{ after(grammarAccess.getVariableorSymConstantAccess().getVariableAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1_1()); }
		(rule__VariableorSymConstant__Alternatives_1_1)
		{ after(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getVariableorSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getSTATEParserRuleCall_1_1_1()); }
		ruleSTATE
		{ after(grammarAccess.getVariableorSymConstantAccess().getSTATEParserRuleCall_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getAlternatives_1_0()); }
		(rule__Constant__Alternatives_1_0)
		{ after(grammarAccess.getConstantAccess().getAlternatives_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_1()); }
		RULE_INT
		{ after(grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getFLOATTerminalRuleCall_1_2()); }
		RULE_FLOAT
		{ after(grammarAccess.getConstantAccess().getFLOATTerminalRuleCall_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getPRINT_STRINGTerminalRuleCall_1_3()); }
		RULE_PRINT_STRING
		{ after(grammarAccess.getConstantAccess().getPRINT_STRINGTerminalRuleCall_1_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstantAccess().getSTATEParserRuleCall_1_0_1()); }
		ruleSTATE
		{ after(grammarAccess.getConstantAccess().getSTATEParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getGroup_0()); }
		(rule__PrefSpecifier__Group_0__0)
		{ after(grammarAccess.getPrefSpecifierAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getGroup_1()); }
		(rule__PrefSpecifier__Group_1__0)
		{ after(grammarAccess.getPrefSpecifierAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPref__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0()); }
		PlusSign
		{ after(grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1()); }
		HyphenMinus
		{ after(grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2()); }
		ExclamationMark
		{ after(grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getTildeKeyword_3()); }
		Tilde
		{ after(grammarAccess.getUnaryPrefAccess().getTildeKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4()); }
		CommercialAt
		{ after(grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrBinaryPref__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0()); }
		GreaterThanSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1()); }
		EqualsSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2()); }
		LessThanSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3()); }
		Ampersand
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexLibrary__Group__0__Impl
	rule__SoarAnnexLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0()); }
	()
	{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexLibrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1()); }
	(rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1)*
	{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarAnnexSubclause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexSubclause__Group__0__Impl
	rule__SoarAnnexSubclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0()); }
	()
	{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexSubclause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1()); }
	(rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1)*
	{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarProduction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__0__Impl
	rule__SoarProduction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getSoarProductionAction_0()); }
	()
	{ after(grammarAccess.getSoarProductionAccess().getSoarProductionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__1__Impl
	rule__SoarProduction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getAlternatives_1()); }
	(rule__SoarProduction__Alternatives_1)
	{ after(grammarAccess.getSoarProductionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__2__Impl
	rule__SoarProduction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2()); }
	LeftCurlyBracket
	{ after(grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__3__Impl
	rule__SoarProduction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getNameAssignment_3()); }
	(rule__SoarProduction__NameAssignment_3)
	{ after(grammarAccess.getSoarProductionAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__4__Impl
	rule__SoarProduction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getDocAssignment_4()); }
	(rule__SoarProduction__DocAssignment_4)?
	{ after(grammarAccess.getSoarProductionAccess().getDocAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__5__Impl
	rule__SoarProduction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getFlagAssignment_5()); }
	(rule__SoarProduction__FlagAssignment_5)?
	{ after(grammarAccess.getSoarProductionAccess().getFlagAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__6__Impl
	rule__SoarProduction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6()); }
	(rule__SoarProduction__ConditionsAssignment_6)
	{ after(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__7__Impl
	rule__SoarProduction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7()); }
	HyphenMinusHyphenMinusGreaterThanSign
	{ after(grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__8__Impl
	rule__SoarProduction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
	(rule__SoarProduction__ActionsAssignment_8)
	{ after(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9()); }
	RightCurlyBracket
	{ after(grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Documentation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__0__Impl
	rule__Documentation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_0()); }
	QuotationMarkQuotationMarkQuotationMark
	{ after(grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__1__Impl
	rule__Documentation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1()); }
	RULE_SYM_CONSTANT_STRING
	{ after(grammarAccess.getDocumentationAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Documentation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Documentation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_2()); }
	QuotationMarkQuotationMarkQuotationMark
	{ after(grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flags__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flags__Group__0__Impl
	rule__Flags__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlagsAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getFlagsAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flags__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlagsAccess().getAlternatives_1()); }
	(rule__Flags__Alternatives_1)
	{ after(grammarAccess.getFlagsAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionSide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionSide__Group__0__Impl
	rule__ConditionSide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionSideAccess().getConditionSideAction_0()); }
	()
	{ after(grammarAccess.getConditionSideAccess().getConditionSideAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionSide__Group__1__Impl
	rule__ConditionSide__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionSideAccess().getStateImpConditionAssignment_1()); }
	(rule__ConditionSide__StateImpConditionAssignment_1)
	{ after(grammarAccess.getConditionSideAccess().getStateImpConditionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionSide__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionSideAccess().getCondAssignment_2()); }
	(rule__ConditionSide__CondAssignment_2)*
	{ after(grammarAccess.getConditionSideAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateImpCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__0__Impl
	rule__StateImpCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0()); }
	()
	{ after(grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__1__Impl
	rule__StateImpCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__2__Impl
	rule__StateImpCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getAlternatives_2()); }
	(rule__StateImpCondition__Alternatives_2)
	{ after(grammarAccess.getStateImpConditionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__3__Impl
	rule__StateImpCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getIdTestAssignment_3()); }
	(rule__StateImpCondition__IdTestAssignment_3)?
	{ after(grammarAccess.getStateImpConditionAccess().getIdTestAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__4__Impl
	rule__StateImpCondition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
		(rule__StateImpCondition__AttrValueTestAssignment_4)
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
	)
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
		(rule__StateImpCondition__AttrValueTestAssignment_4)*
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cond__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cond__Group__0__Impl
	rule__Cond__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondAccess().getCondAction_0()); }
	()
	{ after(grammarAccess.getCondAccess().getCondAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cond__Group__1__Impl
	rule__Cond__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondAccess().getHyphenMinusKeyword_1()); }
	(HyphenMinus)?
	{ after(grammarAccess.getCondAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cond__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondAccess().getCondAssignment_2()); }
	(rule__Cond__CondAssignment_2)
	{ after(grammarAccess.getCondAccess().getCondAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveCond__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_0__0__Impl
	rule__PositiveCond__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveCondAccess().getPositiveCondAction_0_0()); }
	()
	{ after(grammarAccess.getPositiveCondAccess().getPositiveCondAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveCondAccess().getGroup_0_1()); }
	(rule__PositiveCond__Group_0_1__0)
	{ after(grammarAccess.getPositiveCondAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveCond__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_0_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveCondAccess().getCondForOneIdAssignment_0_1_0()); }
	(rule__PositiveCond__CondForOneIdAssignment_0_1_0)
	{ after(grammarAccess.getPositiveCondAccess().getCondForOneIdAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PositiveCond__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_1__0__Impl
	rule__PositiveCond__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveCondAccess().getLeftCurlyBracketKeyword_1_0()); }
	LeftCurlyBracket
	{ after(grammarAccess.getPositiveCondAccess().getLeftCurlyBracketKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_1__1__Impl
	rule__PositiveCond__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPositiveCondAccess().getCondAssignment_1_1()); }
		(rule__PositiveCond__CondAssignment_1_1)
		{ after(grammarAccess.getPositiveCondAccess().getCondAssignment_1_1()); }
	)
	(
		{ before(grammarAccess.getPositiveCondAccess().getCondAssignment_1_1()); }
		(rule__PositiveCond__CondAssignment_1_1)*
		{ after(grammarAccess.getPositiveCondAccess().getCondAssignment_1_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PositiveCond__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPositiveCondAccess().getRightCurlyBracketKeyword_1_2()); }
	RightCurlyBracket
	{ after(grammarAccess.getPositiveCondAccess().getRightCurlyBracketKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CondForOneId__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__0__Impl
	rule__CondForOneId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondForOneIdAccess().getCondForOneIdAction_0()); }
	()
	{ after(grammarAccess.getCondForOneIdAccess().getCondForOneIdAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__1__Impl
	rule__CondForOneId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondForOneIdAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getCondForOneIdAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__2__Impl
	rule__CondForOneId__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondForOneIdAccess().getAlternatives_2()); }
	(rule__CondForOneId__Alternatives_2)?
	{ after(grammarAccess.getCondForOneIdAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__3__Impl
	rule__CondForOneId__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondForOneIdAccess().getIdTestAssignment_3()); }
	(rule__CondForOneId__IdTestAssignment_3)
	{ after(grammarAccess.getCondForOneIdAccess().getIdTestAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__4__Impl
	rule__CondForOneId__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCondForOneIdAccess().getAttrValueTestAssignment_4()); }
		(rule__CondForOneId__AttrValueTestAssignment_4)
		{ after(grammarAccess.getCondForOneIdAccess().getAttrValueTestAssignment_4()); }
	)
	(
		{ before(grammarAccess.getCondForOneIdAccess().getAttrValueTestAssignment_4()); }
		(rule__CondForOneId__AttrValueTestAssignment_4)*
		{ after(grammarAccess.getCondForOneIdAccess().getAttrValueTestAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CondForOneId__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCondForOneIdAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getCondForOneIdAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__0__Impl
	rule__AttrValueTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0()); }
	()
	{ after(grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__1__Impl
	rule__AttrValueTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getHyphenMinusKeyword_1()); }
	(HyphenMinus)?
	{ after(grammarAccess.getAttrValueTestAccess().getHyphenMinusKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__2__Impl
	rule__AttrValueTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_2()); }
	CircumflexAccent
	{ after(grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__3__Impl
	rule__AttrValueTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3()); }
	(rule__AttrValueTest__AttrTestAssignment_3)
	{ after(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__4__Impl
	rule__AttrValueTest__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getGroup_4()); }
	(rule__AttrValueTest__Group_4__0)*
	{ after(grammarAccess.getAttrValueTestAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getValueTestAssignment_5()); }
	(rule__AttrValueTest__ValueTestAssignment_5)*
	{ after(grammarAccess.getAttrValueTestAccess().getValueTestAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueTest__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group_4__0__Impl
	rule__AttrValueTest__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getFullStopKeyword_4_0()); }
	FullStop
	{ after(grammarAccess.getAttrValueTestAccess().getFullStopKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_4_1()); }
	(rule__AttrValueTest__AttrTestAssignment_4_1)
	{ after(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTest__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_0__0__Impl
	rule__ValueTest__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getValueTestAction_0_0()); }
	()
	{ after(grammarAccess.getValueTestAccess().getValueTestAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getGroup_0_1()); }
	(rule__ValueTest__Group_0_1__0)
	{ after(grammarAccess.getValueTestAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTest__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_0_1__0__Impl
	rule__ValueTest__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getTestAssignment_0_1_0()); }
	(rule__ValueTest__TestAssignment_0_1_0)
	{ after(grammarAccess.getValueTestAccess().getTestAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getPlusSignKeyword_0_1_1()); }
	(PlusSign)?
	{ after(grammarAccess.getValueTestAccess().getPlusSignKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueTest__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_1__0__Impl
	rule__ValueTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getCondForOneIdAssignment_1_0()); }
	(rule__ValueTest__CondForOneIdAssignment_1_0)
	{ after(grammarAccess.getValueTestAccess().getCondForOneIdAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueTest__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueTestAccess().getPlusSignKeyword_1_1()); }
	(PlusSign)?
	{ after(grammarAccess.getValueTestAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_0__0__Impl
	rule__Test__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getConjuctiveTestAction_0_0()); }
	()
	{ after(grammarAccess.getTestAccess().getConjuctiveTestAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_0__1__Impl
	rule__Test__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_0_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getDisjunctionTestAssignment_0_2()); }
	(rule__Test__DisjunctionTestAssignment_0_2)
	{ after(grammarAccess.getTestAccess().getDisjunctionTestAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_1__0__Impl
	rule__Test__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getRelationalTestAssignment_1_0()); }
	(rule__Test__RelationalTestAssignment_1_0)
	{ after(grammarAccess.getTestAccess().getRelationalTestAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_1_1()); }
	RightCurlyBracket
	{ after(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_2__0__Impl
	rule__Test__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getSimpleTestAction_2_0()); }
	()
	{ after(grammarAccess.getTestAccess().getSimpleTestAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getDisjunctionTestAssignment_2_1()); }
	(rule__Test__DisjunctionTestAssignment_2_1)
	{ after(grammarAccess.getTestAccess().getDisjunctionTestAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_4__0__Impl
	rule__Test__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getMultiValueTestAction_4_0()); }
	()
	{ after(grammarAccess.getTestAccess().getMultiValueTestAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_4__1__Impl
	rule__Test__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getLeftSquareBracketKeyword_4_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getTestAccess().getLeftSquareBracketKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_4__2__Impl
	rule__Test__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2()); }
		(RULE_INT)
		{ after(grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2()); }
	)
	(
		{ before(grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2()); }
		(RULE_INT)*
		{ after(grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Test__Group_4__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestAccess().getRightSquareBracketKeyword_4_3()); }
	RightSquareBracket
	{ after(grammarAccess.getTestAccess().getRightSquareBracketKeyword_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DisjunctionTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionTest__Group__0__Impl
	rule__DisjunctionTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionTestAccess().getDisjunctionTestAction_0()); }
	()
	{ after(grammarAccess.getDisjunctionTestAccess().getDisjunctionTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionTest__Group__1__Impl
	rule__DisjunctionTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionTestAccess().getLessThanSignLessThanSignKeyword_1()); }
	LessThanSignLessThanSign
	{ after(grammarAccess.getDisjunctionTestAccess().getLessThanSignLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionTest__Group__2__Impl
	rule__DisjunctionTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDisjunctionTestAccess().getConstantAssignment_2()); }
		(rule__DisjunctionTest__ConstantAssignment_2)
		{ after(grammarAccess.getDisjunctionTestAccess().getConstantAssignment_2()); }
	)
	(
		{ before(grammarAccess.getDisjunctionTestAccess().getConstantAssignment_2()); }
		(rule__DisjunctionTest__ConstantAssignment_2)*
		{ after(grammarAccess.getDisjunctionTestAccess().getConstantAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DisjunctionTest__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDisjunctionTestAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }
	GreaterThanSignGreaterThanSign
	{ after(grammarAccess.getDisjunctionTestAccess().getGreaterThanSignGreaterThanSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SingleTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleTest__Group__0__Impl
	rule__SingleTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleTestAccess().getSingleTestAction_0()); }
	()
	{ after(grammarAccess.getSingleTestAccess().getSingleTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SingleTest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSingleTestAccess().getAlternatives_1()); }
	(rule__SingleTest__Alternatives_1)
	{ after(grammarAccess.getSingleTestAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalTest__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalTest__Group_0__0__Impl
	rule__RelationalTest__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalTestAccess().getRelationalTestAction_0_0()); }
	()
	{ after(grammarAccess.getRelationalTestAccess().getRelationalTestAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalTest__Group_0__1__Impl
	rule__RelationalTest__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalTestAccess().getAlternatives_0_1()); }
	(rule__RelationalTest__Alternatives_0_1)
	{ after(grammarAccess.getRelationalTestAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalTest__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_0_2()); }
	(rule__RelationalTest__SingleTestAssignment_0_2)
	{ after(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalTest__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalTest__Group_1__0__Impl
	rule__RelationalTest__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalTestAccess().getRelationalTestAction_1_0()); }
	()
	{ after(grammarAccess.getRelationalTestAccess().getRelationalTestAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalTest__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_1_1()); }
	(rule__RelationalTest__SingleTestAssignment_1_1)
	{ after(grammarAccess.getRelationalTestAccess().getSingleTestAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVariableAction_0()); }
	()
	{ after(grammarAccess.getVariableAccess().getVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getGroup_1()); }
	(rule__Variable__Group_1__0)
	{ after(grammarAccess.getVariableAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1__0__Impl
	rule__Variable__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getLessThanSignKeyword_1_0()); }
	LessThanSign
	{ after(grammarAccess.getVariableAccess().getLessThanSignKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1__1__Impl
	rule__Variable__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getAlternatives_1_1()); }
	(rule__Variable__Alternatives_1_1)
	{ after(grammarAccess.getVariableAccess().getAlternatives_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getGreaterThanSignKeyword_1_2()); }
	GreaterThanSign
	{ after(grammarAccess.getVariableAccess().getGreaterThanSignKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionSide__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSide__Group__0__Impl
	rule__ActionSide__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideAccess().getActionSideAction_0()); }
	()
	{ after(grammarAccess.getActionSideAccess().getActionSideAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSide__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideAccess().getAlternatives_1()); }
	(rule__ActionSide__Alternatives_1)*
	{ after(grammarAccess.getActionSideAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__0__Impl
	rule__Action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getActionAction_0()); }
	()
	{ after(grammarAccess.getActionAccess().getActionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getGroup_1()); }
	(rule__Action__Group_1__0)
	{ after(grammarAccess.getActionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Action__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__0__Impl
	rule__Action__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getActionAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__1__Impl
	rule__Action__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getVariableAssignment_1_1()); }
	(rule__Action__VariableAssignment_1_1)
	{ after(grammarAccess.getActionAccess().getVariableAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__2__Impl
	rule__Action__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionAccess().getAttrValMakeAssignment_1_2()); }
		(rule__Action__AttrValMakeAssignment_1_2)
		{ after(grammarAccess.getActionAccess().getAttrValMakeAssignment_1_2()); }
	)
	(
		{ before(grammarAccess.getActionAccess().getAttrValMakeAssignment_1_2()); }
		(rule__Action__AttrValMakeAssignment_1_2)*
		{ after(grammarAccess.getActionAccess().getAttrValMakeAssignment_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Action__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getActionAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__0__Impl
	rule__Print__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getPrintAction_0()); }
	()
	{ after(grammarAccess.getPrintAccess().getPrintAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getGroup_1()); }
	(rule__Print__Group_1__0)
	{ after(grammarAccess.getPrintAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Print__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1__0__Impl
	rule__Print__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1__1__Impl
	rule__Print__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getWriteKeyword_1_1()); }
	Write
	{ after(grammarAccess.getPrintAccess().getWriteKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1__2__Impl
	rule__Print__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPrintAccess().getAlternatives_1_2()); }
		(rule__Print__Alternatives_1_2)
		{ after(grammarAccess.getPrintAccess().getAlternatives_1_2()); }
	)
	(
		{ before(grammarAccess.getPrintAccess().getAlternatives_1_2()); }
		(rule__Print__Alternatives_1_2)*
		{ after(grammarAccess.getPrintAccess().getAlternatives_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Print__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrintAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getPrintAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__0__Impl
	rule__FuncCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getFuncCallAction_0()); }
	()
	{ after(grammarAccess.getFuncCallAccess().getFuncCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__1__Impl
	rule__FuncCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFuncCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__2__Impl
	rule__FuncCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getAlternatives_2()); }
	(rule__FuncCall__Alternatives_2)
	{ after(grammarAccess.getFuncCallAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__3__Impl
	rule__FuncCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getValueAssignment_3()); }
	(rule__FuncCall__ValueAssignment_3)*
	{ after(grammarAccess.getFuncCallAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncCallAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getFuncCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueMake__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group__0__Impl
	rule__AttrValueMake__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getAttrValueMakeAction_0()); }
	()
	{ after(grammarAccess.getAttrValueMakeAccess().getAttrValueMakeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getGroup_1()); }
	(rule__AttrValueMake__Group_1__0)
	{ after(grammarAccess.getAttrValueMakeAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueMake__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1__0__Impl
	rule__AttrValueMake__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getCircumflexAccentKeyword_1_0()); }
	CircumflexAccent
	{ after(grammarAccess.getAttrValueMakeAccess().getCircumflexAccentKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1__1__Impl
	rule__AttrValueMake__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_1()); }
	(rule__AttrValueMake__VariableOrSymConstantAssignment_1_1)
	{ after(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1__2__Impl
	rule__AttrValueMake__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getGroup_1_2()); }
	(rule__AttrValueMake__Group_1_2__0)*
	{ after(grammarAccess.getAttrValueMakeAccess().getGroup_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getValueMakeAssignment_1_3()); }
	(rule__AttrValueMake__ValueMakeAssignment_1_3)*
	{ after(grammarAccess.getAttrValueMakeAccess().getValueMakeAssignment_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueMake__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1_2__0__Impl
	rule__AttrValueMake__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getFullStopKeyword_1_2_0()); }
	FullStop
	{ after(grammarAccess.getAttrValueMakeAccess().getFullStopKeyword_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueMake__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_2_1()); }
	(rule__AttrValueMake__VariableOrSymConstantAssignment_1_2_1)
	{ after(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableorSymConstant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableorSymConstant__Group__0__Impl
	rule__VariableorSymConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableorSymConstantAccess().getVariableorSymConstantAction_0()); }
	()
	{ after(grammarAccess.getVariableorSymConstantAccess().getVariableorSymConstantAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableorSymConstant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1()); }
	(rule__VariableorSymConstant__Alternatives_1)
	{ after(grammarAccess.getVariableorSymConstantAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__0__Impl
	rule__Constant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getConstantAction_0()); }
	()
	{ after(grammarAccess.getConstantAccess().getConstantAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constant__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstantAccess().getAlternatives_1()); }
	(rule__Constant__Alternatives_1)
	{ after(grammarAccess.getConstantAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueMake__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueMake__Group__0__Impl
	rule__ValueMake__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueMakeAccess().getValueMakeAction_0()); }
	()
	{ after(grammarAccess.getValueMakeAccess().getValueMakeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueMake__Group__1__Impl
	rule__ValueMake__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueMakeAccess().getValueAssignment_1()); }
	(rule__ValueMake__ValueAssignment_1)
	{ after(grammarAccess.getValueMakeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueMake__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueMakeAccess().getPrefSpecifierAssignment_2()); }
	(rule__ValueMake__PrefSpecifierAssignment_2)*
	{ after(grammarAccess.getValueMakeAccess().getPrefSpecifierAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefSpecifier__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_0__0__Impl
	rule__PrefSpecifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_0_0()); }
	()
	{ after(grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getGroup_0_1()); }
	(rule__PrefSpecifier__Group_0_1__0)
	{ after(grammarAccess.getPrefSpecifierAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefSpecifier__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_0_1__0__Impl
	rule__PrefSpecifier__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getUnaryPrefAssignment_0_1_0()); }
	(rule__PrefSpecifier__UnaryPrefAssignment_0_1_0)
	{ after(grammarAccess.getPrefSpecifierAccess().getUnaryPrefAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_0_1_1()); }
	(Comma)?
	{ after(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefSpecifier__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1__0__Impl
	rule__PrefSpecifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_1_0()); }
	()
	{ after(grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getGroup_1_1()); }
	(rule__PrefSpecifier__Group_1_1__0)
	{ after(grammarAccess.getPrefSpecifierAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefSpecifier__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1_1__0__Impl
	rule__PrefSpecifier__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefAssignment_1_1_0()); }
	(rule__PrefSpecifier__UnaryOrBinaryPrefAssignment_1_1_0)
	{ after(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefAssignment_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1_1__1__Impl
	rule__PrefSpecifier__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getGroup_1_1_1()); }
	(rule__PrefSpecifier__Group_1_1_1__0)?
	{ after(grammarAccess.getPrefSpecifierAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_2()); }
	(Comma)?
	{ after(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefSpecifier__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1_1_1__0__Impl
	rule__PrefSpecifier__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_1_0()); }
	Comma
	{ after(grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefSpecifier__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefSpecifierAccess().getValueAssignment_1_1_1_1()); }
	(rule__PrefSpecifier__ValueAssignment_1_1_1_1)
	{ after(grammarAccess.getPrefSpecifierAccess().getValueAssignment_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
		ruleSoarProduction
		{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
		ruleSoarProduction
		{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__DocAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0()); }
		ruleDocumentation
		{ after(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__FlagAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0()); }
		ruleFlags
		{ after(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__ConditionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getConditionsConditionSideParserRuleCall_6_0()); }
		ruleConditionSide
		{ after(grammarAccess.getSoarProductionAccess().getConditionsConditionSideParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__ActionsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getActionsActionSideParserRuleCall_8_0()); }
		ruleActionSide
		{ after(grammarAccess.getSoarProductionAccess().getActionsActionSideParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__StateImpConditionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionSideAccess().getStateImpConditionStateImpConditionParserRuleCall_1_0()); }
		ruleStateImpCondition
		{ after(grammarAccess.getConditionSideAccess().getStateImpConditionStateImpConditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionSide__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionSideAccess().getCondCondParserRuleCall_2_0()); }
		ruleCond
		{ after(grammarAccess.getConditionSideAccess().getCondCondParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__IdTestAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getIdTestVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getStateImpConditionAccess().getIdTestVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__AttrValueTestAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
		ruleAttrValueTest
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cond__CondAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondAccess().getCondPositiveCondParserRuleCall_2_0()); }
		rulePositiveCond
		{ after(grammarAccess.getCondAccess().getCondPositiveCondParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__CondForOneIdAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveCondAccess().getCondForOneIdCondForOneIdParserRuleCall_0_1_0_0()); }
		ruleCondForOneId
		{ after(grammarAccess.getPositiveCondAccess().getCondForOneIdCondForOneIdParserRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PositiveCond__CondAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPositiveCondAccess().getCondCondParserRuleCall_1_1_0()); }
		ruleCond
		{ after(grammarAccess.getPositiveCondAccess().getCondCondParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__IdTestAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondForOneIdAccess().getIdTestVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getCondForOneIdAccess().getIdTestVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CondForOneId__AttrValueTestAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCondForOneIdAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
		ruleAttrValueTest
		{ after(grammarAccess.getCondForOneIdAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__AttrTestAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__AttrTestAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__ValueTestAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getValueTestValueTestParserRuleCall_5_0()); }
		ruleValueTest
		{ after(grammarAccess.getAttrValueTestAccess().getValueTestValueTestParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__TestAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueTestAccess().getTestTestParserRuleCall_0_1_0_0()); }
		ruleTest
		{ after(grammarAccess.getValueTestAccess().getTestTestParserRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueTest__CondForOneIdAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueTestAccess().getCondForOneIdCondForOneIdParserRuleCall_1_0_0()); }
		ruleCondForOneId
		{ after(grammarAccess.getValueTestAccess().getCondForOneIdCondForOneIdParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__DisjunctionTestAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_0_2_0()); }
		ruleDisjunctionTest
		{ after(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__RelationalTestAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_1_0_0()); }
		ruleRelationalTest
		{ after(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__DisjunctionTestAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_2_1_0()); }
		ruleDisjunctionTest
		{ after(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__RelationalTestAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_3_0()); }
		ruleRelationalTest
		{ after(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DisjunctionTest__ConstantAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDisjunctionTestAccess().getConstantConstantParserRuleCall_2_0()); }
		ruleConstant
		{ after(grammarAccess.getDisjunctionTestAccess().getConstantConstantParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__VariableAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleTestAccess().getVariableVariableParserRuleCall_1_0_0()); }
		ruleVariable
		{ after(grammarAccess.getSingleTestAccess().getVariableVariableParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SingleTest__ConstantAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSingleTestAccess().getConstantConstantParserRuleCall_1_1_0()); }
		ruleConstant
		{ after(grammarAccess.getSingleTestAccess().getConstantConstantParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__SingleTestAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_0_2_0()); }
		ruleSingleTest
		{ after(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalTest__SingleTestAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_1_1_0()); }
		ruleSingleTest
		{ after(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__ActionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideAccess().getActionActionParserRuleCall_1_0_0()); }
		ruleAction
		{ after(grammarAccess.getActionSideAccess().getActionActionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__FuncCallAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideAccess().getFuncCallFuncCallParserRuleCall_1_1_0()); }
		ruleFuncCall
		{ after(grammarAccess.getActionSideAccess().getFuncCallFuncCallParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSide__PrintAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideAccess().getPrintPrintParserRuleCall_1_2_0()); }
		rulePrint
		{ after(grammarAccess.getActionSideAccess().getPrintPrintParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__VariableAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getVariableVariableParserRuleCall_1_1_0()); }
		ruleVariable
		{ after(grammarAccess.getActionAccess().getVariableVariableParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__AttrValMakeAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getAttrValMakeAttrValueMakeParserRuleCall_1_2_0()); }
		ruleAttrValueMake
		{ after(grammarAccess.getActionAccess().getAttrValMakeAttrValueMakeParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Print__VariableAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrintAccess().getVariableVariableParserRuleCall_1_2_1_0()); }
		ruleVariable
		{ after(grammarAccess.getPrintAccess().getVariableVariableParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncCall__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFuncCallAccess().getValueValueParserRuleCall_3_0()); }
		ruleValue
		{ after(grammarAccess.getFuncCallAccess().getValueValueParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__VariableOrSymConstantAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0()); }
		ruleVariableorSymConstant
		{ after(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__VariableOrSymConstantAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0()); }
		ruleVariableorSymConstant
		{ after(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueMake__ValueMakeAssignment_1_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueMakeAccess().getValueMakeValueMakeParserRuleCall_1_3_0()); }
		ruleValueMake
		{ after(grammarAccess.getAttrValueMakeAccess().getValueMakeValueMakeParserRuleCall_1_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableorSymConstant__VariableAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableorSymConstantAccess().getVariableVariableParserRuleCall_1_0_0()); }
		ruleVariable
		{ after(grammarAccess.getVariableorSymConstantAccess().getVariableVariableParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueMakeAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getValueMakeAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueMake__PrefSpecifierAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueMakeAccess().getPrefSpecifierPrefSpecifierParserRuleCall_2_0()); }
		rulePrefSpecifier
		{ after(grammarAccess.getValueMakeAccess().getPrefSpecifierPrefSpecifierParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__UnaryPrefAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getUnaryPrefUnaryPrefParserRuleCall_0_1_0_0()); }
		ruleUnaryPref
		{ after(grammarAccess.getPrefSpecifierAccess().getUnaryPrefUnaryPrefParserRuleCall_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__UnaryOrBinaryPrefAssignment_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0()); }
		ruleUnaryOrBinaryPref
		{ after(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefSpecifier__ValueAssignment_1_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefSpecifierAccess().getValueValueParserRuleCall_1_1_1_1_0()); }
		ruleValue
		{ after(grammarAccess.getPrefSpecifierAccess().getValueValueParserRuleCall_1_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
