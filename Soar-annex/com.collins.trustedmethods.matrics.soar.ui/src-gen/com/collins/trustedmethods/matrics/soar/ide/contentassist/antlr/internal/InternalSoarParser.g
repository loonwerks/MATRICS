/*
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

parser grammar InternalSoarParser;

options {
	tokenVocab=InternalSoarLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package com.collins.trustedmethods.matrics.soar.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;

}
@members {
	private SoarGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("ExclamationMark", "'!'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("FullStop", "'.'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("CommercialAt", "'@'");
		tokenNameToValue.put("LeftSquareBracket", "'['");
		tokenNameToValue.put("RightSquareBracket", "']'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LeftCurlyBracket", "'{'");
		tokenNameToValue.put("RightCurlyBracket", "'}'");
		tokenNameToValue.put("Tilde", "'~'");
		tokenNameToValue.put("LessThanSignLessThanSign", "'<<'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("EqualsSignEqualsSign", "'=='");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("GreaterThanSignGreaterThanSign", "'>>'");
		tokenNameToValue.put("Gp", "'gp'");
		tokenNameToValue.put("Sp", "'sp'");
		tokenNameToValue.put("HyphenMinusHyphenMinusGreaterThanSign", "'-->'");
		tokenNameToValue.put("LessThanSignEqualsSignGreaterThanSign", "'<=>'");
		tokenNameToValue.put("Chunk", "'chunk'");
		tokenNameToValue.put("State", "'state'");
		tokenNameToValue.put("Write", "'write'");
		tokenNameToValue.put("Crlf", "'(crlf)'");
		tokenNameToValue.put("Default", "'default'");
		tokenNameToValue.put("Impasse", "'impasse'");
		tokenNameToValue.put("Template", "'template'");
		tokenNameToValue.put("ISupport", "'i-support'");
		tokenNameToValue.put("OSupport", "'o-support'");
	}

	public void setGrammarAccess(SoarGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary
:
{ before(grammarAccess.getAnnexLibraryRule()); }
	 ruleAnnexLibrary
{ after(grammarAccess.getAnnexLibraryRule()); } 
	 EOF 
;

// Rule AnnexLibrary
ruleAnnexLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall()); }
		ruleSoarAnnexLibrary
		{ after(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarAnnexLibrary
entryRuleSoarAnnexLibrary
:
{ before(grammarAccess.getSoarAnnexLibraryRule()); }
	 ruleSoarAnnexLibrary
{ after(grammarAccess.getSoarAnnexLibraryRule()); } 
	 EOF 
;

// Rule SoarAnnexLibrary
ruleSoarAnnexLibrary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarAnnexLibraryAccess().getGroup()); }
		(rule__SoarAnnexLibrary__Group__0)
		{ after(grammarAccess.getSoarAnnexLibraryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarAnnexSubclause
entryRuleSoarAnnexSubclause
:
{ before(grammarAccess.getSoarAnnexSubclauseRule()); }
	 ruleSoarAnnexSubclause
{ after(grammarAccess.getSoarAnnexSubclauseRule()); } 
	 EOF 
;

// Rule SoarAnnexSubclause
ruleSoarAnnexSubclause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarAnnexSubclauseAccess().getGroup()); }
		(rule__SoarAnnexSubclause__Group__0)
		{ after(grammarAccess.getSoarAnnexSubclauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSoarProduction
entryRuleSoarProduction
:
{ before(grammarAccess.getSoarProductionRule()); }
	 ruleSoarProduction
{ after(grammarAccess.getSoarProductionRule()); } 
	 EOF 
;

// Rule SoarProduction
ruleSoarProduction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSoarProductionAccess().getGroup()); }
		(rule__SoarProduction__Group__0)
		{ after(grammarAccess.getSoarProductionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDocumentation
entryRuleDocumentation
:
{ before(grammarAccess.getDocumentationRule()); }
	 ruleDocumentation
{ after(grammarAccess.getDocumentationRule()); } 
	 EOF 
;

// Rule Documentation
ruleDocumentation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDocumentationAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getDocumentationAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFlags
entryRuleFlags
:
{ before(grammarAccess.getFlagsRule()); }
	 ruleFlags
{ after(grammarAccess.getFlagsRule()); } 
	 EOF 
;

// Rule Flags
ruleFlags 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFlagsAccess().getGroup()); }
		(rule__Flags__Group__0)
		{ after(grammarAccess.getFlagsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStateImpCondition
entryRuleStateImpCondition
:
{ before(grammarAccess.getStateImpConditionRule()); }
	 ruleStateImpCondition
{ after(grammarAccess.getStateImpConditionRule()); } 
	 EOF 
;

// Rule StateImpCondition
ruleStateImpCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getGroup()); }
		(rule__StateImpCondition__Group__0)
		{ after(grammarAccess.getStateImpConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttrValueTest
entryRuleAttrValueTest
:
{ before(grammarAccess.getAttrValueTestRule()); }
	 ruleAttrValueTest
{ after(grammarAccess.getAttrValueTestRule()); } 
	 EOF 
;

// Rule AttrValueTest
ruleAttrValueTest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getGroup()); }
		(rule__AttrValueTest__Group__0)
		{ after(grammarAccess.getAttrValueTestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalOp
entryRuleRelationalOp
:
{ before(grammarAccess.getRelationalOpRule()); }
	 ruleRelationalOp
{ after(grammarAccess.getRelationalOpRule()); } 
	 EOF 
;

// Rule RelationalOp
ruleRelationalOp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalOpAccess().getAlternatives()); }
		(rule__RelationalOp__Alternatives)
		{ after(grammarAccess.getRelationalOpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionExpr
entryRuleConditionExpr
:
{ before(grammarAccess.getConditionExprRule()); }
	 ruleConditionExpr
{ after(grammarAccess.getConditionExprRule()); } 
	 EOF 
;

// Rule ConditionExpr
ruleConditionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionExprAccess().getPlusExprParserRuleCall()); }
		rulePlusExpr
		{ after(grammarAccess.getConditionExprAccess().getPlusExprParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePlusExpr
entryRulePlusExpr
:
{ before(grammarAccess.getPlusExprRule()); }
	 rulePlusExpr
{ after(grammarAccess.getPlusExprRule()); } 
	 EOF 
;

// Rule PlusExpr
rulePlusExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPlusExprAccess().getGroup()); }
		(rule__PlusExpr__Group__0)
		{ after(grammarAccess.getPlusExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr
:
{ before(grammarAccess.getRelationalExprRule()); }
	 ruleRelationalExpr
{ after(grammarAccess.getRelationalExprRule()); } 
	 EOF 
;

// Rule RelationalExpr
ruleRelationalExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationalExprAccess().getGroup()); }
		(rule__RelationalExpr__Group__0)
		{ after(grammarAccess.getRelationalExprAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrefixExpr
entryRulePrefixExpr
:
{ before(grammarAccess.getPrefixExprRule()); }
	 rulePrefixExpr
{ after(grammarAccess.getPrefixExprRule()); } 
	 EOF 
;

// Rule PrefixExpr
rulePrefixExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrefixExprAccess().getAlternatives()); }
		(rule__PrefixExpr__Alternatives)
		{ after(grammarAccess.getPrefixExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAtomicConditionExpr
entryRuleAtomicConditionExpr
:
{ before(grammarAccess.getAtomicConditionExprRule()); }
	 ruleAtomicConditionExpr
{ after(grammarAccess.getAtomicConditionExprRule()); } 
	 EOF 
;

// Rule AtomicConditionExpr
ruleAtomicConditionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getAlternatives()); }
		(rule__AtomicConditionExpr__Alternatives)
		{ after(grammarAccess.getAtomicConditionExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionSideExpr
entryRuleActionSideExpr
:
{ before(grammarAccess.getActionSideExprRule()); }
	 ruleActionSideExpr
{ after(grammarAccess.getActionSideExprRule()); } 
	 EOF 
;

// Rule ActionSideExpr
ruleActionSideExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionSideExprAccess().getAlternatives()); }
		(rule__ActionSideExpr__Alternatives)
		{ after(grammarAccess.getActionSideExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryPref
entryRuleUnaryPref
:
{ before(grammarAccess.getUnaryPrefRule()); }
	 ruleUnaryPref
{ after(grammarAccess.getUnaryPrefRule()); } 
	 EOF 
;

// Rule UnaryPref
ruleUnaryPref 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryPrefAccess().getAlternatives()); }
		(rule__UnaryPref__Alternatives)
		{ after(grammarAccess.getUnaryPrefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryOrBinaryPref
entryRuleUnaryOrBinaryPref
:
{ before(grammarAccess.getUnaryOrBinaryPrefRule()); }
	 ruleUnaryOrBinaryPref
{ after(grammarAccess.getUnaryOrBinaryPrefRule()); } 
	 EOF 
;

// Rule UnaryOrBinaryPref
ruleUnaryOrBinaryPref 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives()); }
		(rule__UnaryOrBinaryPref__Alternatives)
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActionExpr
entryRuleActionExpr
:
{ before(grammarAccess.getActionExprRule()); }
	 ruleActionExpr
{ after(grammarAccess.getActionExprRule()); } 
	 EOF 
;

// Rule ActionExpr
ruleActionExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActionExprAccess().getAlternatives()); }
		(rule__ActionExpr__Alternatives)
		{ after(grammarAccess.getActionExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymConstant
entryRuleSymConstant
:
{ before(grammarAccess.getSymConstantRule()); }
	 ruleSymConstant
{ after(grammarAccess.getSymConstantRule()); } 
	 EOF 
;

// Rule SymConstant
ruleSymConstant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymConstantAccess().getGroup()); }
		(rule__SymConstant__Group__0)
		{ after(grammarAccess.getSymConstantAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSTATE
entryRuleSTATE
:
{ before(grammarAccess.getSTATERule()); }
	 ruleSTATE
{ after(grammarAccess.getSTATERule()); } 
	 EOF 
;

// Rule STATE
ruleSTATE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSTATEAccess().getStateKeyword()); }
		State
		{ after(grammarAccess.getSTATEAccess().getStateKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIMPASSE
entryRuleIMPASSE
:
{ before(grammarAccess.getIMPASSERule()); }
	 ruleIMPASSE
{ after(grammarAccess.getIMPASSERule()); } 
	 EOF 
;

// Rule IMPASSE
ruleIMPASSE 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIMPASSEAccess().getImpasseKeyword()); }
		Impasse
		{ after(grammarAccess.getIMPASSEAccess().getImpasseKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()); }
		Sp
		{ after(grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()); }
		Gp
		{ after(grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFlagsAccess().getOSupportKeyword_1_0()); }
		OSupport
		{ after(grammarAccess.getFlagsAccess().getOSupportKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getISupportKeyword_1_1()); }
		ISupport
		{ after(grammarAccess.getFlagsAccess().getISupportKeyword_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getChunkKeyword_1_2()); }
		Chunk
		{ after(grammarAccess.getFlagsAccess().getChunkKeyword_1_2()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getDefaultKeyword_1_3()); }
		Default
		{ after(grammarAccess.getFlagsAccess().getDefaultKeyword_1_3()); }
	)
	|
	(
		{ before(grammarAccess.getFlagsAccess().getTemplateKeyword_1_4()); }
		Template
		{ after(grammarAccess.getFlagsAccess().getTemplateKeyword_1_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()); }
		ruleSTATE
		{ after(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()); }
		ruleIMPASSE
		{ after(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_0()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }
		LessThanSign
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); }
		GreaterThanSign
		{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_4()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getEqualsSignEqualsSignKeyword_5()); }
		EqualsSignEqualsSign
		{ after(grammarAccess.getRelationalOpAccess().getEqualsSignEqualsSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_6()); }
		LessThanSignEqualsSignGreaterThanSign
		{ after(grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_7()); }
		EqualsSign
		{ after(grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixExprAccess().getGroup_0()); }
		(rule__PrefixExpr__Group_0__0)
		{ after(grammarAccess.getPrefixExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrefixExprAccess().getAtomicConditionExprParserRuleCall_1()); }
		ruleAtomicConditionExpr
		{ after(grammarAccess.getPrefixExprAccess().getAtomicConditionExprParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getGroup_0()); }
		(rule__AtomicConditionExpr__Group_0__0)
		{ after(grammarAccess.getAtomicConditionExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getGroup_1()); }
		(rule__AtomicConditionExpr__Group_1__0)
		{ after(grammarAccess.getAtomicConditionExprAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getGroup_2()); }
		(rule__AtomicConditionExpr__Group_2__0)
		{ after(grammarAccess.getAtomicConditionExprAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getGroup_3()); }
		(rule__AtomicConditionExpr__Group_3__0)
		{ after(grammarAccess.getAtomicConditionExprAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getGroup_4()); }
		(rule__AtomicConditionExpr__Group_4__0)
		{ after(grammarAccess.getAtomicConditionExprAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideExprAccess().getGroup_0()); }
		(rule__ActionSideExpr__Group_0__0)
		{ after(grammarAccess.getActionSideExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionSideExprAccess().getGroup_1()); }
		(rule__ActionSideExpr__Group_1__0)
		{ after(grammarAccess.getActionSideExprAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryPref__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0()); }
		PlusSign
		{ after(grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1()); }
		HyphenMinus
		{ after(grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2()); }
		ExclamationMark
		{ after(grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getTildeKeyword_3()); }
		Tilde
		{ after(grammarAccess.getUnaryPrefAccess().getTildeKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4()); }
		CommercialAt
		{ after(grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOrBinaryPref__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0()); }
		GreaterThanSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1()); }
		EqualsSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2()); }
		LessThanSign
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3()); }
		Ampersand
		{ after(grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_0()); }
		(rule__ActionExpr__Group_0__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_1()); }
		(rule__ActionExpr__Group_1__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_2()); }
		(rule__ActionExpr__Group_2__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_3()); }
		(rule__ActionExpr__Group_3__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_4()); }
		(rule__ActionExpr__Group_4__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_5()); }
		(rule__ActionExpr__Group_5__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_5()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getGroup_6()); }
		(rule__ActionExpr__Group_6__0)
		{ after(grammarAccess.getActionExprAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Alternatives_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getUnaryPrefParserRuleCall_2_1_0()); }
		ruleUnaryPref
		{ after(grammarAccess.getActionExprAccess().getUnaryPrefParserRuleCall_2_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionExprAccess().getUnaryOrBinaryPrefParserRuleCall_2_1_1()); }
		ruleUnaryOrBinaryPref
		{ after(grammarAccess.getActionExprAccess().getUnaryOrBinaryPrefParserRuleCall_2_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSymConstantAccess().getSTATEParserRuleCall_1_1()); }
		ruleSTATE
		{ after(grammarAccess.getSymConstantAccess().getSTATEParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexLibrary__Group__0__Impl
	rule__SoarAnnexLibrary__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0()); }
	()
	{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexLibrary__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexLibrary__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1()); }
	(rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1)*
	{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarAnnexSubclause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexSubclause__Group__0__Impl
	rule__SoarAnnexSubclause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0()); }
	()
	{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarAnnexSubclause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1()); }
	(rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1)*
	{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarProduction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__0__Impl
	rule__SoarProduction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getSoarProductionAction_0()); }
	()
	{ after(grammarAccess.getSoarProductionAccess().getSoarProductionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__1__Impl
	rule__SoarProduction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getAlternatives_1()); }
	(rule__SoarProduction__Alternatives_1)
	{ after(grammarAccess.getSoarProductionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__2__Impl
	rule__SoarProduction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2()); }
	LeftCurlyBracket
	{ after(grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__3__Impl
	rule__SoarProduction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getNameAssignment_3()); }
	(rule__SoarProduction__NameAssignment_3)
	{ after(grammarAccess.getSoarProductionAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__4__Impl
	rule__SoarProduction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getDocAssignment_4()); }
	(rule__SoarProduction__DocAssignment_4)?
	{ after(grammarAccess.getSoarProductionAccess().getDocAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__5__Impl
	rule__SoarProduction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getFlagAssignment_5()); }
	(rule__SoarProduction__FlagAssignment_5)?
	{ after(grammarAccess.getSoarProductionAccess().getFlagAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__6__Impl
	rule__SoarProduction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6()); }
	(rule__SoarProduction__ConditionsAssignment_6)*
	{ after(grammarAccess.getSoarProductionAccess().getConditionsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__7__Impl
	rule__SoarProduction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7()); }
	HyphenMinusHyphenMinusGreaterThanSign
	{ after(grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__8__Impl
	rule__SoarProduction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
		(rule__SoarProduction__ActionsAssignment_8)
		{ after(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
	)
	(
		{ before(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
		(rule__SoarProduction__ActionsAssignment_8)*
		{ after(grammarAccess.getSoarProductionAccess().getActionsAssignment_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SoarProduction__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9()); }
	RightCurlyBracket
	{ after(grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Flags__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flags__Group__0__Impl
	rule__Flags__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlagsAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getFlagsAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Flags__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Flags__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFlagsAccess().getAlternatives_1()); }
	(rule__Flags__Alternatives_1)
	{ after(grammarAccess.getFlagsAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StateImpCondition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__0__Impl
	rule__StateImpCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0()); }
	()
	{ after(grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__1__Impl
	rule__StateImpCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__2__Impl
	rule__StateImpCondition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getAlternatives_2()); }
	(rule__StateImpCondition__Alternatives_2)?
	{ after(grammarAccess.getStateImpConditionAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__3__Impl
	rule__StateImpCondition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getIdAssignment_3()); }
	(rule__StateImpCondition__IdAssignment_3)
	{ after(grammarAccess.getStateImpConditionAccess().getIdAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__4__Impl
	rule__StateImpCondition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
		(rule__StateImpCondition__AttrValueTestAssignment_4)
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
	)
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
		(rule__StateImpCondition__AttrValueTestAssignment_4)*
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StateImpCondition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5()); }
	RightParenthesis
	{ after(grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueTest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__0__Impl
	rule__AttrValueTest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0()); }
	()
	{ after(grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__1__Impl
	rule__AttrValueTest__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_1()); }
	CircumflexAccent
	{ after(grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__2__Impl
	rule__AttrValueTest__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_2()); }
	(rule__AttrValueTest__AttrTestAssignment_2)
	{ after(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__3__Impl
	rule__AttrValueTest__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getGroup_3()); }
	(rule__AttrValueTest__Group_3__0)*
	{ after(grammarAccess.getAttrValueTestAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getTestAssignment_4()); }
	(rule__AttrValueTest__TestAssignment_4)
	{ after(grammarAccess.getAttrValueTestAccess().getTestAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttrValueTest__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group_3__0__Impl
	rule__AttrValueTest__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getFullStopKeyword_3_0()); }
	FullStop
	{ after(grammarAccess.getAttrValueTestAccess().getFullStopKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttrValueTest__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3_1()); }
	(rule__AttrValueTest__AttrTestAssignment_3_1)
	{ after(grammarAccess.getAttrValueTestAccess().getAttrTestAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group__0__Impl
	rule__PlusExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getRelationalExprParserRuleCall_0()); }
	ruleRelationalExpr
	{ after(grammarAccess.getPlusExprAccess().getRelationalExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getGroup_1()); }
	(rule__PlusExpr__Group_1__0)*
	{ after(grammarAccess.getPlusExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group_1__0__Impl
	rule__PlusExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getGroup_1_0()); }
	(rule__PlusExpr__Group_1_0__0)
	{ after(grammarAccess.getPlusExprAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getRightAssignment_1_1()); }
	(rule__PlusExpr__RightAssignment_1_1)
	{ after(grammarAccess.getPlusExprAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpr__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getGroup_1_0_0()); }
	(rule__PlusExpr__Group_1_0_0__0)
	{ after(grammarAccess.getPlusExprAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PlusExpr__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group_1_0_0__0__Impl
	rule__PlusExpr__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PlusExpr__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPlusExprAccess().getOpAssignment_1_0_0_1()); }
	(rule__PlusExpr__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getPlusExprAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group__0__Impl
	rule__RelationalExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getPrefixExprParserRuleCall_0()); }
	rulePrefixExpr
	{ after(grammarAccess.getRelationalExprAccess().getPrefixExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getGroup_1()); }
	(rule__RelationalExpr__Group_1__0)?
	{ after(grammarAccess.getRelationalExprAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1__0__Impl
	rule__RelationalExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getGroup_1_0()); }
	(rule__RelationalExpr__Group_1_0__0)
	{ after(grammarAccess.getRelationalExprAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getRightAssignment_1_1()); }
	(rule__RelationalExpr__RightAssignment_1_1)
	{ after(grammarAccess.getRelationalExprAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getGroup_1_0_0()); }
	(rule__RelationalExpr__Group_1_0_0__0)
	{ after(grammarAccess.getRelationalExprAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelationalExpr__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1_0_0__0__Impl
	rule__RelationalExpr__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelationalExpr__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationalExprAccess().getOpAssignment_1_0_0_1()); }
	(rule__RelationalExpr__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getRelationalExprAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrefixExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixExpr__Group_0__0__Impl
	rule__PrefixExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0()); }
	()
	{ after(grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixExpr__Group_0__1__Impl
	rule__PrefixExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixExprAccess().getOpAssignment_0_1()); }
	(rule__PrefixExpr__OpAssignment_0_1)
	{ after(grammarAccess.getPrefixExprAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrefixExpr__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrefixExprAccess().getExprAssignment_0_2()); }
	(rule__PrefixExpr__ExprAssignment_0_2)
	{ after(grammarAccess.getPrefixExprAccess().getExprAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicConditionExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_0__0__Impl
	rule__AtomicConditionExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getConjunctTestExprAction_0_0()); }
	()
	{ after(grammarAccess.getAtomicConditionExprAccess().getConjunctTestExprAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_0__1__Impl
	rule__AtomicConditionExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getLeftCurlyBracketKeyword_0_1()); }
	LeftCurlyBracket
	{ after(grammarAccess.getAtomicConditionExprAccess().getLeftCurlyBracketKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_0__2__Impl
	rule__AtomicConditionExpr__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_0_2()); }
	(rule__AtomicConditionExpr__TestsAssignment_0_2)*
	{ after(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getRightCurlyBracketKeyword_0_3()); }
	RightCurlyBracket
	{ after(grammarAccess.getAtomicConditionExprAccess().getRightCurlyBracketKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicConditionExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_1__0__Impl
	rule__AtomicConditionExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getMultiValTestExprAction_1_0()); }
	()
	{ after(grammarAccess.getAtomicConditionExprAccess().getMultiValTestExprAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_1__1__Impl
	rule__AtomicConditionExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getLeftSquareBracketKeyword_1_1()); }
	LeftSquareBracket
	{ after(grammarAccess.getAtomicConditionExprAccess().getLeftSquareBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_1__2__Impl
	rule__AtomicConditionExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_1_2()); }
		(rule__AtomicConditionExpr__TestsAssignment_1_2)
		{ after(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_1_2()); }
	)
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_1_2()); }
		(rule__AtomicConditionExpr__TestsAssignment_1_2)*
		{ after(grammarAccess.getAtomicConditionExprAccess().getTestsAssignment_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getRightSquareBracketKeyword_1_3()); }
	RightSquareBracket
	{ after(grammarAccess.getAtomicConditionExprAccess().getRightSquareBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicConditionExpr__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_2__0__Impl
	rule__AtomicConditionExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getDisjunctTestExprAction_2_0()); }
	()
	{ after(grammarAccess.getAtomicConditionExprAccess().getDisjunctTestExprAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_2__1__Impl
	rule__AtomicConditionExpr__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getLessThanSignLessThanSignKeyword_2_1()); }
	LessThanSignLessThanSign
	{ after(grammarAccess.getAtomicConditionExprAccess().getLessThanSignLessThanSignKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_2__2__Impl
	rule__AtomicConditionExpr__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getConstsAssignment_2_2()); }
		(rule__AtomicConditionExpr__ConstsAssignment_2_2)
		{ after(grammarAccess.getAtomicConditionExprAccess().getConstsAssignment_2_2()); }
	)
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getConstsAssignment_2_2()); }
		(rule__AtomicConditionExpr__ConstsAssignment_2_2)*
		{ after(grammarAccess.getAtomicConditionExprAccess().getConstsAssignment_2_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_2__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getGreaterThanSignGreaterThanSignKeyword_2_3()); }
	GreaterThanSignGreaterThanSign
	{ after(grammarAccess.getAtomicConditionExprAccess().getGreaterThanSignGreaterThanSignKeyword_2_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicConditionExpr__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_3__0__Impl
	rule__AtomicConditionExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getSymConstExprAction_3_0()); }
	()
	{ after(grammarAccess.getAtomicConditionExprAccess().getSymConstExprAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getValAssignment_3_1()); }
	(rule__AtomicConditionExpr__ValAssignment_3_1)
	{ after(grammarAccess.getAtomicConditionExprAccess().getValAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AtomicConditionExpr__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_4__0__Impl
	rule__AtomicConditionExpr__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getConstStringExprAction_4_0()); }
	()
	{ after(grammarAccess.getAtomicConditionExprAccess().getConstStringExprAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AtomicConditionExpr__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAtomicConditionExprAccess().getValAssignment_4_1()); }
	(rule__AtomicConditionExpr__ValAssignment_4_1)
	{ after(grammarAccess.getAtomicConditionExprAccess().getValAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionSideExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__0__Impl
	rule__ActionSideExpr__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_0_0()); }
	LeftParenthesis
	{ after(grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__1__Impl
	rule__ActionSideExpr__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getIdAssignment_0_1()); }
	(rule__ActionSideExpr__IdAssignment_0_1)
	{ after(grammarAccess.getActionSideExprAccess().getIdAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__2__Impl
	rule__ActionSideExpr__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getCircumflexAccentKeyword_0_2()); }
	CircumflexAccent
	{ after(grammarAccess.getActionSideExprAccess().getCircumflexAccentKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__3__Impl
	rule__ActionSideExpr__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getMakeIdAssignment_0_3()); }
	(rule__ActionSideExpr__MakeIdAssignment_0_3)
	{ after(grammarAccess.getActionSideExprAccess().getMakeIdAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__4__Impl
	rule__ActionSideExpr__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionSideExprAccess().getAttrValMakesAssignment_0_4()); }
		(rule__ActionSideExpr__AttrValMakesAssignment_0_4)
		{ after(grammarAccess.getActionSideExprAccess().getAttrValMakesAssignment_0_4()); }
	)
	(
		{ before(grammarAccess.getActionSideExprAccess().getAttrValMakesAssignment_0_4()); }
		(rule__ActionSideExpr__AttrValMakesAssignment_0_4)*
		{ after(grammarAccess.getActionSideExprAccess().getAttrValMakesAssignment_0_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_0_5()); }
	RightParenthesis
	{ after(grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionSideExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_1__0__Impl
	rule__ActionSideExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_1_0()); }
	LeftParenthesis
	{ after(grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_1__1__Impl
	rule__ActionSideExpr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getWriteKeyword_1_1()); }
	Write
	{ after(grammarAccess.getActionSideExprAccess().getWriteKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_1__2__Impl
	rule__ActionSideExpr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionSideExprAccess().getTextAssignment_1_2()); }
		(rule__ActionSideExpr__TextAssignment_1_2)
		{ after(grammarAccess.getActionSideExprAccess().getTextAssignment_1_2()); }
	)
	(
		{ before(grammarAccess.getActionSideExprAccess().getTextAssignment_1_2()); }
		(rule__ActionSideExpr__TextAssignment_1_2)*
		{ after(grammarAccess.getActionSideExprAccess().getTextAssignment_1_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionSideExpr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_1_3()); }
	RightParenthesis
	{ after(grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getGroup_0_0()); }
	(rule__ActionExpr__Group_0_0__0)
	{ after(grammarAccess.getActionExprAccess().getGroup_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_0_0__0__Impl
	rule__ActionExpr__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getSymConstExprAction_0_0_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getSymConstExprAction_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getValAssignment_0_0_1()); }
	(rule__ActionExpr__ValAssignment_0_0_1)
	{ after(grammarAccess.getActionExprAccess().getValAssignment_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_1__0__Impl
	rule__ActionExpr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getStringExprAction_1_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getStringExprAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getValAssignment_1_1()); }
	(rule__ActionExpr__ValAssignment_1_1)
	{ after(grammarAccess.getActionExprAccess().getValAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_2__0__Impl
	rule__ActionExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getPrefSpecifierExprAction_2_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getPrefSpecifierExprAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getAlternatives_2_1()); }
	(rule__ActionExpr__Alternatives_2_1)
	{ after(grammarAccess.getActionExprAccess().getAlternatives_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_3__0__Impl
	rule__ActionExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getCrlfExprAction_3_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getCrlfExprAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getCrlfKeyword_3_1()); }
	Crlf
	{ after(grammarAccess.getActionExprAccess().getCrlfKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_4__0__Impl
	rule__ActionExpr__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getStringExprAction_4_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getStringExprAction_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getExprAssignment_4_1()); }
	(rule__ActionExpr__ExprAssignment_4_1)
	{ after(grammarAccess.getActionExprAccess().getExprAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_5__0__Impl
	rule__ActionExpr__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getCommaExprAction_5_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getCommaExprAction_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getCommaKeyword_5_1()); }
	Comma
	{ after(grammarAccess.getActionExprAccess().getCommaKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ActionExpr__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_6__0__Impl
	rule__ActionExpr__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getParenExprAction_6_0()); }
	()
	{ after(grammarAccess.getActionExprAccess().getParenExprAction_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_6__1__Impl
	rule__ActionExpr__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getLeftParenthesisKeyword_6_1()); }
	LeftParenthesis
	{ after(grammarAccess.getActionExprAccess().getLeftParenthesisKeyword_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_6__2__Impl
	rule__ActionExpr__Group_6__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getActionExprAccess().getExprsAssignment_6_2()); }
		(rule__ActionExpr__ExprsAssignment_6_2)
		{ after(grammarAccess.getActionExprAccess().getExprsAssignment_6_2()); }
	)
	(
		{ before(grammarAccess.getActionExprAccess().getExprsAssignment_6_2()); }
		(rule__ActionExpr__ExprsAssignment_6_2)*
		{ after(grammarAccess.getActionExprAccess().getExprsAssignment_6_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ActionExpr__Group_6__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__Group_6__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getActionExprAccess().getRightParenthesisKeyword_6_3()); }
	RightParenthesis
	{ after(grammarAccess.getActionExprAccess().getRightParenthesisKeyword_6_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SymConstant__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymConstant__Group__0__Impl
	rule__SymConstant__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymConstantAccess().getLessThanSignKeyword_0()); }
	LessThanSign
	{ after(grammarAccess.getSymConstantAccess().getLessThanSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymConstant__Group__1__Impl
	rule__SymConstant__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymConstantAccess().getAlternatives_1()); }
	(rule__SymConstant__Alternatives_1)
	{ after(grammarAccess.getSymConstantAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SymConstant__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SymConstant__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymConstantAccess().getGreaterThanSignKeyword_2()); }
	GreaterThanSign
	{ after(grammarAccess.getSymConstantAccess().getGreaterThanSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SoarAnnexLibrary__SoarAnnexProductionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
		ruleSoarProduction
		{ after(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarAnnexSubclause__SoarAnnexProductionsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
		ruleSoarProduction
		{ after(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__DocAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0()); }
		ruleDocumentation
		{ after(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__FlagAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0()); }
		ruleFlags
		{ after(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__ConditionsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getConditionsStateImpConditionParserRuleCall_6_0()); }
		ruleStateImpCondition
		{ after(grammarAccess.getSoarProductionAccess().getConditionsStateImpConditionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SoarProduction__ActionsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSoarProductionAccess().getActionsActionSideExprParserRuleCall_8_0()); }
		ruleActionSideExpr
		{ after(grammarAccess.getSoarProductionAccess().getActionsActionSideExprParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__IdAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getIdSymConstantParserRuleCall_3_0()); }
		ruleSymConstant
		{ after(grammarAccess.getStateImpConditionAccess().getIdSymConstantParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StateImpCondition__AttrValueTestAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
		ruleAttrValueTest
		{ after(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__AttrTestAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__AttrTestAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttrValueTest__TestAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttrValueTestAccess().getTestConditionExprParserRuleCall_4_0()); }
		ruleConditionExpr
		{ after(grammarAccess.getAttrValueTestAccess().getTestConditionExprParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0()); }
			PlusSign
			{ after(grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusExpr__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPlusExprAccess().getRightRelationalExprParserRuleCall_1_1_0()); }
		ruleRelationalExpr
		{ after(grammarAccess.getPlusExprAccess().getRightRelationalExprParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); }
		ruleRelationalOp
		{ after(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalExpr__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalExprAccess().getRightPrefixExprParserRuleCall_1_1_0()); }
		rulePrefixExpr
		{ after(grammarAccess.getRelationalExprAccess().getRightPrefixExprParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0()); }
		(
			{ before(grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0()); }
			HyphenMinus
			{ after(grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0()); }
		)
		{ after(grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrefixExpr__ExprAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); }
		rulePrefixExpr
		{ after(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__TestsAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_0_2_0()); }
		ruleConditionExpr
		{ after(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__TestsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_1_2_0()); }
		ruleConditionExpr
		{ after(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__ConstsAssignment_2_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getConstsConditionExprParserRuleCall_2_2_0()); }
		ruleConditionExpr
		{ after(grammarAccess.getAtomicConditionExprAccess().getConstsConditionExprParserRuleCall_2_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__ValAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getValSymConstantParserRuleCall_3_1_0()); }
		ruleSymConstant
		{ after(grammarAccess.getAtomicConditionExprAccess().getValSymConstantParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AtomicConditionExpr__ValAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAtomicConditionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getAtomicConditionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__IdAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideExprAccess().getIdSymConstantParserRuleCall_0_1_0()); }
		ruleSymConstant
		{ after(grammarAccess.getActionSideExprAccess().getIdSymConstantParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__MakeIdAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideExprAccess().getMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getActionSideExprAccess().getMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__AttrValMakesAssignment_0_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideExprAccess().getAttrValMakesActionExprParserRuleCall_0_4_0()); }
		ruleActionExpr
		{ after(grammarAccess.getActionSideExprAccess().getAttrValMakesActionExprParserRuleCall_0_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionSideExpr__TextAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionSideExprAccess().getTextActionExprParserRuleCall_1_2_0()); }
		ruleActionExpr
		{ after(grammarAccess.getActionSideExprAccess().getTextActionExprParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__ValAssignment_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getValSymConstantParserRuleCall_0_0_1_0()); }
		ruleSymConstant
		{ after(grammarAccess.getActionExprAccess().getValSymConstantParserRuleCall_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__ValAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
		RULE_SYM_CONSTANT_STRING
		{ after(grammarAccess.getActionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__ExprAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getExprPIPE_STRINGTerminalRuleCall_4_1_0()); }
		RULE_PIPE_STRING
		{ after(grammarAccess.getActionExprAccess().getExprPIPE_STRINGTerminalRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ActionExpr__ExprsAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionExprAccess().getExprsActionExprParserRuleCall_6_2_0()); }
		ruleActionExpr
		{ after(grammarAccess.getActionExprAccess().getExprsActionExprParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
