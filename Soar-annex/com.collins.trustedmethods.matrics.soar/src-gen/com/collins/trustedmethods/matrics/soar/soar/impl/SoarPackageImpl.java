/**
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 * 
 * Generated by Xtext version 2.33.0.
 */
package com.collins.trustedmethods.matrics.soar.soar.impl;

import com.collins.trustedmethods.matrics.soar.soar.Action;
import com.collins.trustedmethods.matrics.soar.soar.ActionSide;
import com.collins.trustedmethods.matrics.soar.soar.AttrValueMake;
import com.collins.trustedmethods.matrics.soar.soar.AttrValueTest;
import com.collins.trustedmethods.matrics.soar.soar.Cond;
import com.collins.trustedmethods.matrics.soar.soar.CondForOneId;
import com.collins.trustedmethods.matrics.soar.soar.ConditionSide;
import com.collins.trustedmethods.matrics.soar.soar.ConjuctiveTest;
import com.collins.trustedmethods.matrics.soar.soar.Constant;
import com.collins.trustedmethods.matrics.soar.soar.DisjunctionTest;
import com.collins.trustedmethods.matrics.soar.soar.FuncCall;
import com.collins.trustedmethods.matrics.soar.soar.MultiValueTest;
import com.collins.trustedmethods.matrics.soar.soar.PositiveCond;
import com.collins.trustedmethods.matrics.soar.soar.PrefSpecifier;
import com.collins.trustedmethods.matrics.soar.soar.Print;
import com.collins.trustedmethods.matrics.soar.soar.RelationalTest;
import com.collins.trustedmethods.matrics.soar.soar.SimpleTest;
import com.collins.trustedmethods.matrics.soar.soar.SingleTest;
import com.collins.trustedmethods.matrics.soar.soar.SoarAnnexLibrary;
import com.collins.trustedmethods.matrics.soar.soar.SoarAnnexSubclause;
import com.collins.trustedmethods.matrics.soar.soar.SoarFactory;
import com.collins.trustedmethods.matrics.soar.soar.SoarPackage;
import com.collins.trustedmethods.matrics.soar.soar.SoarProduction;
import com.collins.trustedmethods.matrics.soar.soar.StateImpCond;
import com.collins.trustedmethods.matrics.soar.soar.StateImpCondition;
import com.collins.trustedmethods.matrics.soar.soar.Test;
import com.collins.trustedmethods.matrics.soar.soar.Value;
import com.collins.trustedmethods.matrics.soar.soar.ValueMake;
import com.collins.trustedmethods.matrics.soar.soar.ValueTest;
import com.collins.trustedmethods.matrics.soar.soar.Variable;
import com.collins.trustedmethods.matrics.soar.soar.VariableorSymConstant;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcorePackage;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import org.osate.aadl2.Aadl2Package;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SoarPackageImpl extends EPackageImpl implements SoarPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass soarAnnexLibraryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass soarAnnexSubclauseEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass soarProductionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conditionSideEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stateImpConditionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass positiveCondEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass condForOneIdEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attrValueTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass testEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass disjunctionTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass singleTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass relationalTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionSideEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass actionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass printEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass funcCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass attrValueMakeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass variableorSymConstantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass constantEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass valueMakeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass prefSpecifierEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass stateImpCondEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass conjuctiveTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleTestEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass multiValueTestEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see com.collins.trustedmethods.matrics.soar.soar.SoarPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SoarPackageImpl()
  {
    super(eNS_URI, SoarFactory.eINSTANCE);
  }
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SoarPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SoarPackage init()
  {
    if (isInited) return (SoarPackage)EPackage.Registry.INSTANCE.getEPackage(SoarPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSoarPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SoarPackageImpl theSoarPackage = registeredSoarPackage instanceof SoarPackageImpl ? (SoarPackageImpl)registeredSoarPackage : new SoarPackageImpl();

    isInited = true;

    // Initialize simple dependencies
    EcorePackage.eINSTANCE.eClass();
    Aadl2Package.eINSTANCE.eClass();

    // Create package meta-data objects
    theSoarPackage.createPackageContents();

    // Initialize created meta-data
    theSoarPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSoarPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SoarPackage.eNS_URI, theSoarPackage);
    return theSoarPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSoarAnnexLibrary()
  {
    return soarAnnexLibraryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoarAnnexLibrary_SoarAnnexProductions()
  {
    return (EReference)soarAnnexLibraryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSoarAnnexSubclause()
  {
    return soarAnnexSubclauseEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoarAnnexSubclause_SoarAnnexProductions()
  {
    return (EReference)soarAnnexSubclauseEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSoarProduction()
  {
    return soarProductionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoarProduction_Name()
  {
    return (EAttribute)soarProductionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoarProduction_Doc()
  {
    return (EAttribute)soarProductionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSoarProduction_Flag()
  {
    return (EAttribute)soarProductionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoarProduction_Conditions()
  {
    return (EReference)soarProductionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSoarProduction_Actions()
  {
    return (EReference)soarProductionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConditionSide()
  {
    return conditionSideEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionSide_StateImpCondition()
  {
    return (EReference)conditionSideEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConditionSide_Cond()
  {
    return (EReference)conditionSideEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStateImpCondition()
  {
    return stateImpConditionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCond()
  {
    return condEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCond_Cond()
  {
    return (EReference)condEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPositiveCond()
  {
    return positiveCondEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveCond_CondForOneId()
  {
    return (EReference)positiveCondEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPositiveCond_Cond()
  {
    return (EReference)positiveCondEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getCondForOneId()
  {
    return condForOneIdEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondForOneId_IdTest()
  {
    return (EReference)condForOneIdEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getCondForOneId_AttrValueTest()
  {
    return (EReference)condForOneIdEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAttrValueTest()
  {
    return attrValueTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAttrValueTest_AttrTest()
  {
    return (EAttribute)attrValueTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAttrValueTest_ValueTest()
  {
    return (EReference)attrValueTestEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValueTest()
  {
    return valueTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValueTest_Test()
  {
    return (EReference)valueTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValueTest_CondForOneId()
  {
    return (EReference)valueTestEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTest()
  {
    return testEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getTest_RelationalTest()
  {
    return (EReference)testEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getDisjunctionTest()
  {
    return disjunctionTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getDisjunctionTest_Constant()
  {
    return (EReference)disjunctionTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSingleTest()
  {
    return singleTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSingleTest_Variable()
  {
    return (EReference)singleTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSingleTest_Constant()
  {
    return (EReference)singleTestEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getRelationalTest()
  {
    return relationalTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getRelationalTest_SingleTest()
  {
    return (EReference)relationalTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariable()
  {
    return variableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getActionSide()
  {
    return actionSideEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getActionSide_Action()
  {
    return (EReference)actionSideEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getActionSide_FuncCall()
  {
    return (EReference)actionSideEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getActionSide_Print()
  {
    return (EReference)actionSideEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAction()
  {
    return actionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAction_Variable()
  {
    return (EReference)actionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAction_AttrValMake()
  {
    return (EReference)actionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPrint()
  {
    return printEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPrint_Variable()
  {
    return (EReference)printEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getFuncCall()
  {
    return funcCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getFuncCall_Value()
  {
    return (EReference)funcCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValue()
  {
    return valueEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAttrValueMake()
  {
    return attrValueMakeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAttrValueMake_VariableOrSymConstant()
  {
    return (EReference)attrValueMakeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getAttrValueMake_ValueMake()
  {
    return (EReference)attrValueMakeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getVariableorSymConstant()
  {
    return variableorSymConstantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getVariableorSymConstant_Variable()
  {
    return (EReference)variableorSymConstantEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConstant()
  {
    return constantEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getValueMake()
  {
    return valueMakeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValueMake_Value()
  {
    return (EReference)valueMakeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getValueMake_PrefSpecifier()
  {
    return (EReference)valueMakeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getPrefSpecifier()
  {
    return prefSpecifierEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPrefSpecifier_UnaryPref()
  {
    return (EAttribute)prefSpecifierEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getPrefSpecifier_UnaryOrBinaryPref()
  {
    return (EAttribute)prefSpecifierEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getPrefSpecifier_Value()
  {
    return (EReference)prefSpecifierEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getStateImpCond()
  {
    return stateImpCondEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStateImpCond_IdTest()
  {
    return (EReference)stateImpCondEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getStateImpCond_AttrValueTest()
  {
    return (EReference)stateImpCondEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getConjuctiveTest()
  {
    return conjuctiveTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getConjuctiveTest_DisjunctionTest()
  {
    return (EReference)conjuctiveTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleTest()
  {
    return simpleTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleTest_DisjunctionTest()
  {
    return (EReference)simpleTestEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getMultiValueTest()
  {
    return multiValueTestEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarFactory getSoarFactory()
  {
    return (SoarFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    soarAnnexLibraryEClass = createEClass(SOAR_ANNEX_LIBRARY);
    createEReference(soarAnnexLibraryEClass, SOAR_ANNEX_LIBRARY__SOAR_ANNEX_PRODUCTIONS);

    soarAnnexSubclauseEClass = createEClass(SOAR_ANNEX_SUBCLAUSE);
    createEReference(soarAnnexSubclauseEClass, SOAR_ANNEX_SUBCLAUSE__SOAR_ANNEX_PRODUCTIONS);

    soarProductionEClass = createEClass(SOAR_PRODUCTION);
    createEAttribute(soarProductionEClass, SOAR_PRODUCTION__NAME);
    createEAttribute(soarProductionEClass, SOAR_PRODUCTION__DOC);
    createEAttribute(soarProductionEClass, SOAR_PRODUCTION__FLAG);
    createEReference(soarProductionEClass, SOAR_PRODUCTION__CONDITIONS);
    createEReference(soarProductionEClass, SOAR_PRODUCTION__ACTIONS);

    conditionSideEClass = createEClass(CONDITION_SIDE);
    createEReference(conditionSideEClass, CONDITION_SIDE__STATE_IMP_CONDITION);
    createEReference(conditionSideEClass, CONDITION_SIDE__COND);

    stateImpConditionEClass = createEClass(STATE_IMP_CONDITION);

    condEClass = createEClass(COND);
    createEReference(condEClass, COND__COND);

    positiveCondEClass = createEClass(POSITIVE_COND);
    createEReference(positiveCondEClass, POSITIVE_COND__COND_FOR_ONE_ID);
    createEReference(positiveCondEClass, POSITIVE_COND__COND);

    condForOneIdEClass = createEClass(COND_FOR_ONE_ID);
    createEReference(condForOneIdEClass, COND_FOR_ONE_ID__ID_TEST);
    createEReference(condForOneIdEClass, COND_FOR_ONE_ID__ATTR_VALUE_TEST);

    attrValueTestEClass = createEClass(ATTR_VALUE_TEST);
    createEAttribute(attrValueTestEClass, ATTR_VALUE_TEST__ATTR_TEST);
    createEReference(attrValueTestEClass, ATTR_VALUE_TEST__VALUE_TEST);

    valueTestEClass = createEClass(VALUE_TEST);
    createEReference(valueTestEClass, VALUE_TEST__TEST);
    createEReference(valueTestEClass, VALUE_TEST__COND_FOR_ONE_ID);

    testEClass = createEClass(TEST);
    createEReference(testEClass, TEST__RELATIONAL_TEST);

    disjunctionTestEClass = createEClass(DISJUNCTION_TEST);
    createEReference(disjunctionTestEClass, DISJUNCTION_TEST__CONSTANT);

    singleTestEClass = createEClass(SINGLE_TEST);
    createEReference(singleTestEClass, SINGLE_TEST__VARIABLE);
    createEReference(singleTestEClass, SINGLE_TEST__CONSTANT);

    relationalTestEClass = createEClass(RELATIONAL_TEST);
    createEReference(relationalTestEClass, RELATIONAL_TEST__SINGLE_TEST);

    variableEClass = createEClass(VARIABLE);

    actionSideEClass = createEClass(ACTION_SIDE);
    createEReference(actionSideEClass, ACTION_SIDE__ACTION);
    createEReference(actionSideEClass, ACTION_SIDE__FUNC_CALL);
    createEReference(actionSideEClass, ACTION_SIDE__PRINT);

    actionEClass = createEClass(ACTION);
    createEReference(actionEClass, ACTION__VARIABLE);
    createEReference(actionEClass, ACTION__ATTR_VAL_MAKE);

    printEClass = createEClass(PRINT);
    createEReference(printEClass, PRINT__VARIABLE);

    funcCallEClass = createEClass(FUNC_CALL);
    createEReference(funcCallEClass, FUNC_CALL__VALUE);

    valueEClass = createEClass(VALUE);

    attrValueMakeEClass = createEClass(ATTR_VALUE_MAKE);
    createEReference(attrValueMakeEClass, ATTR_VALUE_MAKE__VARIABLE_OR_SYM_CONSTANT);
    createEReference(attrValueMakeEClass, ATTR_VALUE_MAKE__VALUE_MAKE);

    variableorSymConstantEClass = createEClass(VARIABLEOR_SYM_CONSTANT);
    createEReference(variableorSymConstantEClass, VARIABLEOR_SYM_CONSTANT__VARIABLE);

    constantEClass = createEClass(CONSTANT);

    valueMakeEClass = createEClass(VALUE_MAKE);
    createEReference(valueMakeEClass, VALUE_MAKE__VALUE);
    createEReference(valueMakeEClass, VALUE_MAKE__PREF_SPECIFIER);

    prefSpecifierEClass = createEClass(PREF_SPECIFIER);
    createEAttribute(prefSpecifierEClass, PREF_SPECIFIER__UNARY_PREF);
    createEAttribute(prefSpecifierEClass, PREF_SPECIFIER__UNARY_OR_BINARY_PREF);
    createEReference(prefSpecifierEClass, PREF_SPECIFIER__VALUE);

    stateImpCondEClass = createEClass(STATE_IMP_COND);
    createEReference(stateImpCondEClass, STATE_IMP_COND__ID_TEST);
    createEReference(stateImpCondEClass, STATE_IMP_COND__ATTR_VALUE_TEST);

    conjuctiveTestEClass = createEClass(CONJUCTIVE_TEST);
    createEReference(conjuctiveTestEClass, CONJUCTIVE_TEST__DISJUNCTION_TEST);

    simpleTestEClass = createEClass(SIMPLE_TEST);
    createEReference(simpleTestEClass, SIMPLE_TEST__DISJUNCTION_TEST);

    multiValueTestEClass = createEClass(MULTI_VALUE_TEST);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Obtain other dependent packages
    Aadl2Package theAadl2Package = (Aadl2Package)EPackage.Registry.INSTANCE.getEPackage(Aadl2Package.eNS_URI);
    EcorePackage theEcorePackage = (EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    soarAnnexLibraryEClass.getESuperTypes().add(theAadl2Package.getAnnexLibrary());
    soarAnnexSubclauseEClass.getESuperTypes().add(theAadl2Package.getAnnexSubclause());
    variableEClass.getESuperTypes().add(this.getValue());
    funcCallEClass.getESuperTypes().add(this.getValue());
    constantEClass.getESuperTypes().add(this.getValue());
    stateImpCondEClass.getESuperTypes().add(this.getStateImpCondition());
    conjuctiveTestEClass.getESuperTypes().add(this.getTest());
    simpleTestEClass.getESuperTypes().add(this.getTest());
    multiValueTestEClass.getESuperTypes().add(this.getTest());

    // Initialize classes and features; add operations and parameters
    initEClass(soarAnnexLibraryEClass, SoarAnnexLibrary.class, "SoarAnnexLibrary", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSoarAnnexLibrary_SoarAnnexProductions(), this.getSoarProduction(), null, "soarAnnexProductions", null, 0, -1, SoarAnnexLibrary.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(soarAnnexSubclauseEClass, SoarAnnexSubclause.class, "SoarAnnexSubclause", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSoarAnnexSubclause_SoarAnnexProductions(), this.getSoarProduction(), null, "soarAnnexProductions", null, 0, -1, SoarAnnexSubclause.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(soarProductionEClass, SoarProduction.class, "SoarProduction", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSoarProduction_Name(), theEcorePackage.getEString(), "name", null, 0, 1, SoarProduction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSoarProduction_Doc(), theEcorePackage.getEString(), "doc", null, 0, 1, SoarProduction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getSoarProduction_Flag(), theEcorePackage.getEString(), "flag", null, 0, 1, SoarProduction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSoarProduction_Conditions(), this.getConditionSide(), null, "conditions", null, 0, 1, SoarProduction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSoarProduction_Actions(), this.getActionSide(), null, "actions", null, 0, 1, SoarProduction.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conditionSideEClass, ConditionSide.class, "ConditionSide", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConditionSide_StateImpCondition(), this.getStateImpCondition(), null, "stateImpCondition", null, 0, 1, ConditionSide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getConditionSide_Cond(), this.getCond(), null, "cond", null, 0, -1, ConditionSide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stateImpConditionEClass, StateImpCondition.class, "StateImpCondition", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(condEClass, Cond.class, "Cond", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCond_Cond(), this.getPositiveCond(), null, "cond", null, 0, 1, Cond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(positiveCondEClass, PositiveCond.class, "PositiveCond", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPositiveCond_CondForOneId(), this.getCondForOneId(), null, "condForOneId", null, 0, 1, PositiveCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPositiveCond_Cond(), this.getCond(), null, "cond", null, 0, -1, PositiveCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(condForOneIdEClass, CondForOneId.class, "CondForOneId", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getCondForOneId_IdTest(), this.getVariable(), null, "idTest", null, 0, 1, CondForOneId.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getCondForOneId_AttrValueTest(), this.getAttrValueTest(), null, "attrValueTest", null, 0, -1, CondForOneId.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(attrValueTestEClass, AttrValueTest.class, "AttrValueTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAttrValueTest_AttrTest(), theEcorePackage.getEString(), "attrTest", null, 0, -1, AttrValueTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAttrValueTest_ValueTest(), this.getValueTest(), null, "valueTest", null, 0, -1, AttrValueTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueTestEClass, ValueTest.class, "ValueTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValueTest_Test(), this.getTest(), null, "test", null, 0, 1, ValueTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getValueTest_CondForOneId(), this.getCondForOneId(), null, "condForOneId", null, 0, 1, ValueTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(testEClass, Test.class, "Test", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getTest_RelationalTest(), this.getRelationalTest(), null, "relationalTest", null, 0, 1, Test.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(disjunctionTestEClass, DisjunctionTest.class, "DisjunctionTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getDisjunctionTest_Constant(), this.getConstant(), null, "constant", null, 0, -1, DisjunctionTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(singleTestEClass, SingleTest.class, "SingleTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSingleTest_Variable(), this.getVariable(), null, "variable", null, 0, 1, SingleTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSingleTest_Constant(), this.getConstant(), null, "constant", null, 0, 1, SingleTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(relationalTestEClass, RelationalTest.class, "RelationalTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getRelationalTest_SingleTest(), this.getSingleTest(), null, "singleTest", null, 0, 1, RelationalTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableEClass, Variable.class, "Variable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(actionSideEClass, ActionSide.class, "ActionSide", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getActionSide_Action(), this.getAction(), null, "action", null, 0, -1, ActionSide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getActionSide_FuncCall(), this.getFuncCall(), null, "funcCall", null, 0, -1, ActionSide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getActionSide_Print(), this.getPrint(), null, "print", null, 0, -1, ActionSide.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(actionEClass, Action.class, "Action", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAction_Variable(), this.getVariable(), null, "variable", null, 0, 1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAction_AttrValMake(), this.getAttrValueMake(), null, "attrValMake", null, 0, -1, Action.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(printEClass, Print.class, "Print", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPrint_Variable(), this.getVariable(), null, "variable", null, 0, -1, Print.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(funcCallEClass, FuncCall.class, "FuncCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFuncCall_Value(), this.getValue(), null, "value", null, 0, -1, FuncCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(valueEClass, Value.class, "Value", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(attrValueMakeEClass, AttrValueMake.class, "AttrValueMake", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAttrValueMake_VariableOrSymConstant(), this.getVariableorSymConstant(), null, "variableOrSymConstant", null, 0, -1, AttrValueMake.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAttrValueMake_ValueMake(), this.getValueMake(), null, "valueMake", null, 0, -1, AttrValueMake.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(variableorSymConstantEClass, VariableorSymConstant.class, "VariableorSymConstant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getVariableorSymConstant_Variable(), this.getVariable(), null, "variable", null, 0, 1, VariableorSymConstant.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(constantEClass, Constant.class, "Constant", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(valueMakeEClass, ValueMake.class, "ValueMake", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getValueMake_Value(), this.getValue(), null, "value", null, 0, 1, ValueMake.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getValueMake_PrefSpecifier(), this.getPrefSpecifier(), null, "prefSpecifier", null, 0, -1, ValueMake.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(prefSpecifierEClass, PrefSpecifier.class, "PrefSpecifier", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPrefSpecifier_UnaryPref(), theEcorePackage.getEString(), "unaryPref", null, 0, 1, PrefSpecifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getPrefSpecifier_UnaryOrBinaryPref(), theEcorePackage.getEString(), "unaryOrBinaryPref", null, 0, 1, PrefSpecifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPrefSpecifier_Value(), this.getValue(), null, "value", null, 0, 1, PrefSpecifier.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(stateImpCondEClass, StateImpCond.class, "StateImpCond", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStateImpCond_IdTest(), this.getVariable(), null, "idTest", null, 0, 1, StateImpCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStateImpCond_AttrValueTest(), this.getAttrValueTest(), null, "attrValueTest", null, 0, -1, StateImpCond.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(conjuctiveTestEClass, ConjuctiveTest.class, "ConjuctiveTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getConjuctiveTest_DisjunctionTest(), this.getDisjunctionTest(), null, "disjunctionTest", null, 0, 1, ConjuctiveTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(simpleTestEClass, SimpleTest.class, "SimpleTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSimpleTest_DisjunctionTest(), this.getDisjunctionTest(), null, "disjunctionTest", null, 0, 1, SimpleTest.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(multiValueTestEClass, MultiValueTest.class, "MultiValueTest", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    // Create resource
    createResource(eNS_URI);
  }

} //SoarPackageImpl
