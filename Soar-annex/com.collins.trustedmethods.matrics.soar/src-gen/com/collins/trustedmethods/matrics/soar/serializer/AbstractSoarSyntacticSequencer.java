/*
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

package com.collins.trustedmethods.matrics.soar.serializer;

import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractSoarSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SoarGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ActionExpr_UnaryOrBinaryPrefParserRuleCall_2_1_1_or_UnaryPrefParserRuleCall_2_1_0;
	protected AbstractElementAlias match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0;
	protected AbstractElementAlias match_StateImpCondition___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SoarGrammarAccess) access;
		match_ActionExpr_UnaryOrBinaryPrefParserRuleCall_2_1_1_or_UnaryPrefParserRuleCall_2_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getActionExprAccess().getUnaryOrBinaryPrefParserRuleCall_2_1_1()), new TokenAlias(false, false, grammarAccess.getActionExprAccess().getUnaryPrefParserRuleCall_2_1_0()));
		match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()));
		match_StateImpCondition___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIMPASSERule())
			return getIMPASSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTATERule())
			return getSTATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUnaryOrBinaryPrefRule())
			return getUnaryOrBinaryPrefToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getUnaryPrefRule())
			return getUnaryPrefToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * IMPASSE: 'impasse';
	 */
	protected String getIMPASSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "impasse";
	}
	
	/**
	 * STATE: 'state' ;
	 */
	protected String getSTATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state";
	}
	
	/**
	 * UnaryOrBinaryPref : '>' | '=' | '<' | '&' ;
	 */
	protected String getUnaryOrBinaryPrefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">";
	}
	
	/**
	 * UnaryPref : '+' | '-' | '!' | '~' | '@' ;
	 */
	protected String getUnaryPrefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "+";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ActionExpr_UnaryOrBinaryPrefParserRuleCall_2_1_1_or_UnaryPrefParserRuleCall_2_1_0.equals(syntax))
				emit_ActionExpr_UnaryOrBinaryPrefParserRuleCall_2_1_1_or_UnaryPrefParserRuleCall_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0.equals(syntax))
				emit_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateImpCondition___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q.equals(syntax))
				emit_StateImpCondition___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     UnaryPref | UnaryOrBinaryPref
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ActionExpr_UnaryOrBinaryPrefParserRuleCall_2_1_1_or_UnaryPrefParserRuleCall_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'sp' | 'gp'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' name=SYM_CONSTANT_STRING
	 */
	protected void emit_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (STATE | IMPASSE)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) id=SymConstant
	 */
	protected void emit_StateImpCondition___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
