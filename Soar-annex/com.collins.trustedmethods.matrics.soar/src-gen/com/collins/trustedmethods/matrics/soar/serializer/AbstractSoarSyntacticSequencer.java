/*
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.33.0.
 */

package com.collins.trustedmethods.matrics.soar.serializer;

import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public abstract class AbstractSoarSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SoarGrammarAccess grammarAccess;
	protected AbstractElementAlias match_AttrValueTest_HyphenMinusKeyword_1_q;
	protected AbstractElementAlias match_CondForOneId___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q;
	protected AbstractElementAlias match_Cond_HyphenMinusKeyword_1_q;
	protected AbstractElementAlias match_Constant_FLOATTerminalRuleCall_1_2_or_INTTerminalRuleCall_1_1_or_PRINT_STRINGTerminalRuleCall_1_3_or_STATEParserRuleCall_1_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_0_0;
	protected AbstractElementAlias match_FuncCall_AsteriskKeyword_2_3_or_HyphenMinusKeyword_2_2_or_PlusSignKeyword_2_1_or_STATEParserRuleCall_2_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_2_0_0_or_SolidusKeyword_2_4;
	protected AbstractElementAlias match_PrefSpecifier_CommaKeyword_0_1_1_q;
	protected AbstractElementAlias match_PrefSpecifier_CommaKeyword_1_1_2_q;
	protected AbstractElementAlias match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__a;
	protected AbstractElementAlias match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__p;
	protected AbstractElementAlias match_RelationalTest_EqualsSignEqualsSignKeyword_0_1_5_or_EqualsSignKeyword_0_1_7_or_GreaterThanSignEqualsSignKeyword_0_1_4_or_GreaterThanSignKeyword_0_1_2_or_LessThanSignEqualsSignGreaterThanSignKeyword_0_1_6_or_LessThanSignEqualsSignKeyword_0_1_3_or_LessThanSignGreaterThanSignKeyword_0_1_0_or_LessThanSignKeyword_0_1_1;
	protected AbstractElementAlias match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0;
	protected AbstractElementAlias match_StateImpCondition_IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0;
	protected AbstractElementAlias match_Test_INTTerminalRuleCall_4_2_p;
	protected AbstractElementAlias match_ValueTest_PlusSignKeyword_0_1_1_q;
	protected AbstractElementAlias match_ValueTest_PlusSignKeyword_1_1_q;
	protected AbstractElementAlias match_Variable_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0;
	protected AbstractElementAlias match_VariableorSymConstant_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SoarGrammarAccess) access;
		match_AttrValueTest_HyphenMinusKeyword_1_q = new TokenAlias(false, true, grammarAccess.getAttrValueTestAccess().getHyphenMinusKeyword_1());
		match_CondForOneId___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getCondForOneIdAccess().getIMPASSEParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getCondForOneIdAccess().getSTATEParserRuleCall_2_0()));
		match_Cond_HyphenMinusKeyword_1_q = new TokenAlias(false, true, grammarAccess.getCondAccess().getHyphenMinusKeyword_1());
		match_Constant_FLOATTerminalRuleCall_1_2_or_INTTerminalRuleCall_1_1_or_PRINT_STRINGTerminalRuleCall_1_3_or_STATEParserRuleCall_1_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getConstantAccess().getFLOATTerminalRuleCall_1_2()), new TokenAlias(false, false, grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getConstantAccess().getPRINT_STRINGTerminalRuleCall_1_3()), new TokenAlias(false, false, grammarAccess.getConstantAccess().getSTATEParserRuleCall_1_0_1()), new TokenAlias(false, false, grammarAccess.getConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0()));
		match_FuncCall_AsteriskKeyword_2_3_or_HyphenMinusKeyword_2_2_or_PlusSignKeyword_2_1_or_STATEParserRuleCall_2_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_2_0_0_or_SolidusKeyword_2_4 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getAsteriskKeyword_2_3()), new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getHyphenMinusKeyword_2_2()), new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getPlusSignKeyword_2_1()), new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getSTATEParserRuleCall_2_0_1()), new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0()), new TokenAlias(false, false, grammarAccess.getFuncCallAccess().getSolidusKeyword_2_4()));
		match_PrefSpecifier_CommaKeyword_0_1_1_q = new TokenAlias(false, true, grammarAccess.getPrefSpecifierAccess().getCommaKeyword_0_1_1());
		match_PrefSpecifier_CommaKeyword_1_1_2_q = new TokenAlias(false, true, grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_2());
		match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__a = new AlternativeAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrintAccess().getCrlfKeyword_1_2_2()), new TokenAlias(false, false, grammarAccess.getPrintAccess().getPRINT_STRINGTerminalRuleCall_1_2_0()));
		match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__p = new AlternativeAlias(true, false, new TokenAlias(false, false, grammarAccess.getPrintAccess().getCrlfKeyword_1_2_2()), new TokenAlias(false, false, grammarAccess.getPrintAccess().getPRINT_STRINGTerminalRuleCall_1_2_0()));
		match_RelationalTest_EqualsSignEqualsSignKeyword_0_1_5_or_EqualsSignKeyword_0_1_7_or_GreaterThanSignEqualsSignKeyword_0_1_4_or_GreaterThanSignKeyword_0_1_2_or_LessThanSignEqualsSignGreaterThanSignKeyword_0_1_6_or_LessThanSignEqualsSignKeyword_0_1_3_or_LessThanSignGreaterThanSignKeyword_0_1_0_or_LessThanSignKeyword_0_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getEqualsSignEqualsSignKeyword_0_1_5()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getEqualsSignKeyword_0_1_7()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getGreaterThanSignEqualsSignKeyword_0_1_4()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getGreaterThanSignKeyword_0_1_2()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignKeyword_0_1_3()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getLessThanSignGreaterThanSignKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getRelationalTestAccess().getLessThanSignKeyword_0_1_1()));
		match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSoarProductionAccess().getGpKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getSoarProductionAccess().getSpKeyword_1_0()));
		match_StateImpCondition_IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1()), new TokenAlias(false, false, grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0()));
		match_Test_INTTerminalRuleCall_4_2_p = new TokenAlias(true, false, grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2());
		match_ValueTest_PlusSignKeyword_0_1_1_q = new TokenAlias(false, true, grammarAccess.getValueTestAccess().getPlusSignKeyword_0_1_1());
		match_ValueTest_PlusSignKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getValueTestAccess().getPlusSignKeyword_1_1());
		match_Variable_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVariableAccess().getSTATEParserRuleCall_1_1_1()), new TokenAlias(false, false, grammarAccess.getVariableAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()));
		match_VariableorSymConstant_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getVariableorSymConstantAccess().getSTATEParserRuleCall_1_1_1()), new TokenAlias(false, false, grammarAccess.getVariableorSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFLOATRule())
			return getFLOATToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIMPASSERule())
			return getIMPASSEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPRINT_STRINGRule())
			return getPRINT_STRINGToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTATERule())
			return getSTATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSYM_CONSTANT_STRINGRule())
			return getSYM_CONSTANT_STRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal FLOAT returns ecore::EFloat:
	 *     ('0'..'9')+ '.' ('0'..'9')+;
	 */
	protected String getFLOATToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ".";
	}
	
	/**
	 * IMPASSE: 'impasse';
	 */
	protected String getIMPASSEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "impasse";
	}
	
	/**
	 * terminal INT returns ecore::EInt:
	 *     ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal PRINT_STRING:
	 *     '|' ( '\\|' | !'|' )* '|';
	 */
	protected String getPRINT_STRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "||";
	}
	
	/**
	 * STATE: 'state' ;
	 */
	protected String getSTATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "state";
	}
	
	/**
	 * terminal SYM_CONSTANT_STRING : ('a'..'z' | 'A'..'Z') (('_')? ('*')? ('-')? ('a'..'z' | 'A'..'Z' | '0'..'9'))* ;
	 */
	protected String getSYM_CONSTANT_STRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_AttrValueTest_HyphenMinusKeyword_1_q.equals(syntax))
				emit_AttrValueTest_HyphenMinusKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_CondForOneId___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q.equals(syntax))
				emit_CondForOneId___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Cond_HyphenMinusKeyword_1_q.equals(syntax))
				emit_Cond_HyphenMinusKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Constant_FLOATTerminalRuleCall_1_2_or_INTTerminalRuleCall_1_1_or_PRINT_STRINGTerminalRuleCall_1_3_or_STATEParserRuleCall_1_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_0_0.equals(syntax))
				emit_Constant_FLOATTerminalRuleCall_1_2_or_INTTerminalRuleCall_1_1_or_PRINT_STRINGTerminalRuleCall_1_3_or_STATEParserRuleCall_1_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FuncCall_AsteriskKeyword_2_3_or_HyphenMinusKeyword_2_2_or_PlusSignKeyword_2_1_or_STATEParserRuleCall_2_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_2_0_0_or_SolidusKeyword_2_4.equals(syntax))
				emit_FuncCall_AsteriskKeyword_2_3_or_HyphenMinusKeyword_2_2_or_PlusSignKeyword_2_1_or_STATEParserRuleCall_2_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_2_0_0_or_SolidusKeyword_2_4(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefSpecifier_CommaKeyword_0_1_1_q.equals(syntax))
				emit_PrefSpecifier_CommaKeyword_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrefSpecifier_CommaKeyword_1_1_2_q.equals(syntax))
				emit_PrefSpecifier_CommaKeyword_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__a.equals(syntax))
				emit_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__p.equals(syntax))
				emit_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RelationalTest_EqualsSignEqualsSignKeyword_0_1_5_or_EqualsSignKeyword_0_1_7_or_GreaterThanSignEqualsSignKeyword_0_1_4_or_GreaterThanSignKeyword_0_1_2_or_LessThanSignEqualsSignGreaterThanSignKeyword_0_1_6_or_LessThanSignEqualsSignKeyword_0_1_3_or_LessThanSignGreaterThanSignKeyword_0_1_0_or_LessThanSignKeyword_0_1_1.equals(syntax))
				emit_RelationalTest_EqualsSignEqualsSignKeyword_0_1_5_or_EqualsSignKeyword_0_1_7_or_GreaterThanSignEqualsSignKeyword_0_1_4_or_GreaterThanSignKeyword_0_1_2_or_LessThanSignEqualsSignGreaterThanSignKeyword_0_1_6_or_LessThanSignEqualsSignKeyword_0_1_3_or_LessThanSignGreaterThanSignKeyword_0_1_0_or_LessThanSignKeyword_0_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0.equals(syntax))
				emit_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StateImpCondition_IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0.equals(syntax))
				emit_StateImpCondition_IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Test_INTTerminalRuleCall_4_2_p.equals(syntax))
				emit_Test_INTTerminalRuleCall_4_2_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueTest_PlusSignKeyword_0_1_1_q.equals(syntax))
				emit_ValueTest_PlusSignKeyword_0_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueTest_PlusSignKeyword_1_1_q.equals(syntax))
				emit_ValueTest_PlusSignKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variable_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0.equals(syntax))
				emit_Variable_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VariableorSymConstant_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0.equals(syntax))
				emit_VariableorSymConstant_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '^' attrTest+=SYM_CONSTANT_STRING
	 
	 * </pre>
	 */
	protected void emit_AttrValueTest_HyphenMinusKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (STATE | IMPASSE)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) idTest=Variable
	 
	 * </pre>
	 */
	protected void emit_CondForOneId___IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '-'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) cond=PositiveCond
	 
	 * </pre>
	 */
	protected void emit_Cond_HyphenMinusKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     SYM_CONSTANT_STRING | STATE | INT | FLOAT | PRINT_STRING
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_Constant_FLOATTerminalRuleCall_1_2_or_INTTerminalRuleCall_1_1_or_PRINT_STRINGTerminalRuleCall_1_3_or_STATEParserRuleCall_1_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         SYM_CONSTANT_STRING | 
	  *         STATE | 
	  *         '+' | 
	  *         '-' | 
	  *         '*' | 
	  *         '/'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) ')' (rule start)
	 *     (rule start) '(' (ambiguity) value+=Value
	 
	 * </pre>
	 */
	protected void emit_FuncCall_AsteriskKeyword_2_3_or_HyphenMinusKeyword_2_2_or_PlusSignKeyword_2_1_or_STATEParserRuleCall_2_0_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_2_0_0_or_SolidusKeyword_2_4(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     unaryPref=UnaryPref (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PrefSpecifier_CommaKeyword_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     unaryOrBinaryPref=UnaryOrBinaryPref (ambiguity) (rule end)
	 *     value=Value (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_PrefSpecifier_CommaKeyword_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (PRINT_STRING | '(crlf)')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'write' (ambiguity) variable+=Variable
	 *     variable+=Variable (ambiguity) ')' (rule end)
	 *     variable+=Variable (ambiguity) variable+=Variable
	 
	 * </pre>
	 */
	protected void emit_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (PRINT_STRING | '(crlf)')+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' 'write' (ambiguity) ')' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Print___CrlfKeyword_1_2_2_or_PRINT_STRINGTerminalRuleCall_1_2_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     (
	  *         '&lt;&gt;' | 
	  *         '&lt;' | 
	  *         '&gt;' | 
	  *         '&lt;=' | 
	  *         '&gt;=' | 
	  *         '==' | 
	  *         '&lt;=&gt;' | 
	  *         '='
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) singleTest=SingleTest
	 
	 * </pre>
	 */
	protected void emit_RelationalTest_EqualsSignEqualsSignKeyword_0_1_5_or_EqualsSignKeyword_0_1_7_or_GreaterThanSignEqualsSignKeyword_0_1_4_or_GreaterThanSignKeyword_0_1_2_or_LessThanSignEqualsSignGreaterThanSignKeyword_0_1_6_or_LessThanSignEqualsSignKeyword_0_1_3_or_LessThanSignGreaterThanSignKeyword_0_1_0_or_LessThanSignKeyword_0_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'sp' | 'gp'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '{' name=SYM_CONSTANT_STRING
	 
	 * </pre>
	 */
	protected void emit_SoarProduction_GpKeyword_1_1_or_SpKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     STATE | IMPASSE
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) attrValueTest+=AttrValueTest
	 *     (rule start) '(' (ambiguity) idTest=Variable
	 
	 * </pre>
	 */
	protected void emit_StateImpCondition_IMPASSEParserRuleCall_2_1_or_STATEParserRuleCall_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     INT+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' (ambiguity) ']' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Test_INTTerminalRuleCall_4_2_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     test=Test (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ValueTest_PlusSignKeyword_0_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     '+'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condForOneId=CondForOneId (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_ValueTest_PlusSignKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     SYM_CONSTANT_STRING | STATE
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '&lt;' (ambiguity) '&gt;' (rule start)
	 
	 * </pre>
	 */
	protected void emit_Variable_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     SYM_CONSTANT_STRING | STATE
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 
	 * </pre>
	 */
	protected void emit_VariableorSymConstant_STATEParserRuleCall_1_1_1_or_SYM_CONSTANT_STRINGTerminalRuleCall_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
