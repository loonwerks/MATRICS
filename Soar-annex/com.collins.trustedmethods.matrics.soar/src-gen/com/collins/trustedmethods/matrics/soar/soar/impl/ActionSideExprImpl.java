/**
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 * 
 * Generated by Xtext version 2.25.0.
 */
package com.collins.trustedmethods.matrics.soar.soar.impl;

import com.collins.trustedmethods.matrics.soar.soar.ActionSideExpr;
import com.collins.trustedmethods.matrics.soar.soar.Expr;
import com.collins.trustedmethods.matrics.soar.soar.SoarPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action Side Expr</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideExprImpl#getId <em>Id</em>}</li>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideExprImpl#getMakeId <em>Make Id</em>}</li>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideExprImpl#getAttrValMakes <em>Attr Val Makes</em>}</li>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideExprImpl#getText <em>Text</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionSideExprImpl extends MinimalEObjectImpl.Container implements ActionSideExpr
{
  /**
   * The default value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected static final String ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getId() <em>Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getId()
   * @generated
   * @ordered
   */
  protected String id = ID_EDEFAULT;

  /**
   * The default value of the '{@link #getMakeId() <em>Make Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMakeId()
   * @generated
   * @ordered
   */
  protected static final String MAKE_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMakeId() <em>Make Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMakeId()
   * @generated
   * @ordered
   */
  protected String makeId = MAKE_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttrValMakes() <em>Attr Val Makes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttrValMakes()
   * @generated
   * @ordered
   */
  protected EList<Expr> attrValMakes;

  /**
   * The cached value of the '{@link #getText() <em>Text</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getText()
   * @generated
   * @ordered
   */
  protected EList<Expr> text;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionSideExprImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoarPackage.Literals.ACTION_SIDE_EXPR;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getId()
  {
    return id;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setId(String newId)
  {
    String oldId = id;
    id = newId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SoarPackage.ACTION_SIDE_EXPR__ID, oldId, id));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getMakeId()
  {
    return makeId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMakeId(String newMakeId)
  {
    String oldMakeId = makeId;
    makeId = newMakeId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SoarPackage.ACTION_SIDE_EXPR__MAKE_ID, oldMakeId, makeId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expr> getAttrValMakes()
  {
    if (attrValMakes == null)
    {
      attrValMakes = new EObjectContainmentEList<Expr>(Expr.class, this, SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES);
    }
    return attrValMakes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Expr> getText()
  {
    if (text == null)
    {
      text = new EObjectContainmentEList<Expr>(Expr.class, this, SoarPackage.ACTION_SIDE_EXPR__TEXT);
    }
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES:
        return ((InternalEList<?>)getAttrValMakes()).basicRemove(otherEnd, msgs);
      case SoarPackage.ACTION_SIDE_EXPR__TEXT:
        return ((InternalEList<?>)getText()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE_EXPR__ID:
        return getId();
      case SoarPackage.ACTION_SIDE_EXPR__MAKE_ID:
        return getMakeId();
      case SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES:
        return getAttrValMakes();
      case SoarPackage.ACTION_SIDE_EXPR__TEXT:
        return getText();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE_EXPR__ID:
        setId((String)newValue);
        return;
      case SoarPackage.ACTION_SIDE_EXPR__MAKE_ID:
        setMakeId((String)newValue);
        return;
      case SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES:
        getAttrValMakes().clear();
        getAttrValMakes().addAll((Collection<? extends Expr>)newValue);
        return;
      case SoarPackage.ACTION_SIDE_EXPR__TEXT:
        getText().clear();
        getText().addAll((Collection<? extends Expr>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE_EXPR__ID:
        setId(ID_EDEFAULT);
        return;
      case SoarPackage.ACTION_SIDE_EXPR__MAKE_ID:
        setMakeId(MAKE_ID_EDEFAULT);
        return;
      case SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES:
        getAttrValMakes().clear();
        return;
      case SoarPackage.ACTION_SIDE_EXPR__TEXT:
        getText().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE_EXPR__ID:
        return ID_EDEFAULT == null ? id != null : !ID_EDEFAULT.equals(id);
      case SoarPackage.ACTION_SIDE_EXPR__MAKE_ID:
        return MAKE_ID_EDEFAULT == null ? makeId != null : !MAKE_ID_EDEFAULT.equals(makeId);
      case SoarPackage.ACTION_SIDE_EXPR__ATTR_VAL_MAKES:
        return attrValMakes != null && !attrValMakes.isEmpty();
      case SoarPackage.ACTION_SIDE_EXPR__TEXT:
        return text != null && !text.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (id: ");
    result.append(id);
    result.append(", makeId: ");
    result.append(makeId);
    result.append(')');
    return result.toString();
  }

} //ActionSideExprImpl
