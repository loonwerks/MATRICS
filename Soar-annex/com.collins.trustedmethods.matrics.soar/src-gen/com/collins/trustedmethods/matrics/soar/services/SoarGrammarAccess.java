/*
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

package com.collins.trustedmethods.matrics.soar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SoarGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AnnexLibrary");
		private final RuleCall cSoarAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//    SoarAnnexLibrary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SoarAnnexLibrary
		public RuleCall getSoarAnnexLibraryParserRuleCall() { return cSoarAnnexLibraryParserRuleCall; }
	}
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AnnexSubclause");
		private final RuleCall cSoarAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//    SoarAnnexSubclause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SoarAnnexSubclause
		public RuleCall getSoarAnnexSubclauseParserRuleCall() { return cSoarAnnexSubclauseParserRuleCall; }
	}
	public class SoarAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSoarAnnexProductionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoarAnnexProductionsSoarProductionParserRuleCall_1_0 = (RuleCall)cSoarAnnexProductionsAssignment_1.eContents().get(0);
		
		//SoarAnnexLibrary:
		//    {SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
		public Group getGroup() { return cGroup; }
		
		//{SoarAnnexLibrary}
		public Action getSoarAnnexLibraryAction_0() { return cSoarAnnexLibraryAction_0; }
		
		//soarAnnexProductions+=SoarProduction*
		public Assignment getSoarAnnexProductionsAssignment_1() { return cSoarAnnexProductionsAssignment_1; }
		
		//SoarProduction
		public RuleCall getSoarAnnexProductionsSoarProductionParserRuleCall_1_0() { return cSoarAnnexProductionsSoarProductionParserRuleCall_1_0; }
	}
	public class SoarAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSoarAnnexProductionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoarAnnexProductionsSoarProductionParserRuleCall_1_0 = (RuleCall)cSoarAnnexProductionsAssignment_1.eContents().get(0);
		
		//SoarAnnexSubclause:
		//    {SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
		public Group getGroup() { return cGroup; }
		
		//{SoarAnnexSubclause}
		public Action getSoarAnnexSubclauseAction_0() { return cSoarAnnexSubclauseAction_0; }
		
		//soarAnnexProductions+=SoarProduction*
		public Assignment getSoarAnnexProductionsAssignment_1() { return cSoarAnnexProductionsAssignment_1; }
		
		//SoarProduction
		public RuleCall getSoarAnnexProductionsSoarProductionParserRuleCall_1_0() { return cSoarAnnexProductionsSoarProductionParserRuleCall_1_0; }
	}
	public class SoarProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarProductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSpKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGpKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDocAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocDocumentationParserRuleCall_4_0 = (RuleCall)cDocAssignment_4.eContents().get(0);
		private final Assignment cFlagAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlagFlagsParserRuleCall_5_0 = (RuleCall)cFlagAssignment_5.eContents().get(0);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsStateImpConditionParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionsActionSideExprParserRuleCall_8_0 = (RuleCall)cActionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////soar: soar_production+ ;
		//// Grammar of Soar productions
		//SoarProduction returns SoarProduction :
		//    {SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions+=StateImpCondition* '-->' actions+=ActionSideExpr+ '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions+=StateImpCondition* '-->' actions+=ActionSideExpr+ '}'
		public Group getGroup() { return cGroup; }
		
		//{SoarProduction}
		public Action getSoarProductionAction_0() { return cSoarProductionAction_0; }
		
		//('sp'|'gp')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'sp'
		public Keyword getSpKeyword_1_0() { return cSpKeyword_1_0; }
		
		//'gp'
		public Keyword getGpKeyword_1_1() { return cGpKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//name=SYM_CONSTANT_STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0() { return cNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0; }
		
		//doc=Documentation?
		public Assignment getDocAssignment_4() { return cDocAssignment_4; }
		
		//Documentation
		public RuleCall getDocDocumentationParserRuleCall_4_0() { return cDocDocumentationParserRuleCall_4_0; }
		
		//flag=Flags?
		public Assignment getFlagAssignment_5() { return cFlagAssignment_5; }
		
		//Flags
		public RuleCall getFlagFlagsParserRuleCall_5_0() { return cFlagFlagsParserRuleCall_5_0; }
		
		//conditions+=StateImpCondition*
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }
		
		//StateImpCondition
		public RuleCall getConditionsStateImpConditionParserRuleCall_6_0() { return cConditionsStateImpConditionParserRuleCall_6_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_7; }
		
		//actions+=ActionSideExpr+
		public Assignment getActionsAssignment_8() { return cActionsAssignment_8; }
		
		//ActionSideExpr
		public RuleCall getActionsActionSideExprParserRuleCall_8_0() { return cActionsActionSideExprParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Documentation");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////Documentation : '"""' ~["]* '"""' ;
		//Documentation : STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class FlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Flags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cOSupportKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cISupportKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cChunkKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDefaultKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cTemplateKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		
		//Flags : ':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' ) ;
		@Override public ParserRule getRule() { return rule; }
		
		//':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' )
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//('o-support' | 'i-support' | 'chunk' | 'default' | 'template' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'o-support'
		public Keyword getOSupportKeyword_1_0() { return cOSupportKeyword_1_0; }
		
		//'i-support'
		public Keyword getISupportKeyword_1_1() { return cISupportKeyword_1_1; }
		
		//'chunk'
		public Keyword getChunkKeyword_1_2() { return cChunkKeyword_1_2; }
		
		//'default'
		public Keyword getDefaultKeyword_1_3() { return cDefaultKeyword_1_3; }
		
		//'template'
		public Keyword getTemplateKeyword_1_4() { return cTemplateKeyword_1_4; }
	}
	public class StateImpConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.StateImpCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateImpCondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTATEParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIMPASSEParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Assignment cIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdSymConstantParserRuleCall_3_0 = (RuleCall)cIdAssignment_3.eContents().get(0);
		private final Assignment cAttrValueTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttrValueTestAttrValueTestParserRuleCall_4_0 = (RuleCall)cAttrValueTestAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// Grammar for Condition Side
		////ConditionSide returns ConditionSide:
		////    {ConditionSide} conditions+=ConditionExpr*
		////;
		//StateImpCondition returns StateImpCondition:
		//    {StateImpCond} '(' (STATE | IMPASSE)? id=SymConstant (attrValueTest+=AttrValueTest)+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StateImpCond} '(' (STATE | IMPASSE)? id=SymConstant (attrValueTest+=AttrValueTest)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{StateImpCond}
		public Action getStateImpCondAction_0() { return cStateImpCondAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(STATE | IMPASSE)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_2_0() { return cSTATEParserRuleCall_2_0; }
		
		//IMPASSE
		public RuleCall getIMPASSEParserRuleCall_2_1() { return cIMPASSEParserRuleCall_2_1; }
		
		//id=SymConstant
		public Assignment getIdAssignment_3() { return cIdAssignment_3; }
		
		//SymConstant
		public RuleCall getIdSymConstantParserRuleCall_3_0() { return cIdSymConstantParserRuleCall_3_0; }
		
		//(attrValueTest+=AttrValueTest)+
		public Assignment getAttrValueTestAssignment_4() { return cAttrValueTestAssignment_4; }
		
		//AttrValueTest
		public RuleCall getAttrValueTestAttrValueTestParserRuleCall_4_0() { return cAttrValueTestAttrValueTestParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AttrValueTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AttrValueTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrValueTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttrTestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0 = (RuleCall)cAttrTestAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttrTestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0 = (RuleCall)cAttrTestAssignment_3_1.eContents().get(0);
		private final Assignment cTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTestConditionExprParserRuleCall_4_0 = (RuleCall)cTestAssignment_4.eContents().get(0);
		
		//AttrValueTest returns AttrValueTest:
		//    {AttrValueTest} '^' attrTest+=SYM_CONSTANT_STRING ('.' attrTest+=SYM_CONSTANT_STRING)* test=ConditionExpr
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttrValueTest} '^' attrTest+=SYM_CONSTANT_STRING ('.' attrTest+=SYM_CONSTANT_STRING)* test=ConditionExpr
		public Group getGroup() { return cGroup; }
		
		//{AttrValueTest}
		public Action getAttrValueTestAction_0() { return cAttrValueTestAction_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1() { return cCircumflexAccentKeyword_1; }
		
		//attrTest+=SYM_CONSTANT_STRING
		public Assignment getAttrTestAssignment_2() { return cAttrTestAssignment_2; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0() { return cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0; }
		
		//('.' attrTest+=SYM_CONSTANT_STRING)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'.'
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }
		
		//attrTest+=SYM_CONSTANT_STRING
		public Assignment getAttrTestAssignment_3_1() { return cAttrTestAssignment_3_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0() { return cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0; }
		
		//test=ConditionExpr
		public Assignment getTestAssignment_4() { return cTestAssignment_4; }
		
		//ConditionExpr
		public RuleCall getTestConditionExprParserRuleCall_4_0() { return cTestConditionExprParserRuleCall_4_0; }
	}
	public class RelationalOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.RelationalOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		////cond : positive_cond | ( ('-') positive_cond ) ;
		////positive_cond : conds_for_one_id | ('{' cond+ '}') ;
		////conds_for_one_id : '(' (STATE | IMPASSE)? id_test AttrValueTests+ ')';
		////id_test : test ;
		////AttrValueTests : '-'? '^' attr_test ('.' attr_test)* value_test* ;
		////attr_test : test ;
		////value_test : ( test '+'? ) | ( conds_for_one_id '+'? ) ;
		////test : conjunctive_test | simple_test | multi_value_test ;
		////conjunctive_test : '{' simple_test+ '}' ;
		////simple_test : disjunction_test | relational_test ;
		////multi_value_test : '[' INTEGER_LIT+ ']' ;
		////disjunction_test : '<<' constant+ '>>' ;
		////relational_test : RelationalOp? single_test ;
		//RelationalOp : '<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_0() { return cLessThanSignGreaterThanSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_4() { return cGreaterThanSignEqualsSignKeyword_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_5() { return cEqualsSignEqualsSignKeyword_5; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_6() { return cLessThanSignEqualsSignGreaterThanSignKeyword_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_7() { return cEqualsSignKeyword_7; }
	}
	public class ConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ConditionExpr");
		private final RuleCall cPlusExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////single_test : variable | constant ;
		////variable : '<|' SymConstant '|>' ;
		////constant : sym_constant | INTEGER_LIT | REAL_LIT | Print_string ;
		////constant : SymConstant | INTEGER_LIT | REAL_LIT ;
		//ConditionExpr:
		//    PlusExpr
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PlusExpr
		public RuleCall getPlusExprParserRuleCall() { return cPlusExprParserRuleCall; }
	}
	public class PlusExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PlusExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final Keyword cOpPlusSignKeyword_1_0_0_1_0 = (Keyword)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightRelationalExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusExpr returns Expr:
		//    RelationalExpr (=>({BinaryExpr.left=current} op='+') right=RelationalExpr)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RelationalExpr (=>({BinaryExpr.left=current} op='+') right=RelationalExpr)*
		public Group getGroup() { return cGroup; }
		
		//RelationalExpr
		public RuleCall getRelationalExprParserRuleCall_0() { return cRelationalExprParserRuleCall_0; }
		
		//(=>({BinaryExpr.left=current} op='+') right=RelationalExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({BinaryExpr.left=current} op='+')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryExpr.left=current} op='+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }
		
		//op='+'
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_0_0_1_0() { return cOpPlusSignKeyword_1_0_0_1_0; }
		
		//right=RelationalExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//RelationalExpr
		public RuleCall getRightRelationalExprParserRuleCall_1_1_0() { return cRightRelationalExprParserRuleCall_1_1_0; }
	}
	public class RelationalExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.RelationalExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOpRelationalOpParserRuleCall_1_0_0_1_0 = (RuleCall)cOpAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrefixExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//RelationalExpr returns Expr:
		//    PrefixExpr (=>({BinaryExpr.left=current} op=RelationalOp) right=PrefixExpr)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//PrefixExpr (=>({BinaryExpr.left=current} op=RelationalOp) right=PrefixExpr)?
		public Group getGroup() { return cGroup; }
		
		//PrefixExpr
		public RuleCall getPrefixExprParserRuleCall_0() { return cPrefixExprParserRuleCall_0; }
		
		//(=>({BinaryExpr.left=current} op=RelationalOp) right=PrefixExpr)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=>({BinaryExpr.left=current} op=RelationalOp)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{BinaryExpr.left=current} op=RelationalOp
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0_0() { return cBinaryExprLeftAction_1_0_0_0; }
		
		//op=RelationalOp
		public Assignment getOpAssignment_1_0_0_1() { return cOpAssignment_1_0_0_1; }
		
		//RelationalOp
		public RuleCall getOpRelationalOpParserRuleCall_1_0_0_1_0() { return cOpRelationalOpParserRuleCall_1_0_0_1_0; }
		
		//right=PrefixExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrefixExpr
		public RuleCall getRightPrefixExprParserRuleCall_1_1_0() { return cRightPrefixExprParserRuleCall_1_1_0; }
	}
	public class PrefixExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PrefixExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cUnaryExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_0_1_0 = (Keyword)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cExprAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExprPrefixExprParserRuleCall_0_2_0 = (RuleCall)cExprAssignment_0_2.eContents().get(0);
		private final RuleCall cAtomicConditionExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrefixExpr returns Expr:
		//    {UnaryExpr} op='-' expr=PrefixExpr
		//|    AtomicConditionExpr
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    {UnaryExpr} op='-' expr=PrefixExpr
		//|    AtomicConditionExpr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{UnaryExpr} op='-' expr=PrefixExpr
		public Group getGroup_0() { return cGroup_0; }
		
		//{UnaryExpr}
		public Action getUnaryExprAction_0_0() { return cUnaryExprAction_0_0; }
		
		//op='-'
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1_0() { return cOpHyphenMinusKeyword_0_1_0; }
		
		//expr=PrefixExpr
		public Assignment getExprAssignment_0_2() { return cExprAssignment_0_2; }
		
		//PrefixExpr
		public RuleCall getExprPrefixExprParserRuleCall_0_2_0() { return cExprPrefixExprParserRuleCall_0_2_0; }
		
		//AtomicConditionExpr
		public RuleCall getAtomicConditionExprParserRuleCall_1() { return cAtomicConditionExprParserRuleCall_1; }
	}
	public class AtomicConditionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AtomicConditionExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConjunctTestExprAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTestsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTestsConditionExprParserRuleCall_0_2_0 = (RuleCall)cTestsAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cMultiValTestExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTestsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTestsConditionExprParserRuleCall_1_2_0 = (RuleCall)cTestsAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cDisjunctTestExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cConstsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cConstsConditionExprParserRuleCall_2_2_0 = (RuleCall)cConstsAssignment_2_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cSymConstExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValSymConstantParserRuleCall_3_1_0 = (RuleCall)cValAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cConstStringExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0 = (RuleCall)cValAssignment_4_1.eContents().get(0);
		
		//AtomicConditionExpr returns Expr:
		//////    {ConditionExpr} cond=Expr
		//////    {NegativeCondExpr} '-' cond=ConditionExpr
		////    {StateImpCondExpr} '(' (STATE | IMPASSE)? name=SymConstant ('^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)*)+ ')'
		////    {AttrValTestExpr} '^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)* valTests+=ConditionExpr*
		//////|    {ValTestExpr} (test=Expr ('+')?)
		//////|    {RelationalTestExpr} RelationalOp test=ConditionExpr
		//    {ConjunctTestExpr}  '{' tests+=ConditionExpr* '}'
		//|    {MultiValTestExpr} '[' tests+=ConditionExpr+ ']'
		//|    {DisjunctTestExpr} '<<' consts+=ConditionExpr+ '>>'
		//////|    {VarExpr} '<|' var=ConditionExpr '|>'
		//////|    {ConstExpr} val=ConditionExpr
		//|    {SymConstExpr} val=SymConstant
		////|    {IntExpr} val=INTEGER_LIT
		////|    {RealExpr} val=REAL_LIT
		//|    {ConstStringExpr} val=SYM_CONSTANT_STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//////    {ConditionExpr} cond=Expr
		//////    {NegativeCondExpr} '-' cond=ConditionExpr
		////    {StateImpCondExpr} '(' (STATE | IMPASSE)? name=SymConstant ('^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)*)+ ')'
		////    {AttrValTestExpr} '^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)* valTests+=ConditionExpr*
		//////|    {ValTestExpr} (test=Expr ('+')?)
		//////|    {RelationalTestExpr} RelationalOp test=ConditionExpr
		//    {ConjunctTestExpr}  '{' tests+=ConditionExpr* '}'
		//|    {MultiValTestExpr} '[' tests+=ConditionExpr+ ']'
		//|    {DisjunctTestExpr} '<<' consts+=ConditionExpr+ '>>'
		//////|    {VarExpr} '<|' var=ConditionExpr '|>'
		//////|    {ConstExpr} val=ConditionExpr
		//|    {SymConstExpr} val=SymConstant
		////|    {IntExpr} val=INTEGER_LIT
		////|    {RealExpr} val=REAL_LIT
		//|    {ConstStringExpr} val=SYM_CONSTANT_STRING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//////    {ConditionExpr} cond=Expr
		//////    {NegativeCondExpr} '-' cond=ConditionExpr
		////    {StateImpCondExpr} '(' (STATE | IMPASSE)? name=SymConstant ('^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)*)+ ')'
		////    {AttrValTestExpr} '^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)* valTests+=ConditionExpr*
		//////|    {ValTestExpr} (test=Expr ('+')?)
		//////|    {RelationalTestExpr} RelationalOp test=ConditionExpr
		//    {ConjunctTestExpr}  '{' tests+=ConditionExpr* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//////    {ConditionExpr} cond=Expr
		//////    {NegativeCondExpr} '-' cond=ConditionExpr
		////    {StateImpCondExpr} '(' (STATE | IMPASSE)? name=SymConstant ('^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)*)+ ')'
		////    {AttrValTestExpr} '^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)* valTests+=ConditionExpr*
		//////|    {ValTestExpr} (test=Expr ('+')?)
		//////|    {RelationalTestExpr} RelationalOp test=ConditionExpr
		//    {ConjunctTestExpr}
		public Action getConjunctTestExprAction_0_0() { return cConjunctTestExprAction_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//tests+=ConditionExpr*
		public Assignment getTestsAssignment_0_2() { return cTestsAssignment_0_2; }
		
		//ConditionExpr
		public RuleCall getTestsConditionExprParserRuleCall_0_2_0() { return cTestsConditionExprParserRuleCall_0_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//{MultiValTestExpr} '[' tests+=ConditionExpr+ ']'
		public Group getGroup_1() { return cGroup_1; }
		
		//{MultiValTestExpr}
		public Action getMultiValTestExprAction_1_0() { return cMultiValTestExprAction_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//tests+=ConditionExpr+
		public Assignment getTestsAssignment_1_2() { return cTestsAssignment_1_2; }
		
		//ConditionExpr
		public RuleCall getTestsConditionExprParserRuleCall_1_2_0() { return cTestsConditionExprParserRuleCall_1_2_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//{DisjunctTestExpr} '<<' consts+=ConditionExpr+ '>>'
		public Group getGroup_2() { return cGroup_2; }
		
		//{DisjunctTestExpr}
		public Action getDisjunctTestExprAction_2_0() { return cDisjunctTestExprAction_2_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_2_1() { return cLessThanSignLessThanSignKeyword_2_1; }
		
		//consts+=ConditionExpr+
		public Assignment getConstsAssignment_2_2() { return cConstsAssignment_2_2; }
		
		//ConditionExpr
		public RuleCall getConstsConditionExprParserRuleCall_2_2_0() { return cConstsConditionExprParserRuleCall_2_2_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_2_3() { return cGreaterThanSignGreaterThanSignKeyword_2_3; }
		
		//{SymConstExpr} val=SymConstant
		public Group getGroup_3() { return cGroup_3; }
		
		//{SymConstExpr}
		public Action getSymConstExprAction_3_0() { return cSymConstExprAction_3_0; }
		
		//val=SymConstant
		public Assignment getValAssignment_3_1() { return cValAssignment_3_1; }
		
		//SymConstant
		public RuleCall getValSymConstantParserRuleCall_3_1_0() { return cValSymConstantParserRuleCall_3_1_0; }
		
		//{ConstStringExpr} val=SYM_CONSTANT_STRING
		public Group getGroup_4() { return cGroup_4; }
		
		//{ConstStringExpr}
		public Action getConstStringExprAction_4_0() { return cConstStringExprAction_4_0; }
		
		//val=SYM_CONSTANT_STRING
		public Assignment getValAssignment_4_1() { return cValAssignment_4_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0() { return cValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0; }
	}
	public class ActionSideExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ActionSideExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdSymConstantParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cMakeIdAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0 = (RuleCall)cMakeIdAssignment_0_3.eContents().get(0);
		private final Assignment cAttrValMakesAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAttrValMakesActionExprParserRuleCall_0_4_0 = (RuleCall)cAttrValMakesAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cWriteKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTextActionExprParserRuleCall_1_2_0 = (RuleCall)cTextAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//// Grammar for Action Side
		//////action_side : (action  | func_call | print)* ;
		////ActionSide returns ActionSide:
		////////    (action  | func_call )*
		////    {ActionSide} actions+=ActionExpr*
		////;
		//ActionSideExpr returns ActionSideExpr:
		//    '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		//|    '(' 'write' text+=ActionExpr+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		//|    '(' 'write' text+=ActionExpr+ ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//id=SymConstant
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//SymConstant
		public RuleCall getIdSymConstantParserRuleCall_0_1_0() { return cIdSymConstantParserRuleCall_0_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_0_2() { return cCircumflexAccentKeyword_0_2; }
		
		//makeId=SYM_CONSTANT_STRING
		public Assignment getMakeIdAssignment_0_3() { return cMakeIdAssignment_0_3; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0() { return cMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0; }
		
		//attrValMakes+=ActionExpr+
		public Assignment getAttrValMakesAssignment_0_4() { return cAttrValMakesAssignment_0_4; }
		
		//ActionExpr
		public RuleCall getAttrValMakesActionExprParserRuleCall_0_4_0() { return cAttrValMakesActionExprParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//'(' 'write' text+=ActionExpr+ ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'write'
		public Keyword getWriteKeyword_1_1() { return cWriteKeyword_1_1; }
		
		//text+=ActionExpr+
		public Assignment getTextAssignment_1_2() { return cTextAssignment_1_2; }
		
		//ActionExpr
		public RuleCall getTextActionExprParserRuleCall_1_2_0() { return cTextActionExprParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class UnaryPrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.UnaryPref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//////action : ( '(' variable attr_value_make+ ')' );
		//////print : ( '(' 'write ' ( Print_string | variable | '(crlf)')+ ')' )+ ;
		//////Print_string : '|' ~[|]* '|' ;
		//////Print_string : '|' STRING '|' ;
		//////func_call : '(' func_name value* ')' ;
		//////func_name : SymConstant | '+' | '-' | '*' | '/' ;
		//////value : constant | func_call | variable ;
		//////attr_value_make : '^' variable_or_sym_constant ( '.' variable_or_sym_constant )* value_make ;
		//////variable_or_sym_constant : variable | SymConstant ;
		//////value_make : value pref_specifier* ;
		//////pref_specifier : ( unary_pref ','? ) | ( unary_or_binary_pref ','? ) | unary_or_binary_pref value ','? ;
		//UnaryPref : '+' | '-' | '!' | '~' | '@' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '!' | '~' | '@'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
		
		//'@'
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }
	}
	public class UnaryOrBinaryPrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.UnaryOrBinaryPref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAmpersandKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOrBinaryPref : '>' | '=' | '<' | '&' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '=' | '<' | '&'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_3() { return cAmpersandKeyword_3; }
	}
	public class ActionExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ActionExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cSymConstExprAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cValAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cValSymConstantParserRuleCall_0_0_1_0 = (RuleCall)cValAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStringExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPrefSpecifierExprAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cUnaryPrefParserRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cUnaryOrBinaryPrefParserRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cCrlfExprAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cCrlfKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStringExprAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cExprAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cExprPIPE_STRINGTerminalRuleCall_4_1_0 = (RuleCall)cExprAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cCommaExprAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cCommaKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cParenExprAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cExprsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cExprsActionExprParserRuleCall_6_2_0 = (RuleCall)cExprsAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//ActionExpr returns Expr:
		////    {ActionSideExpr} '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		////|    {PrintExpr} '(' 'write' text+=ActionExpr+ ')'
		////    {FnCallExpr} '(' FuncName val+=ActionExpr* ')'
		////|    {VarExpr} '<|' var=ActionExpr '|>'
		//    => ({SymConstExpr} val=SymConstant)
		////|    {IntExpr} val=INTEGER_LIT
		////|    {RealExpr} val=REAL_LIT
		//|    {StringExpr} val=SYM_CONSTANT_STRING
		////|    {AttrValMakeExpr} '^' attrMake+=ActionExpr ('.' attrMake+=ActionExpr)* valMake=ActionExpr
		////|    {ValMakeExpr} 'm' val=ActionExpr prefSpecifiers+=ActionExpr (',' prefSpecifiers+=ActionExpr)*
		//|    {PrefSpecifierExpr} (UnaryPref | UnaryOrBinaryPref)
		//|    {CrlfExpr} '(crlf)'
		//|    {StringExpr} expr=PIPE_STRING
		//|    {CommaExpr} ','
		//|    {ParenExpr} '(' exprs+=ActionExpr+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    {ActionSideExpr} '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		////|    {PrintExpr} '(' 'write' text+=ActionExpr+ ')'
		////    {FnCallExpr} '(' FuncName val+=ActionExpr* ')'
		////|    {VarExpr} '<|' var=ActionExpr '|>'
		//    => ({SymConstExpr} val=SymConstant)
		////|    {IntExpr} val=INTEGER_LIT
		////|    {RealExpr} val=REAL_LIT
		//|    {StringExpr} val=SYM_CONSTANT_STRING
		////|    {AttrValMakeExpr} '^' attrMake+=ActionExpr ('.' attrMake+=ActionExpr)* valMake=ActionExpr
		////|    {ValMakeExpr} 'm' val=ActionExpr prefSpecifiers+=ActionExpr (',' prefSpecifiers+=ActionExpr)*
		//|    {PrefSpecifierExpr} (UnaryPref | UnaryOrBinaryPref)
		//|    {CrlfExpr} '(crlf)'
		//|    {StringExpr} expr=PIPE_STRING
		//|    {CommaExpr} ','
		//|    {ParenExpr} '(' exprs+=ActionExpr+ ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////    {ActionSideExpr} '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
		////|    {PrintExpr} '(' 'write' text+=ActionExpr+ ')'
		////    {FnCallExpr} '(' FuncName val+=ActionExpr* ')'
		////|    {VarExpr} '<|' var=ActionExpr '|>'
		//    => ({SymConstExpr} val=SymConstant)
		public Group getGroup_0() { return cGroup_0; }
		
		//{SymConstExpr} val=SymConstant
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{SymConstExpr}
		public Action getSymConstExprAction_0_0_0() { return cSymConstExprAction_0_0_0; }
		
		//val=SymConstant
		public Assignment getValAssignment_0_0_1() { return cValAssignment_0_0_1; }
		
		//SymConstant
		public RuleCall getValSymConstantParserRuleCall_0_0_1_0() { return cValSymConstantParserRuleCall_0_0_1_0; }
		
		//{StringExpr} val=SYM_CONSTANT_STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//{StringExpr}
		public Action getStringExprAction_1_0() { return cStringExprAction_1_0; }
		
		//val=SYM_CONSTANT_STRING
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0() { return cValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0; }
		
		//{PrefSpecifierExpr} (UnaryPref | UnaryOrBinaryPref)
		public Group getGroup_2() { return cGroup_2; }
		
		//{PrefSpecifierExpr}
		public Action getPrefSpecifierExprAction_2_0() { return cPrefSpecifierExprAction_2_0; }
		
		//(UnaryPref | UnaryOrBinaryPref)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//UnaryPref
		public RuleCall getUnaryPrefParserRuleCall_2_1_0() { return cUnaryPrefParserRuleCall_2_1_0; }
		
		//UnaryOrBinaryPref
		public RuleCall getUnaryOrBinaryPrefParserRuleCall_2_1_1() { return cUnaryOrBinaryPrefParserRuleCall_2_1_1; }
		
		//{CrlfExpr} '(crlf)'
		public Group getGroup_3() { return cGroup_3; }
		
		//{CrlfExpr}
		public Action getCrlfExprAction_3_0() { return cCrlfExprAction_3_0; }
		
		//'(crlf)'
		public Keyword getCrlfKeyword_3_1() { return cCrlfKeyword_3_1; }
		
		//{StringExpr} expr=PIPE_STRING
		public Group getGroup_4() { return cGroup_4; }
		
		//{StringExpr}
		public Action getStringExprAction_4_0() { return cStringExprAction_4_0; }
		
		//expr=PIPE_STRING
		public Assignment getExprAssignment_4_1() { return cExprAssignment_4_1; }
		
		//PIPE_STRING
		public RuleCall getExprPIPE_STRINGTerminalRuleCall_4_1_0() { return cExprPIPE_STRINGTerminalRuleCall_4_1_0; }
		
		//{CommaExpr} ','
		public Group getGroup_5() { return cGroup_5; }
		
		//{CommaExpr}
		public Action getCommaExprAction_5_0() { return cCommaExprAction_5_0; }
		
		//','
		public Keyword getCommaKeyword_5_1() { return cCommaKeyword_5_1; }
		
		//{ParenExpr} '(' exprs+=ActionExpr+ ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{ParenExpr}
		public Action getParenExprAction_6_0() { return cParenExprAction_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//exprs+=ActionExpr+
		public Assignment getExprsAssignment_6_2() { return cExprsAssignment_6_2; }
		
		//ActionExpr
		public RuleCall getExprsActionExprParserRuleCall_6_2_0() { return cExprsActionExprParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
	}
	public class SymConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SymConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////FuncName: SymConstant | '+' | '-' | '*' | '/' ;
		////sym_constant: Sym_constant | STATE ;
		//SymConstant: '<' (SYM_CONSTANT_STRING | STATE) '>';
		@Override public ParserRule getRule() { return rule; }
		
		//'<' (SYM_CONSTANT_STRING | STATE) '>'
		public Group getGroup() { return cGroup; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }
		
		//(SYM_CONSTANT_STRING | STATE)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_1_0() { return cSYM_CONSTANT_STRINGTerminalRuleCall_1_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_1_1() { return cSTATEParserRuleCall_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}
	public class STATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.STATE");
		private final Keyword cStateKeyword = (Keyword)rule.eContents().get(1);
		
		//// Types of constants
		//STATE: 'state' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'state'
		public Keyword getStateKeyword() { return cStateKeyword; }
	}
	public class IMPASSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.IMPASSE");
		private final Keyword cImpasseKeyword = (Keyword)rule.eContents().get(1);
		
		//IMPASSE: 'impasse';
		@Override public ParserRule getRule() { return rule; }
		
		//'impasse'
		public Keyword getImpasseKeyword() { return cImpasseKeyword; }
	}
	
	
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final SoarAnnexLibraryElements pSoarAnnexLibrary;
	private final SoarAnnexSubclauseElements pSoarAnnexSubclause;
	private final SoarProductionElements pSoarProduction;
	private final DocumentationElements pDocumentation;
	private final FlagsElements pFlags;
	private final StateImpConditionElements pStateImpCondition;
	private final AttrValueTestElements pAttrValueTest;
	private final RelationalOpElements pRelationalOp;
	private final ConditionExprElements pConditionExpr;
	private final PlusExprElements pPlusExpr;
	private final RelationalExprElements pRelationalExpr;
	private final PrefixExprElements pPrefixExpr;
	private final AtomicConditionExprElements pAtomicConditionExpr;
	private final ActionSideExprElements pActionSideExpr;
	private final UnaryPrefElements pUnaryPref;
	private final UnaryOrBinaryPrefElements pUnaryOrBinaryPref;
	private final ActionExprElements pActionExpr;
	private final SymConstantElements pSymConstant;
	private final STATEElements pSTATE;
	private final IMPASSEElements pIMPASSE;
	private final TerminalRule tSYM_CONSTANT_STRING;
	private final TerminalRule tSTRING;
	private final TerminalRule tPIPE_STRING;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public SoarGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pSoarAnnexLibrary = new SoarAnnexLibraryElements();
		this.pSoarAnnexSubclause = new SoarAnnexSubclauseElements();
		this.pSoarProduction = new SoarProductionElements();
		this.pDocumentation = new DocumentationElements();
		this.pFlags = new FlagsElements();
		this.pStateImpCondition = new StateImpConditionElements();
		this.pAttrValueTest = new AttrValueTestElements();
		this.pRelationalOp = new RelationalOpElements();
		this.pConditionExpr = new ConditionExprElements();
		this.pPlusExpr = new PlusExprElements();
		this.pRelationalExpr = new RelationalExprElements();
		this.pPrefixExpr = new PrefixExprElements();
		this.pAtomicConditionExpr = new AtomicConditionExprElements();
		this.pActionSideExpr = new ActionSideExprElements();
		this.pUnaryPref = new UnaryPrefElements();
		this.pUnaryOrBinaryPref = new UnaryOrBinaryPrefElements();
		this.pActionExpr = new ActionExprElements();
		this.pSymConstant = new SymConstantElements();
		this.pSTATE = new STATEElements();
		this.pIMPASSE = new IMPASSEElements();
		this.tSYM_CONSTANT_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.STRING");
		this.tPIPE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PIPE_STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.collins.trustedmethods.matrics.soar.Soar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//AnnexLibrary returns aadl2::AnnexLibrary:
	//    SoarAnnexLibrary
	//;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}
	
	//AnnexSubclause returns aadl2::AnnexSubclause:
	//    SoarAnnexSubclause
	//;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}
	
	//SoarAnnexLibrary:
	//    {SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
	//;
	public SoarAnnexLibraryElements getSoarAnnexLibraryAccess() {
		return pSoarAnnexLibrary;
	}
	
	public ParserRule getSoarAnnexLibraryRule() {
		return getSoarAnnexLibraryAccess().getRule();
	}
	
	//SoarAnnexSubclause:
	//    {SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
	//;
	public SoarAnnexSubclauseElements getSoarAnnexSubclauseAccess() {
		return pSoarAnnexSubclause;
	}
	
	public ParserRule getSoarAnnexSubclauseRule() {
		return getSoarAnnexSubclauseAccess().getRule();
	}
	
	////soar: soar_production+ ;
	//// Grammar of Soar productions
	//SoarProduction returns SoarProduction :
	//    {SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions+=StateImpCondition* '-->' actions+=ActionSideExpr+ '}'
	//;
	public SoarProductionElements getSoarProductionAccess() {
		return pSoarProduction;
	}
	
	public ParserRule getSoarProductionRule() {
		return getSoarProductionAccess().getRule();
	}
	
	////Documentation : '"""' ~["]* '"""' ;
	//Documentation : STRING;
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//Flags : ':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' ) ;
	public FlagsElements getFlagsAccess() {
		return pFlags;
	}
	
	public ParserRule getFlagsRule() {
		return getFlagsAccess().getRule();
	}
	
	//// Grammar for Condition Side
	////ConditionSide returns ConditionSide:
	////    {ConditionSide} conditions+=ConditionExpr*
	////;
	//StateImpCondition returns StateImpCondition:
	//    {StateImpCond} '(' (STATE | IMPASSE)? id=SymConstant (attrValueTest+=AttrValueTest)+ ')'
	//;
	public StateImpConditionElements getStateImpConditionAccess() {
		return pStateImpCondition;
	}
	
	public ParserRule getStateImpConditionRule() {
		return getStateImpConditionAccess().getRule();
	}
	
	//AttrValueTest returns AttrValueTest:
	//    {AttrValueTest} '^' attrTest+=SYM_CONSTANT_STRING ('.' attrTest+=SYM_CONSTANT_STRING)* test=ConditionExpr
	//;
	public AttrValueTestElements getAttrValueTestAccess() {
		return pAttrValueTest;
	}
	
	public ParserRule getAttrValueTestRule() {
		return getAttrValueTestAccess().getRule();
	}
	
	////cond : positive_cond | ( ('-') positive_cond ) ;
	////positive_cond : conds_for_one_id | ('{' cond+ '}') ;
	////conds_for_one_id : '(' (STATE | IMPASSE)? id_test AttrValueTests+ ')';
	////id_test : test ;
	////AttrValueTests : '-'? '^' attr_test ('.' attr_test)* value_test* ;
	////attr_test : test ;
	////value_test : ( test '+'? ) | ( conds_for_one_id '+'? ) ;
	////test : conjunctive_test | simple_test | multi_value_test ;
	////conjunctive_test : '{' simple_test+ '}' ;
	////simple_test : disjunction_test | relational_test ;
	////multi_value_test : '[' INTEGER_LIT+ ']' ;
	////disjunction_test : '<<' constant+ '>>' ;
	////relational_test : RelationalOp? single_test ;
	//RelationalOp : '<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=';
	public RelationalOpElements getRelationalOpAccess() {
		return pRelationalOp;
	}
	
	public ParserRule getRelationalOpRule() {
		return getRelationalOpAccess().getRule();
	}
	
	////single_test : variable | constant ;
	////variable : '<|' SymConstant '|>' ;
	////constant : sym_constant | INTEGER_LIT | REAL_LIT | Print_string ;
	////constant : SymConstant | INTEGER_LIT | REAL_LIT ;
	//ConditionExpr:
	//    PlusExpr
	//;
	public ConditionExprElements getConditionExprAccess() {
		return pConditionExpr;
	}
	
	public ParserRule getConditionExprRule() {
		return getConditionExprAccess().getRule();
	}
	
	//PlusExpr returns Expr:
	//    RelationalExpr (=>({BinaryExpr.left=current} op='+') right=RelationalExpr)*
	//;
	public PlusExprElements getPlusExprAccess() {
		return pPlusExpr;
	}
	
	public ParserRule getPlusExprRule() {
		return getPlusExprAccess().getRule();
	}
	
	//RelationalExpr returns Expr:
	//    PrefixExpr (=>({BinaryExpr.left=current} op=RelationalOp) right=PrefixExpr)?
	//;
	public RelationalExprElements getRelationalExprAccess() {
		return pRelationalExpr;
	}
	
	public ParserRule getRelationalExprRule() {
		return getRelationalExprAccess().getRule();
	}
	
	//PrefixExpr returns Expr:
	//    {UnaryExpr} op='-' expr=PrefixExpr
	//|    AtomicConditionExpr
	//;
	public PrefixExprElements getPrefixExprAccess() {
		return pPrefixExpr;
	}
	
	public ParserRule getPrefixExprRule() {
		return getPrefixExprAccess().getRule();
	}
	
	//AtomicConditionExpr returns Expr:
	//////    {ConditionExpr} cond=Expr
	//////    {NegativeCondExpr} '-' cond=ConditionExpr
	////    {StateImpCondExpr} '(' (STATE | IMPASSE)? name=SymConstant ('^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)*)+ ')'
	////    {AttrValTestExpr} '^' attrTests+=SYM_CONSTANT_STRING ('.' attrTests+=SYM_CONSTANT_STRING)* valTests+=ConditionExpr*
	//////|    {ValTestExpr} (test=Expr ('+')?)
	//////|    {RelationalTestExpr} RelationalOp test=ConditionExpr
	//    {ConjunctTestExpr}  '{' tests+=ConditionExpr* '}'
	//|    {MultiValTestExpr} '[' tests+=ConditionExpr+ ']'
	//|    {DisjunctTestExpr} '<<' consts+=ConditionExpr+ '>>'
	//////|    {VarExpr} '<|' var=ConditionExpr '|>'
	//////|    {ConstExpr} val=ConditionExpr
	//|    {SymConstExpr} val=SymConstant
	////|    {IntExpr} val=INTEGER_LIT
	////|    {RealExpr} val=REAL_LIT
	//|    {ConstStringExpr} val=SYM_CONSTANT_STRING
	//;
	public AtomicConditionExprElements getAtomicConditionExprAccess() {
		return pAtomicConditionExpr;
	}
	
	public ParserRule getAtomicConditionExprRule() {
		return getAtomicConditionExprAccess().getRule();
	}
	
	//// Grammar for Action Side
	//////action_side : (action  | func_call | print)* ;
	////ActionSide returns ActionSide:
	////////    (action  | func_call )*
	////    {ActionSide} actions+=ActionExpr*
	////;
	//ActionSideExpr returns ActionSideExpr:
	//    '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
	//|    '(' 'write' text+=ActionExpr+ ')'
	//;
	public ActionSideExprElements getActionSideExprAccess() {
		return pActionSideExpr;
	}
	
	public ParserRule getActionSideExprRule() {
		return getActionSideExprAccess().getRule();
	}
	
	//////action : ( '(' variable attr_value_make+ ')' );
	//////print : ( '(' 'write ' ( Print_string | variable | '(crlf)')+ ')' )+ ;
	//////Print_string : '|' ~[|]* '|' ;
	//////Print_string : '|' STRING '|' ;
	//////func_call : '(' func_name value* ')' ;
	//////func_name : SymConstant | '+' | '-' | '*' | '/' ;
	//////value : constant | func_call | variable ;
	//////attr_value_make : '^' variable_or_sym_constant ( '.' variable_or_sym_constant )* value_make ;
	//////variable_or_sym_constant : variable | SymConstant ;
	//////value_make : value pref_specifier* ;
	//////pref_specifier : ( unary_pref ','? ) | ( unary_or_binary_pref ','? ) | unary_or_binary_pref value ','? ;
	//UnaryPref : '+' | '-' | '!' | '~' | '@' ;
	public UnaryPrefElements getUnaryPrefAccess() {
		return pUnaryPref;
	}
	
	public ParserRule getUnaryPrefRule() {
		return getUnaryPrefAccess().getRule();
	}
	
	//UnaryOrBinaryPref : '>' | '=' | '<' | '&' ;
	public UnaryOrBinaryPrefElements getUnaryOrBinaryPrefAccess() {
		return pUnaryOrBinaryPref;
	}
	
	public ParserRule getUnaryOrBinaryPrefRule() {
		return getUnaryOrBinaryPrefAccess().getRule();
	}
	
	//ActionExpr returns Expr:
	////    {ActionSideExpr} '(' id=SymConstant '^' makeId=SYM_CONSTANT_STRING attrValMakes+=ActionExpr+ ')'
	////|    {PrintExpr} '(' 'write' text+=ActionExpr+ ')'
	////    {FnCallExpr} '(' FuncName val+=ActionExpr* ')'
	////|    {VarExpr} '<|' var=ActionExpr '|>'
	//    => ({SymConstExpr} val=SymConstant)
	////|    {IntExpr} val=INTEGER_LIT
	////|    {RealExpr} val=REAL_LIT
	//|    {StringExpr} val=SYM_CONSTANT_STRING
	////|    {AttrValMakeExpr} '^' attrMake+=ActionExpr ('.' attrMake+=ActionExpr)* valMake=ActionExpr
	////|    {ValMakeExpr} 'm' val=ActionExpr prefSpecifiers+=ActionExpr (',' prefSpecifiers+=ActionExpr)*
	//|    {PrefSpecifierExpr} (UnaryPref | UnaryOrBinaryPref)
	//|    {CrlfExpr} '(crlf)'
	//|    {StringExpr} expr=PIPE_STRING
	//|    {CommaExpr} ','
	//|    {ParenExpr} '(' exprs+=ActionExpr+ ')'
	//;
	public ActionExprElements getActionExprAccess() {
		return pActionExpr;
	}
	
	public ParserRule getActionExprRule() {
		return getActionExprAccess().getRule();
	}
	
	////FuncName: SymConstant | '+' | '-' | '*' | '/' ;
	////sym_constant: Sym_constant | STATE ;
	//SymConstant: '<' (SYM_CONSTANT_STRING | STATE) '>';
	public SymConstantElements getSymConstantAccess() {
		return pSymConstant;
	}
	
	public ParserRule getSymConstantRule() {
		return getSymConstantAccess().getRule();
	}
	
	//// Types of constants
	//STATE: 'state' ;
	public STATEElements getSTATEAccess() {
		return pSTATE;
	}
	
	public ParserRule getSTATERule() {
		return getSTATEAccess().getRule();
	}
	
	//IMPASSE: 'impasse';
	public IMPASSEElements getIMPASSEAccess() {
		return pIMPASSE;
	}
	
	public ParserRule getIMPASSERule() {
		return getIMPASSEAccess().getRule();
	}
	
	////Sym_constant : [a-zA-Z] [a-zA-Z0-9-_*]* ;
	//terminal SYM_CONSTANT_STRING : ('a'..'z' | 'A'..'Z') (('_')? ('*')? ('-')? ('a'..'z' | 'A'..'Z' | '0'..'9'))* ;
	public TerminalRule getSYM_CONSTANT_STRINGRule() {
		return tSYM_CONSTANT_STRING;
	}
	
	////Int_constant : [0-9]+ ;
	////Float_constant : [0-9]+ '.' [0-9]+ ;
	////WS : [ \t\r\n]+ -> skip ;
	//terminal STRING    :
	//            '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"'
	////|            "'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
	//;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal PIPE_STRING :
	//    '|' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'|') )* '|'
	//;
	public TerminalRule getPIPE_STRINGRule() {
		return tPIPE_STRING;
	}
	
	////terminal fragment
	////EXPONENT  :  ('e'|'E') ('+'|'-')? ( DIGIT )+  ;
	////terminal fragment
	////INT_EXPONENT :  ('e'|'E') ('+')? ( DIGIT )+ ;
	////terminal fragment
	////DIGIT     :  ( '0'..'9' ) ;
	////
	////terminal REAL_LIT :
	////    (DIGIT)+ ( '.' (DIGIT)+ )
	////  ;
	////
	////terminal INTEGER_LIT :
	////        (DIGIT)+
	////  ;
	//terminal WS            : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	////@Override
	//terminal SL_COMMENT:
	//    '#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
}
