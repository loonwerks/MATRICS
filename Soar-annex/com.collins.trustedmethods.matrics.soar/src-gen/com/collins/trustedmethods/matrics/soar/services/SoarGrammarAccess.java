/*
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.33.0.
 */

package com.collins.trustedmethods.matrics.soar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SoarGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class AnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AnnexLibrary");
		private final RuleCall cSoarAnnexLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexLibrary returns aadl2::AnnexLibrary:
		//    SoarAnnexLibrary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SoarAnnexLibrary
		public RuleCall getSoarAnnexLibraryParserRuleCall() { return cSoarAnnexLibraryParserRuleCall; }
	}
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AnnexSubclause");
		private final RuleCall cSoarAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AnnexSubclause returns aadl2::AnnexSubclause:
		//    SoarAnnexSubclause
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SoarAnnexSubclause
		public RuleCall getSoarAnnexSubclauseParserRuleCall() { return cSoarAnnexSubclauseParserRuleCall; }
	}
	public class SoarAnnexLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarAnnexLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarAnnexLibraryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSoarAnnexProductionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoarAnnexProductionsSoarProductionParserRuleCall_1_0 = (RuleCall)cSoarAnnexProductionsAssignment_1.eContents().get(0);
		
		//SoarAnnexLibrary:
		//    {SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
		public Group getGroup() { return cGroup; }
		
		//{SoarAnnexLibrary}
		public Action getSoarAnnexLibraryAction_0() { return cSoarAnnexLibraryAction_0; }
		
		//soarAnnexProductions+=SoarProduction*
		public Assignment getSoarAnnexProductionsAssignment_1() { return cSoarAnnexProductionsAssignment_1; }
		
		//SoarProduction
		public RuleCall getSoarAnnexProductionsSoarProductionParserRuleCall_1_0() { return cSoarAnnexProductionsSoarProductionParserRuleCall_1_0; }
	}
	public class SoarAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarAnnexSubclauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cSoarAnnexProductionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSoarAnnexProductionsSoarProductionParserRuleCall_1_0 = (RuleCall)cSoarAnnexProductionsAssignment_1.eContents().get(0);
		
		//SoarAnnexSubclause:
		//    {SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
		public Group getGroup() { return cGroup; }
		
		//{SoarAnnexSubclause}
		public Action getSoarAnnexSubclauseAction_0() { return cSoarAnnexSubclauseAction_0; }
		
		//soarAnnexProductions+=SoarProduction*
		public Assignment getSoarAnnexProductionsAssignment_1() { return cSoarAnnexProductionsAssignment_1; }
		
		//SoarProduction
		public RuleCall getSoarAnnexProductionsSoarProductionParserRuleCall_1_0() { return cSoarAnnexProductionsSoarProductionParserRuleCall_1_0; }
	}
	public class SoarProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSoarProductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSpKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cGpKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cDocAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDocDocumentationParserRuleCall_4_0 = (RuleCall)cDocAssignment_4.eContents().get(0);
		private final Assignment cFlagAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFlagFlagsParserRuleCall_5_0 = (RuleCall)cFlagAssignment_5.eContents().get(0);
		private final Assignment cConditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConditionsConditionSideParserRuleCall_6_0 = (RuleCall)cConditionsAssignment_6.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cActionsActionSideParserRuleCall_8_0 = (RuleCall)cActionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		////Updated Grammar
		////soar_production : ('sp'|'gp') '{' sym_constant Documentation? flags? condition_side '-->' action_side '}' ;
		//SoarProduction returns SoarProduction :
		//    {SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions=ConditionSide '-->' actions=ActionSide '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions=ConditionSide '-->' actions=ActionSide '}'
		public Group getGroup() { return cGroup; }
		
		//{SoarProduction}
		public Action getSoarProductionAction_0() { return cSoarProductionAction_0; }
		
		//('sp'|'gp')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'sp'
		public Keyword getSpKeyword_1_0() { return cSpKeyword_1_0; }
		
		//'gp'
		public Keyword getGpKeyword_1_1() { return cGpKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//name=SYM_CONSTANT_STRING
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0() { return cNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0; }
		
		//doc=Documentation?
		public Assignment getDocAssignment_4() { return cDocAssignment_4; }
		
		//Documentation
		public RuleCall getDocDocumentationParserRuleCall_4_0() { return cDocDocumentationParserRuleCall_4_0; }
		
		//flag=Flags?
		public Assignment getFlagAssignment_5() { return cFlagAssignment_5; }
		
		//Flags
		public RuleCall getFlagFlagsParserRuleCall_5_0() { return cFlagFlagsParserRuleCall_5_0; }
		
		//conditions=ConditionSide
		public Assignment getConditionsAssignment_6() { return cConditionsAssignment_6; }
		
		//ConditionSide
		public RuleCall getConditionsConditionSideParserRuleCall_6_0() { return cConditionsConditionSideParserRuleCall_6_0; }
		
		//'-->'
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_7; }
		
		//actions=ActionSide
		public Assignment getActionsAssignment_8() { return cActionsAssignment_8; }
		
		//ActionSide
		public RuleCall getActionsActionSideParserRuleCall_8_0() { return cActionsActionSideParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DocumentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Documentation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cQuotationMarkQuotationMarkQuotationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		////Documentation : '"""' ~["]* '"""' ;
		////Documentation : STRING;
		//Documentation : '"""' SYM_CONSTANT_STRING '"""';
		@Override public ParserRule getRule() { return rule; }
		
		//'"""' SYM_CONSTANT_STRING '"""'
		public Group getGroup() { return cGroup; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_0() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_0; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_1() { return cSYM_CONSTANT_STRINGTerminalRuleCall_1; }
		
		//'"""'
		public Keyword getQuotationMarkQuotationMarkQuotationMarkKeyword_2() { return cQuotationMarkQuotationMarkQuotationMarkKeyword_2; }
	}
	public class FlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Flags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cOSupportKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cISupportKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cChunkKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cDefaultKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final Keyword cTemplateKeyword_1_4 = (Keyword)cAlternatives_1.eContents().get(4);
		
		//Flags : ':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' ) ;
		@Override public ParserRule getRule() { return rule; }
		
		//':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' )
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//('o-support' | 'i-support' | 'chunk' | 'default' | 'template' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'o-support'
		public Keyword getOSupportKeyword_1_0() { return cOSupportKeyword_1_0; }
		
		//'i-support'
		public Keyword getISupportKeyword_1_1() { return cISupportKeyword_1_1; }
		
		//'chunk'
		public Keyword getChunkKeyword_1_2() { return cChunkKeyword_1_2; }
		
		//'default'
		public Keyword getDefaultKeyword_1_3() { return cDefaultKeyword_1_3; }
		
		//'template'
		public Keyword getTemplateKeyword_1_4() { return cTemplateKeyword_1_4; }
	}
	public class ConditionSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ConditionSide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionSideAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStateImpConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateImpConditionStateImpConditionParserRuleCall_1_0 = (RuleCall)cStateImpConditionAssignment_1.eContents().get(0);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondCondParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		
		//// Grammar for Condition Side
		////condition_side : state_imp_cond cond* ;
		//ConditionSide returns ConditionSide:
		//    {ConditionSide} (stateImpCondition=StateImpCondition) (cond+=Cond)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConditionSide} (stateImpCondition=StateImpCondition) (cond+=Cond)*
		public Group getGroup() { return cGroup; }
		
		//{ConditionSide}
		public Action getConditionSideAction_0() { return cConditionSideAction_0; }
		
		//(stateImpCondition=StateImpCondition)
		public Assignment getStateImpConditionAssignment_1() { return cStateImpConditionAssignment_1; }
		
		//StateImpCondition
		public RuleCall getStateImpConditionStateImpConditionParserRuleCall_1_0() { return cStateImpConditionStateImpConditionParserRuleCall_1_0; }
		
		//(cond+=Cond)*
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//Cond
		public RuleCall getCondCondParserRuleCall_2_0() { return cCondCondParserRuleCall_2_0; }
	}
	public class StateImpConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.StateImpCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateImpCondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTATEParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIMPASSEParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Assignment cIdTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdTestVariableParserRuleCall_3_0 = (RuleCall)cIdTestAssignment_3.eContents().get(0);
		private final Assignment cAttrValueTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttrValueTestAttrValueTestParserRuleCall_4_0 = (RuleCall)cAttrValueTestAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////state_imp_cond : '(' (STATE | 'impasse') id_test? attr_value_tests+ ')' ;
		//StateImpCondition returns StateImpCondition:
		//    {StateImpCond} '(' (STATE | IMPASSE) (idTest=Variable)? (attrValueTest+=AttrValueTest)+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StateImpCond} '(' (STATE | IMPASSE) (idTest=Variable)? (attrValueTest+=AttrValueTest)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{StateImpCond}
		public Action getStateImpCondAction_0() { return cStateImpCondAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(STATE | IMPASSE)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_2_0() { return cSTATEParserRuleCall_2_0; }
		
		//IMPASSE
		public RuleCall getIMPASSEParserRuleCall_2_1() { return cIMPASSEParserRuleCall_2_1; }
		
		//(idTest=Variable)?
		public Assignment getIdTestAssignment_3() { return cIdTestAssignment_3; }
		
		//Variable
		public RuleCall getIdTestVariableParserRuleCall_3_0() { return cIdTestVariableParserRuleCall_3_0; }
		
		//(attrValueTest+=AttrValueTest)+
		public Assignment getAttrValueTestAssignment_4() { return cAttrValueTestAssignment_4; }
		
		//AttrValueTest
		public RuleCall getAttrValueTestAttrValueTestParserRuleCall_4_0() { return cAttrValueTestAttrValueTestParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class CondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Cond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCondAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondPositiveCondParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		
		////cond : positive_cond | ( ('-') positive_cond ) ;
		//Cond returns Cond:
		//    {Cond} ('-')? (cond=PositiveCond)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Cond} ('-')? (cond=PositiveCond)
		public Group getGroup() { return cGroup; }
		
		//{Cond}
		public Action getCondAction_0() { return cCondAction_0; }
		
		//('-')?
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//(cond=PositiveCond)
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }
		
		//PositiveCond
		public RuleCall getCondPositiveCondParserRuleCall_2_0() { return cCondPositiveCondParserRuleCall_2_0; }
	}
	public class PositiveCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PositiveCond");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPositiveCondAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cCondForOneIdAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cCondForOneIdCondForOneIdParserRuleCall_0_1_0_0 = (RuleCall)cCondForOneIdAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCondCondParserRuleCall_1_1_0 = (RuleCall)cCondAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////positive_cond : conds_for_one_id | ('{' cond+ '}') ;
		//PositiveCond returns PositiveCond:
		//    {PositiveCond} => (condForOneId=CondForOneId) | ('{' (cond+=Cond)+ '}')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PositiveCond} => (condForOneId=CondForOneId) | ('{' (cond+=Cond)+ '}')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PositiveCond} => (condForOneId=CondForOneId)
		public Group getGroup_0() { return cGroup_0; }
		
		//{PositiveCond}
		public Action getPositiveCondAction_0_0() { return cPositiveCondAction_0_0; }
		
		//=> (condForOneId=CondForOneId)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//condForOneId=CondForOneId
		public Assignment getCondForOneIdAssignment_0_1_0() { return cCondForOneIdAssignment_0_1_0; }
		
		//CondForOneId
		public RuleCall getCondForOneIdCondForOneIdParserRuleCall_0_1_0_0() { return cCondForOneIdCondForOneIdParserRuleCall_0_1_0_0; }
		
		//('{' (cond+=Cond)+ '}')
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//(cond+=Cond)+
		public Assignment getCondAssignment_1_1() { return cCondAssignment_1_1; }
		
		//Cond
		public RuleCall getCondCondParserRuleCall_1_1_0() { return cCondCondParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class CondForOneIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.CondForOneId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCondForOneIdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cSTATEParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIMPASSEParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Assignment cIdTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdTestVariableParserRuleCall_3_0 = (RuleCall)cIdTestAssignment_3.eContents().get(0);
		private final Assignment cAttrValueTestAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttrValueTestAttrValueTestParserRuleCall_4_0 = (RuleCall)cAttrValueTestAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////conds_for_one_id : '(' (STATE | IMPASSE)? id_test AttrValueTests+ ')';
		//CondForOneId returns CondForOneId:
		//    {CondForOneId} '(' (STATE | IMPASSE)? (idTest=Variable) (attrValueTest+=AttrValueTest)+ ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{CondForOneId} '(' (STATE | IMPASSE)? (idTest=Variable) (attrValueTest+=AttrValueTest)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{CondForOneId}
		public Action getCondForOneIdAction_0() { return cCondForOneIdAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(STATE | IMPASSE)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_2_0() { return cSTATEParserRuleCall_2_0; }
		
		//IMPASSE
		public RuleCall getIMPASSEParserRuleCall_2_1() { return cIMPASSEParserRuleCall_2_1; }
		
		//(idTest=Variable)
		public Assignment getIdTestAssignment_3() { return cIdTestAssignment_3; }
		
		//Variable
		public RuleCall getIdTestVariableParserRuleCall_3_0() { return cIdTestVariableParserRuleCall_3_0; }
		
		//(attrValueTest+=AttrValueTest)+
		public Assignment getAttrValueTestAssignment_4() { return cAttrValueTestAssignment_4; }
		
		//AttrValueTest
		public RuleCall getAttrValueTestAttrValueTestParserRuleCall_4_0() { return cAttrValueTestAttrValueTestParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class AttrValueTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AttrValueTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrValueTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttrTestAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0 = (RuleCall)cAttrTestAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFullStopKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAttrTestAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0 = (RuleCall)cAttrTestAssignment_4_1.eContents().get(0);
		private final Assignment cValueTestAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueTestValueTestParserRuleCall_5_0 = (RuleCall)cValueTestAssignment_5.eContents().get(0);
		
		////id_test : test ;
		////AttrValueTests : '-'? '^' attr_test ('.' attr_test)* value_test* ;
		// AttrValueTest returns AttrValueTest:
		//     {AttrValueTest} '-'? '^' (attrTest+=SYM_CONSTANT_STRING) ('.' attrTest+=SYM_CONSTANT_STRING)* (valueTest+=ValueTest)*
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttrValueTest} '-'? '^' (attrTest+=SYM_CONSTANT_STRING) ('.' attrTest+=SYM_CONSTANT_STRING)* (valueTest+=ValueTest)*
		public Group getGroup() { return cGroup; }
		
		//{AttrValueTest}
		public Action getAttrValueTestAction_0() { return cAttrValueTestAction_0; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_2() { return cCircumflexAccentKeyword_2; }
		
		//(attrTest+=SYM_CONSTANT_STRING)
		public Assignment getAttrTestAssignment_3() { return cAttrTestAssignment_3; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0() { return cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0; }
		
		//('.' attrTest+=SYM_CONSTANT_STRING)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'.'
		public Keyword getFullStopKeyword_4_0() { return cFullStopKeyword_4_0; }
		
		//attrTest+=SYM_CONSTANT_STRING
		public Assignment getAttrTestAssignment_4_1() { return cAttrTestAssignment_4_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0() { return cAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0; }
		
		//(valueTest+=ValueTest)*
		public Assignment getValueTestAssignment_5() { return cValueTestAssignment_5; }
		
		//ValueTest
		public RuleCall getValueTestValueTestParserRuleCall_5_0() { return cValueTestValueTestParserRuleCall_5_0; }
	}
	public class ValueTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ValueTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueTestAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cTestAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cTestTestParserRuleCall_0_1_0_0 = (RuleCall)cTestAssignment_0_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cCondForOneIdAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cCondForOneIdCondForOneIdParserRuleCall_1_0_0 = (RuleCall)cCondForOneIdAssignment_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		////attr_test : test ;
		////value_test : ( test '+'? ) | ( conds_for_one_id '+'? ) ;
		// ValueTest returns ValueTest:
		//     {ValueTest} (test=Test '+'?) | (condForOneId=CondForOneId '+'?)
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueTest} (test=Test '+'?) | (condForOneId=CondForOneId '+'?)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ValueTest} (test=Test '+'?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{ValueTest}
		public Action getValueTestAction_0_0() { return cValueTestAction_0_0; }
		
		//(test=Test '+'?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//test=Test
		public Assignment getTestAssignment_0_1_0() { return cTestAssignment_0_1_0; }
		
		//Test
		public RuleCall getTestTestParserRuleCall_0_1_0_0() { return cTestTestParserRuleCall_0_1_0_0; }
		
		//'+'?
		public Keyword getPlusSignKeyword_0_1_1() { return cPlusSignKeyword_0_1_1; }
		
		//(condForOneId=CondForOneId '+'?)
		public Group getGroup_1() { return cGroup_1; }
		
		//condForOneId=CondForOneId
		public Assignment getCondForOneIdAssignment_1_0() { return cCondForOneIdAssignment_1_0; }
		
		//CondForOneId
		public RuleCall getCondForOneIdCondForOneIdParserRuleCall_1_0_0() { return cCondForOneIdCondForOneIdParserRuleCall_1_0_0; }
		
		//'+'?
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
	}
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Test");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConjuctiveTestAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDisjunctionTestAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDisjunctionTestDisjunctionTestParserRuleCall_0_2_0 = (RuleCall)cDisjunctionTestAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cRelationalTestAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationalTestRelationalTestParserRuleCall_1_0_0 = (RuleCall)cRelationalTestAssignment_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSimpleTestAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cDisjunctionTestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDisjunctionTestDisjunctionTestParserRuleCall_2_1_0 = (RuleCall)cDisjunctionTestAssignment_2_1.eContents().get(0);
		private final Assignment cRelationalTestAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRelationalTestRelationalTestParserRuleCall_3_0 = (RuleCall)cRelationalTestAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cMultiValueTestAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		////test : conjunctive_test | simple_test | multi_value_test ;
		//// conjunctive_test : '{' simple_test+ '}' ;
		////simple_test : disjunction_test | relational_test ;
		////multi_value_test : '[' Int_constant+ ']' ;
		// Test returns Test:
		//    {ConjuctiveTest} '{' disjunctionTest=DisjunctionTest | relationalTest=RelationalTest '}'
		// |    {SimpleTest} disjunctionTest=DisjunctionTest | relationalTest=RelationalTest
		// |    {MultiValueTest} '[' INT+ ']'
		// ;
		@Override public ParserRule getRule() { return rule; }
		
		//   {ConjuctiveTest} '{' disjunctionTest=DisjunctionTest | relationalTest=RelationalTest '}'
		//|    {SimpleTest} disjunctionTest=DisjunctionTest | relationalTest=RelationalTest
		//|    {MultiValueTest} '[' INT+ ']'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConjuctiveTest} '{' disjunctionTest=DisjunctionTest
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConjuctiveTest}
		public Action getConjuctiveTestAction_0_0() { return cConjuctiveTestAction_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//disjunctionTest=DisjunctionTest
		public Assignment getDisjunctionTestAssignment_0_2() { return cDisjunctionTestAssignment_0_2; }
		
		//DisjunctionTest
		public RuleCall getDisjunctionTestDisjunctionTestParserRuleCall_0_2_0() { return cDisjunctionTestDisjunctionTestParserRuleCall_0_2_0; }
		
		//relationalTest=RelationalTest '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//relationalTest=RelationalTest
		public Assignment getRelationalTestAssignment_1_0() { return cRelationalTestAssignment_1_0; }
		
		//RelationalTest
		public RuleCall getRelationalTestRelationalTestParserRuleCall_1_0_0() { return cRelationalTestRelationalTestParserRuleCall_1_0_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_1() { return cRightCurlyBracketKeyword_1_1; }
		
		//{SimpleTest} disjunctionTest=DisjunctionTest
		public Group getGroup_2() { return cGroup_2; }
		
		//{SimpleTest}
		public Action getSimpleTestAction_2_0() { return cSimpleTestAction_2_0; }
		
		//disjunctionTest=DisjunctionTest
		public Assignment getDisjunctionTestAssignment_2_1() { return cDisjunctionTestAssignment_2_1; }
		
		//DisjunctionTest
		public RuleCall getDisjunctionTestDisjunctionTestParserRuleCall_2_1_0() { return cDisjunctionTestDisjunctionTestParserRuleCall_2_1_0; }
		
		//relationalTest=RelationalTest
		public Assignment getRelationalTestAssignment_3() { return cRelationalTestAssignment_3; }
		
		//RelationalTest
		public RuleCall getRelationalTestRelationalTestParserRuleCall_3_0() { return cRelationalTestRelationalTestParserRuleCall_3_0; }
		
		//{MultiValueTest} '[' INT+ ']'
		public Group getGroup_4() { return cGroup_4; }
		
		//{MultiValueTest}
		public Action getMultiValueTestAction_4_0() { return cMultiValueTestAction_4_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//INT+
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
	}
	public class DisjunctionTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.DisjunctionTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDisjunctionTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstantAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstantConstantParserRuleCall_2_0 = (RuleCall)cConstantAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////disjunction_test : '<<' constant+ '>>' ;
		//DisjunctionTest returns DisjunctionTest:
		//    {DisjunctionTest} '<<' (constant+=Constant)+ '>>'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DisjunctionTest} '<<' (constant+=Constant)+ '>>'
		public Group getGroup() { return cGroup; }
		
		//{DisjunctionTest}
		public Action getDisjunctionTestAction_0() { return cDisjunctionTestAction_0; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_1() { return cLessThanSignLessThanSignKeyword_1; }
		
		//(constant+=Constant)+
		public Assignment getConstantAssignment_2() { return cConstantAssignment_2; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_2_0() { return cConstantConstantParserRuleCall_2_0; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_3() { return cGreaterThanSignGreaterThanSignKeyword_3; }
	}
	public class SingleTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SingleTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSingleTestAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Assignment cConstantAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstantConstantParserRuleCall_1_1_0 = (RuleCall)cConstantAssignment_1_1.eContents().get(0);
		
		////single_test : variable | constant ;
		//SingleTest returns SingleTest:
		//    {SingleTest} (variable=Variable | constant=Constant)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SingleTest} (variable=Variable | constant=Constant)
		public Group getGroup() { return cGroup; }
		
		//{SingleTest}
		public Action getSingleTestAction_0() { return cSingleTestAction_0; }
		
		//(variable=Variable | constant=Constant)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0_0() { return cVariableVariableParserRuleCall_1_0_0; }
		
		//constant=Constant
		public Assignment getConstantAssignment_1_1() { return cConstantAssignment_1_1; }
		
		//Constant
		public RuleCall getConstantConstantParserRuleCall_1_1_0() { return cConstantConstantParserRuleCall_1_1_0; }
	}
	public class RelationalTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.RelationalTest");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cRelationalTestAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cLessThanSignGreaterThanSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0_1_2 = (Keyword)cAlternatives_0_1.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_0_1_3 = (Keyword)cAlternatives_0_1.eContents().get(3);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_1_4 = (Keyword)cAlternatives_0_1.eContents().get(4);
		private final Keyword cEqualsSignEqualsSignKeyword_0_1_5 = (Keyword)cAlternatives_0_1.eContents().get(5);
		private final Keyword cLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6 = (Keyword)cAlternatives_0_1.eContents().get(6);
		private final Keyword cEqualsSignKeyword_0_1_7 = (Keyword)cAlternatives_0_1.eContents().get(7);
		private final Assignment cSingleTestAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSingleTestSingleTestParserRuleCall_0_2_0 = (RuleCall)cSingleTestAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cRelationalTestAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSingleTestAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSingleTestSingleTestParserRuleCall_1_1_0 = (RuleCall)cSingleTestAssignment_1_1.eContents().get(0);
		
		////relational_test : relation? single_test ;
		////RelationalTest returns RelationalTest:
		////    {RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=')? (singleTest=SingleTest)
		////;
		//RelationalTest returns RelationalTest:
		//    {RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=') => singleTest=SingleTest
		//    | {RelationalTest} singleTest=SingleTest
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=') => singleTest=SingleTest
		//| {RelationalTest} singleTest=SingleTest
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=') => singleTest=SingleTest
		public Group getGroup_0() { return cGroup_0; }
		
		//{RelationalTest}
		public Action getRelationalTestAction_0_0() { return cRelationalTestAction_0_0; }
		
		//('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=')
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_0_1_0() { return cLessThanSignGreaterThanSignKeyword_0_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1_1() { return cLessThanSignKeyword_0_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1_2() { return cGreaterThanSignKeyword_0_1_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0_1_3() { return cLessThanSignEqualsSignKeyword_0_1_3; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0_1_4() { return cGreaterThanSignEqualsSignKeyword_0_1_4; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_1_5() { return cEqualsSignEqualsSignKeyword_0_1_5; }
		
		//'<=>'
		public Keyword getLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6() { return cLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1_7() { return cEqualsSignKeyword_0_1_7; }
		
		//=> singleTest=SingleTest
		public Assignment getSingleTestAssignment_0_2() { return cSingleTestAssignment_0_2; }
		
		//SingleTest
		public RuleCall getSingleTestSingleTestParserRuleCall_0_2_0() { return cSingleTestSingleTestParserRuleCall_0_2_0; }
		
		//{RelationalTest} singleTest=SingleTest
		public Group getGroup_1() { return cGroup_1; }
		
		//{RelationalTest}
		public Action getRelationalTestAction_1_0() { return cRelationalTestAction_1_0; }
		
		//singleTest=SingleTest
		public Assignment getSingleTestAssignment_1_1() { return cSingleTestAssignment_1_1; }
		
		//SingleTest
		public RuleCall getSingleTestSingleTestParserRuleCall_1_1_0() { return cSingleTestSingleTestParserRuleCall_1_1_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////variable : '<|' SymConstant '|>' ;
		//Variable returns Variable:
		//    {Variable} ('<' (SYM_CONSTANT_STRING | STATE) '>')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Variable} ('<' (SYM_CONSTANT_STRING | STATE) '>')
		public Group getGroup() { return cGroup; }
		
		//{Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }
		
		//('<' (SYM_CONSTANT_STRING | STATE) '>')
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//(SYM_CONSTANT_STRING | STATE)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0() { return cSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_1_1_1() { return cSTATEParserRuleCall_1_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_2() { return cGreaterThanSignKeyword_1_2; }
	}
	public class ActionSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ActionSide");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionSideAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cActionAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cActionActionParserRuleCall_1_0_0 = (RuleCall)cActionAssignment_1_0.eContents().get(0);
		private final Assignment cFuncCallAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cFuncCallFuncCallParserRuleCall_1_1_0 = (RuleCall)cFuncCallAssignment_1_1.eContents().get(0);
		private final Assignment cPrintAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cPrintPrintParserRuleCall_1_2_0 = (RuleCall)cPrintAssignment_1_2.eContents().get(0);
		
		////relation : '<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=';
		////RelationalOp : ;
		////action_side : (action  | func_call | print)* ;
		//ActionSide returns ActionSide:
		//    {ActionSide} ((action+=Action) | (funcCall+=FuncCall) | (print+=Print))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ActionSide} ((action+=Action) | (funcCall+=FuncCall) | (print+=Print))*
		public Group getGroup() { return cGroup; }
		
		//{ActionSide}
		public Action getActionSideAction_0() { return cActionSideAction_0; }
		
		//((action+=Action) | (funcCall+=FuncCall) | (print+=Print))*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(action+=Action)
		public Assignment getActionAssignment_1_0() { return cActionAssignment_1_0; }
		
		//Action
		public RuleCall getActionActionParserRuleCall_1_0_0() { return cActionActionParserRuleCall_1_0_0; }
		
		//(funcCall+=FuncCall)
		public Assignment getFuncCallAssignment_1_1() { return cFuncCallAssignment_1_1; }
		
		//FuncCall
		public RuleCall getFuncCallFuncCallParserRuleCall_1_1_0() { return cFuncCallFuncCallParserRuleCall_1_1_0; }
		
		//(print+=Print)
		public Assignment getPrintAssignment_1_2() { return cPrintAssignment_1_2; }
		
		//Print
		public RuleCall getPrintPrintParserRuleCall_1_2_0() { return cPrintPrintParserRuleCall_1_2_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_0 = (RuleCall)cVariableAssignment_1_1.eContents().get(0);
		private final Assignment cAttrValMakeAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAttrValMakeAttrValueMakeParserRuleCall_1_2_0 = (RuleCall)cAttrValMakeAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////action : ( '(' variable attr_value_make+ ')' );
		//Action returns Action:
		//    {Action} ( '(' variable=Variable (attrValMake+=AttrValueMake)+ ')')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Action} ( '(' variable=Variable (attrValMake+=AttrValueMake)+ ')')
		public Group getGroup() { return cGroup; }
		
		//{Action}
		public Action getActionAction_0() { return cActionAction_0; }
		
		//( '(' variable=Variable (attrValMake+=AttrValueMake)+ ')')
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1() { return cVariableAssignment_1_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_0() { return cVariableVariableParserRuleCall_1_1_0; }
		
		//(attrValMake+=AttrValueMake)+
		public Assignment getAttrValMakeAssignment_1_2() { return cAttrValMakeAssignment_1_2; }
		
		//AttrValueMake
		public RuleCall getAttrValMakeAttrValueMakeParserRuleCall_1_2_0() { return cAttrValMakeAttrValueMakeParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class PrintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Print");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrintAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cWriteKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cPRINT_STRINGTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final Assignment cVariableAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_2_1_0 = (RuleCall)cVariableAssignment_1_2_1.eContents().get(0);
		private final Keyword cCrlfKeyword_1_2_2 = (Keyword)cAlternatives_1_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		////print : ( '(' 'write ' ( Print_string | variable | '(crlf)')+ ')' )+ ;
		//Print returns Print:
		//    {Print} ('(' 'write' (PRINT_STRING | variable+=Variable | '(crlf)')+ ')' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Print} ('(' 'write' (PRINT_STRING | variable+=Variable | '(crlf)')+ ')' )
		public Group getGroup() { return cGroup; }
		
		//{Print}
		public Action getPrintAction_0() { return cPrintAction_0; }
		
		//('(' 'write' (PRINT_STRING | variable+=Variable | '(crlf)')+ ')' )
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//'write'
		public Keyword getWriteKeyword_1_1() { return cWriteKeyword_1_1; }
		
		//(PRINT_STRING | variable+=Variable | '(crlf)')+
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//PRINT_STRING
		public RuleCall getPRINT_STRINGTerminalRuleCall_1_2_0() { return cPRINT_STRINGTerminalRuleCall_1_2_0; }
		
		//variable+=Variable
		public Assignment getVariableAssignment_1_2_1() { return cVariableAssignment_1_2_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_2_1_0() { return cVariableVariableParserRuleCall_1_2_1_0; }
		
		//'(crlf)'
		public Keyword getCrlfKeyword_1_2_2() { return cCrlfKeyword_1_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class FuncCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.FuncCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFuncCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cAlternatives_2.eContents().get(0);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Keyword cAsteriskKeyword_2_3 = (Keyword)cAlternatives_2.eContents().get(3);
		private final Keyword cSolidusKeyword_2_4 = (Keyword)cAlternatives_2.eContents().get(4);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////func_call : '(' func_name value* ')' ;
		////func_name : sym_constant | '+' | '-' | '*' | '/' ;
		//FuncCall returns FuncCall:
		//    {FuncCall} '(' ((SYM_CONSTANT_STRING | STATE) | '+' | '-' | '*' | '/') (value+=Value)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FuncCall} '(' ((SYM_CONSTANT_STRING | STATE) | '+' | '-' | '*' | '/') (value+=Value)* ')'
		public Group getGroup() { return cGroup; }
		
		//{FuncCall}
		public Action getFuncCallAction_0() { return cFuncCallAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//((SYM_CONSTANT_STRING | STATE) | '+' | '-' | '*' | '/')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//(SYM_CONSTANT_STRING | STATE)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0() { return cSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_2_0_1() { return cSTATEParserRuleCall_2_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_1() { return cPlusSignKeyword_2_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_2() { return cHyphenMinusKeyword_2_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_2_3() { return cAsteriskKeyword_2_3; }
		
		//'/'
		public Keyword getSolidusKeyword_2_4() { return cSolidusKeyword_2_4; }
		
		//(value+=Value)*
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFuncCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		////value : constant | func_call | variable ;
		//Value returns Value:
		//     (Constant) | (FuncCall) | (Variable)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(Constant) | (FuncCall) | (Variable)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(Constant)
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }
		
		//(FuncCall)
		public RuleCall getFuncCallParserRuleCall_1() { return cFuncCallParserRuleCall_1; }
		
		//(Variable)
		public RuleCall getVariableParserRuleCall_2() { return cVariableParserRuleCall_2; }
	}
	public class AttrValueMakeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.AttrValueMake");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttrValueMakeAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariableOrSymConstantAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0 = (RuleCall)cVariableOrSymConstantAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cVariableOrSymConstantAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0 = (RuleCall)cVariableOrSymConstantAssignment_1_2_1.eContents().get(0);
		private final Assignment cValueMakeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueMakeValueMakeParserRuleCall_1_3_0 = (RuleCall)cValueMakeAssignment_1_3.eContents().get(0);
		
		////attr_value_make : '^' variable_or_sym_constant ( '.' variable_or_sym_constant )* value_make* ;
		//AttrValueMake returns AttrValueMake:
		//    {AttrValueMake}  ('^' (variableOrSymConstant+=VariableorSymConstant) ( '.' (variableOrSymConstant+=VariableorSymConstant))* (valueMake+=ValueMake)*)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttrValueMake}  ('^' (variableOrSymConstant+=VariableorSymConstant) ( '.' (variableOrSymConstant+=VariableorSymConstant))* (valueMake+=ValueMake)*)
		public Group getGroup() { return cGroup; }
		
		//{AttrValueMake}
		public Action getAttrValueMakeAction_0() { return cAttrValueMakeAction_0; }
		
		//('^' (variableOrSymConstant+=VariableorSymConstant) ( '.' (variableOrSymConstant+=VariableorSymConstant))* (valueMake+=ValueMake)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }
		
		//(variableOrSymConstant+=VariableorSymConstant)
		public Assignment getVariableOrSymConstantAssignment_1_1() { return cVariableOrSymConstantAssignment_1_1; }
		
		//VariableorSymConstant
		public RuleCall getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0() { return cVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0; }
		
		//( '.' (variableOrSymConstant+=VariableorSymConstant))*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//(variableOrSymConstant+=VariableorSymConstant)
		public Assignment getVariableOrSymConstantAssignment_1_2_1() { return cVariableOrSymConstantAssignment_1_2_1; }
		
		//VariableorSymConstant
		public RuleCall getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0() { return cVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0; }
		
		//(valueMake+=ValueMake)*
		public Assignment getValueMakeAssignment_1_3() { return cValueMakeAssignment_1_3; }
		
		//ValueMake
		public RuleCall getValueMakeValueMakeParserRuleCall_1_3_0() { return cValueMakeValueMakeParserRuleCall_1_3_0; }
	}
	public class VariableorSymConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.VariableorSymConstant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableorSymConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVariableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_1_0_0 = (RuleCall)cVariableAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0 = (RuleCall)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_1_1_1 = (RuleCall)cAlternatives_1_1.eContents().get(1);
		
		////variable_or_sym_constant : variable | sym_constant ;
		//VariableorSymConstant returns VariableorSymConstant:
		//    {VariableorSymConstant} (variable=Variable | (SYM_CONSTANT_STRING | STATE))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableorSymConstant} (variable=Variable | (SYM_CONSTANT_STRING | STATE))
		public Group getGroup() { return cGroup; }
		
		//{VariableorSymConstant}
		public Action getVariableorSymConstantAction_0() { return cVariableorSymConstantAction_0; }
		
		//(variable=Variable | (SYM_CONSTANT_STRING | STATE))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_0() { return cVariableAssignment_1_0; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0_0() { return cVariableVariableParserRuleCall_1_0_0; }
		
		//(SYM_CONSTANT_STRING | STATE)
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0() { return cSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_1_1_1() { return cSTATEParserRuleCall_1_1_1; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cAlternatives_1.eContents().get(0);
		private final RuleCall cSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cSTATEParserRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cFLOATTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		private final RuleCall cPRINT_STRINGTerminalRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		////constant : sym_constant | Int_constant | Float_constant | Print_string ;
		//Constant returns Constant:
		//    {Constant} ((SYM_CONSTANT_STRING | STATE) | INT | FLOAT | PRINT_STRING)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Constant} ((SYM_CONSTANT_STRING | STATE) | INT | FLOAT | PRINT_STRING)
		public Group getGroup() { return cGroup; }
		
		//{Constant}
		public Action getConstantAction_0() { return cConstantAction_0; }
		
		//((SYM_CONSTANT_STRING | STATE) | INT | FLOAT | PRINT_STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//(SYM_CONSTANT_STRING | STATE)
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//SYM_CONSTANT_STRING
		public RuleCall getSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0() { return cSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0; }
		
		//STATE
		public RuleCall getSTATEParserRuleCall_1_0_1() { return cSTATEParserRuleCall_1_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1_2() { return cFLOATTerminalRuleCall_1_2; }
		
		//PRINT_STRING
		public RuleCall getPRINT_STRINGTerminalRuleCall_1_3() { return cPRINT_STRINGTerminalRuleCall_1_3; }
	}
	public class ValueMakeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.ValueMake");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueMakeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cPrefSpecifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPrefSpecifierPrefSpecifierParserRuleCall_2_0 = (RuleCall)cPrefSpecifierAssignment_2.eContents().get(0);
		
		//ValueMake returns ValueMake:
		//    {ValueMake} (value=Value) (prefSpecifier+=PrefSpecifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueMake} (value=Value) (prefSpecifier+=PrefSpecifier)*
		public Group getGroup() { return cGroup; }
		
		//{ValueMake}
		public Action getValueMakeAction_0() { return cValueMakeAction_0; }
		
		//(value=Value)
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }
		
		//(prefSpecifier+=PrefSpecifier)*
		public Assignment getPrefSpecifierAssignment_2() { return cPrefSpecifierAssignment_2; }
		
		//PrefSpecifier
		public RuleCall getPrefSpecifierPrefSpecifierParserRuleCall_2_0() { return cPrefSpecifierPrefSpecifierParserRuleCall_2_0; }
	}
	public class PrefSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PrefSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPrefSpecifierAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cUnaryPrefAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cUnaryPrefUnaryPrefParserRuleCall_0_1_0_0 = (RuleCall)cUnaryPrefAssignment_0_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPrefSpecifierAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cUnaryOrBinaryPrefAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0 = (RuleCall)cUnaryOrBinaryPrefAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_1_1_1_0 = (RuleCall)cValueAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		////PrefSpecifier returns PrefSpecifier:
		////    {PrefSpecifier} (( unaryPref=UnaryPref ','? ) | ( unaryOrBinaryPref=UnaryOrBinaryPref ','?) | (unaryOrBinaryPref=UnaryOrBinaryPref) (value=Value) ','?)
		////;
		//PrefSpecifier returns PrefSpecifier:
		//    {PrefSpecifier} (unaryPref=UnaryPref (','?)?)
		//    | {PrefSpecifier} (unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{PrefSpecifier} (unaryPref=UnaryPref (','?)?)
		//| {PrefSpecifier} (unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PrefSpecifier} (unaryPref=UnaryPref (','?)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//{PrefSpecifier}
		public Action getPrefSpecifierAction_0_0() { return cPrefSpecifierAction_0_0; }
		
		//(unaryPref=UnaryPref (','?)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//unaryPref=UnaryPref
		public Assignment getUnaryPrefAssignment_0_1_0() { return cUnaryPrefAssignment_0_1_0; }
		
		//UnaryPref
		public RuleCall getUnaryPrefUnaryPrefParserRuleCall_0_1_0_0() { return cUnaryPrefUnaryPrefParserRuleCall_0_1_0_0; }
		
		//(','?)?
		public Keyword getCommaKeyword_0_1_1() { return cCommaKeyword_0_1_1; }
		
		//{PrefSpecifier} (unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
		public Group getGroup_1() { return cGroup_1; }
		
		//{PrefSpecifier}
		public Action getPrefSpecifierAction_1_0() { return cPrefSpecifierAction_1_0; }
		
		//(unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//unaryOrBinaryPref=UnaryOrBinaryPref
		public Assignment getUnaryOrBinaryPrefAssignment_1_1_0() { return cUnaryOrBinaryPrefAssignment_1_1_0; }
		
		//UnaryOrBinaryPref
		public RuleCall getUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0() { return cUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0; }
		
		//((',' value=Value)?)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_1_1_1_1() { return cValueAssignment_1_1_1_1; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_1_1_1_1_0() { return cValueValueParserRuleCall_1_1_1_1_0; }
		
		//(','?)
		public Keyword getCommaKeyword_1_1_2() { return cCommaKeyword_1_1_2; }
	}
	public class UnaryPrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.UnaryPref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cCommercialAtKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//////value_make : value pref_specifier* ;
		////ValueMake returns ValueMake:
		////    {ValueMake} (value=Value) (prefSpecifier=PrefSpecifier)
		////;
		////
		//////PrefSpecifierChain: //returns PrefSpecifierChain:
		//////    (prefSpecifier=PrefSpecifier) // (',' prefSpecifier+=PrefSpecifier)
		//////;
		//////pref_specifier : ( unary_pref ','? ) | ( unary_or_binary_pref ','? ) | unary_or_binary_pref value ','? ;
		////PrefSpecifier returns PrefSpecifier:
		////    {PrefSpecifier} (unary+=Unary)* | ((pref=UnaryOrBinaryPref ) (value=Value))//| (( pref=UnaryOrBinaryPref ) (value=Value)))
		////;
		////
		////Unary returns Unary:
		////    {Unary} (( pref=UnaryPref ) | ( pref=UnaryOrBinaryPref )) ','?
		////;
		////Binary returns Binary:
		////    {Binary} (pref=UnaryOrBinaryPref ) (value=Value)
		////;
		////unary_pref : '+' | '-' | '!' | '~' | '@' ;
		////unary_or_binary_pref : '>' | '=' | '<' | '&' ;
		//UnaryPref: '+' | '-' | '!' | '~' | '@';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '!' | '~' | '@'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
		
		//'@'
		public Keyword getCommercialAtKeyword_4() { return cCommercialAtKeyword_4; }
	}
	public class UnaryOrBinaryPrefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.UnaryOrBinaryPref");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAmpersandKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//UnaryOrBinaryPref: '>' | '=' | '<' | '&';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '=' | '<' | '&'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_3() { return cAmpersandKeyword_3; }
	}
	public class STATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.STATE");
		private final Keyword cStateKeyword = (Keyword)rule.eContents().get(1);
		
		//// Types of constants
		//STATE: 'state' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'state'
		public Keyword getStateKeyword() { return cStateKeyword; }
	}
	public class IMPASSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.IMPASSE");
		private final Keyword cImpasseKeyword = (Keyword)rule.eContents().get(1);
		
		//IMPASSE: 'impasse';
		@Override public ParserRule getRule() { return rule; }
		
		//'impasse'
		public Keyword getImpasseKeyword() { return cImpasseKeyword; }
	}
	
	
	private final AnnexLibraryElements pAnnexLibrary;
	private final AnnexSubclauseElements pAnnexSubclause;
	private final SoarAnnexLibraryElements pSoarAnnexLibrary;
	private final SoarAnnexSubclauseElements pSoarAnnexSubclause;
	private final SoarProductionElements pSoarProduction;
	private final DocumentationElements pDocumentation;
	private final FlagsElements pFlags;
	private final ConditionSideElements pConditionSide;
	private final StateImpConditionElements pStateImpCondition;
	private final CondElements pCond;
	private final PositiveCondElements pPositiveCond;
	private final CondForOneIdElements pCondForOneId;
	private final AttrValueTestElements pAttrValueTest;
	private final ValueTestElements pValueTest;
	private final TestElements pTest;
	private final DisjunctionTestElements pDisjunctionTest;
	private final SingleTestElements pSingleTest;
	private final RelationalTestElements pRelationalTest;
	private final VariableElements pVariable;
	private final ActionSideElements pActionSide;
	private final ActionElements pAction;
	private final PrintElements pPrint;
	private final FuncCallElements pFuncCall;
	private final ValueElements pValue;
	private final AttrValueMakeElements pAttrValueMake;
	private final VariableorSymConstantElements pVariableorSymConstant;
	private final ConstantElements pConstant;
	private final ValueMakeElements pValueMake;
	private final PrefSpecifierElements pPrefSpecifier;
	private final UnaryPrefElements pUnaryPref;
	private final UnaryOrBinaryPrefElements pUnaryOrBinaryPref;
	private final STATEElements pSTATE;
	private final IMPASSEElements pIMPASSE;
	private final TerminalRule tSYM_CONSTANT_STRING;
	private final TerminalRule tPRINT_STRING;
	private final TerminalRule tFLOAT;
	private final TerminalRule tINT;
	private final TerminalRule tWS;
	private final TerminalRule tSL_COMMENT;
	
	private final Grammar grammar;

	@Inject
	public SoarGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pAnnexLibrary = new AnnexLibraryElements();
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pSoarAnnexLibrary = new SoarAnnexLibraryElements();
		this.pSoarAnnexSubclause = new SoarAnnexSubclauseElements();
		this.pSoarProduction = new SoarProductionElements();
		this.pDocumentation = new DocumentationElements();
		this.pFlags = new FlagsElements();
		this.pConditionSide = new ConditionSideElements();
		this.pStateImpCondition = new StateImpConditionElements();
		this.pCond = new CondElements();
		this.pPositiveCond = new PositiveCondElements();
		this.pCondForOneId = new CondForOneIdElements();
		this.pAttrValueTest = new AttrValueTestElements();
		this.pValueTest = new ValueTestElements();
		this.pTest = new TestElements();
		this.pDisjunctionTest = new DisjunctionTestElements();
		this.pSingleTest = new SingleTestElements();
		this.pRelationalTest = new RelationalTestElements();
		this.pVariable = new VariableElements();
		this.pActionSide = new ActionSideElements();
		this.pAction = new ActionElements();
		this.pPrint = new PrintElements();
		this.pFuncCall = new FuncCallElements();
		this.pValue = new ValueElements();
		this.pAttrValueMake = new AttrValueMakeElements();
		this.pVariableorSymConstant = new VariableorSymConstantElements();
		this.pConstant = new ConstantElements();
		this.pValueMake = new ValueMakeElements();
		this.pPrefSpecifier = new PrefSpecifierElements();
		this.pUnaryPref = new UnaryPrefElements();
		this.pUnaryOrBinaryPref = new UnaryOrBinaryPrefElements();
		this.pSTATE = new STATEElements();
		this.pIMPASSE = new IMPASSEElements();
		this.tSYM_CONSTANT_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
		this.tPRINT_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.PRINT_STRING");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.FLOAT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.INT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.WS");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.collins.trustedmethods.matrics.soar.Soar.SL_COMMENT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.collins.trustedmethods.matrics.soar.Soar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//AnnexLibrary returns aadl2::AnnexLibrary:
	//    SoarAnnexLibrary
	//;
	public AnnexLibraryElements getAnnexLibraryAccess() {
		return pAnnexLibrary;
	}
	
	public ParserRule getAnnexLibraryRule() {
		return getAnnexLibraryAccess().getRule();
	}
	
	//AnnexSubclause returns aadl2::AnnexSubclause:
	//    SoarAnnexSubclause
	//;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}
	
	//SoarAnnexLibrary:
	//    {SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
	//;
	public SoarAnnexLibraryElements getSoarAnnexLibraryAccess() {
		return pSoarAnnexLibrary;
	}
	
	public ParserRule getSoarAnnexLibraryRule() {
		return getSoarAnnexLibraryAccess().getRule();
	}
	
	//SoarAnnexSubclause:
	//    {SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
	//;
	public SoarAnnexSubclauseElements getSoarAnnexSubclauseAccess() {
		return pSoarAnnexSubclause;
	}
	
	public ParserRule getSoarAnnexSubclauseRule() {
		return getSoarAnnexSubclauseAccess().getRule();
	}
	
	////Updated Grammar
	////soar_production : ('sp'|'gp') '{' sym_constant Documentation? flags? condition_side '-->' action_side '}' ;
	//SoarProduction returns SoarProduction :
	//    {SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions=ConditionSide '-->' actions=ActionSide '}'
	//;
	public SoarProductionElements getSoarProductionAccess() {
		return pSoarProduction;
	}
	
	public ParserRule getSoarProductionRule() {
		return getSoarProductionAccess().getRule();
	}
	
	////Documentation : '"""' ~["]* '"""' ;
	////Documentation : STRING;
	//Documentation : '"""' SYM_CONSTANT_STRING '"""';
	public DocumentationElements getDocumentationAccess() {
		return pDocumentation;
	}
	
	public ParserRule getDocumentationRule() {
		return getDocumentationAccess().getRule();
	}
	
	//Flags : ':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' ) ;
	public FlagsElements getFlagsAccess() {
		return pFlags;
	}
	
	public ParserRule getFlagsRule() {
		return getFlagsAccess().getRule();
	}
	
	//// Grammar for Condition Side
	////condition_side : state_imp_cond cond* ;
	//ConditionSide returns ConditionSide:
	//    {ConditionSide} (stateImpCondition=StateImpCondition) (cond+=Cond)*
	//;
	public ConditionSideElements getConditionSideAccess() {
		return pConditionSide;
	}
	
	public ParserRule getConditionSideRule() {
		return getConditionSideAccess().getRule();
	}
	
	////state_imp_cond : '(' (STATE | 'impasse') id_test? attr_value_tests+ ')' ;
	//StateImpCondition returns StateImpCondition:
	//    {StateImpCond} '(' (STATE | IMPASSE) (idTest=Variable)? (attrValueTest+=AttrValueTest)+ ')'
	//;
	public StateImpConditionElements getStateImpConditionAccess() {
		return pStateImpCondition;
	}
	
	public ParserRule getStateImpConditionRule() {
		return getStateImpConditionAccess().getRule();
	}
	
	////cond : positive_cond | ( ('-') positive_cond ) ;
	//Cond returns Cond:
	//    {Cond} ('-')? (cond=PositiveCond)
	//;
	public CondElements getCondAccess() {
		return pCond;
	}
	
	public ParserRule getCondRule() {
		return getCondAccess().getRule();
	}
	
	////positive_cond : conds_for_one_id | ('{' cond+ '}') ;
	//PositiveCond returns PositiveCond:
	//    {PositiveCond} => (condForOneId=CondForOneId) | ('{' (cond+=Cond)+ '}')
	//;
	public PositiveCondElements getPositiveCondAccess() {
		return pPositiveCond;
	}
	
	public ParserRule getPositiveCondRule() {
		return getPositiveCondAccess().getRule();
	}
	
	////conds_for_one_id : '(' (STATE | IMPASSE)? id_test AttrValueTests+ ')';
	//CondForOneId returns CondForOneId:
	//    {CondForOneId} '(' (STATE | IMPASSE)? (idTest=Variable) (attrValueTest+=AttrValueTest)+ ')'
	//;
	public CondForOneIdElements getCondForOneIdAccess() {
		return pCondForOneId;
	}
	
	public ParserRule getCondForOneIdRule() {
		return getCondForOneIdAccess().getRule();
	}
	
	////id_test : test ;
	////AttrValueTests : '-'? '^' attr_test ('.' attr_test)* value_test* ;
	// AttrValueTest returns AttrValueTest:
	//     {AttrValueTest} '-'? '^' (attrTest+=SYM_CONSTANT_STRING) ('.' attrTest+=SYM_CONSTANT_STRING)* (valueTest+=ValueTest)*
	// ;
	public AttrValueTestElements getAttrValueTestAccess() {
		return pAttrValueTest;
	}
	
	public ParserRule getAttrValueTestRule() {
		return getAttrValueTestAccess().getRule();
	}
	
	////attr_test : test ;
	////value_test : ( test '+'? ) | ( conds_for_one_id '+'? ) ;
	// ValueTest returns ValueTest:
	//     {ValueTest} (test=Test '+'?) | (condForOneId=CondForOneId '+'?)
	// ;
	public ValueTestElements getValueTestAccess() {
		return pValueTest;
	}
	
	public ParserRule getValueTestRule() {
		return getValueTestAccess().getRule();
	}
	
	////test : conjunctive_test | simple_test | multi_value_test ;
	//// conjunctive_test : '{' simple_test+ '}' ;
	////simple_test : disjunction_test | relational_test ;
	////multi_value_test : '[' Int_constant+ ']' ;
	// Test returns Test:
	//    {ConjuctiveTest} '{' disjunctionTest=DisjunctionTest | relationalTest=RelationalTest '}'
	// |    {SimpleTest} disjunctionTest=DisjunctionTest | relationalTest=RelationalTest
	// |    {MultiValueTest} '[' INT+ ']'
	// ;
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}
	
	////disjunction_test : '<<' constant+ '>>' ;
	//DisjunctionTest returns DisjunctionTest:
	//    {DisjunctionTest} '<<' (constant+=Constant)+ '>>'
	//;
	public DisjunctionTestElements getDisjunctionTestAccess() {
		return pDisjunctionTest;
	}
	
	public ParserRule getDisjunctionTestRule() {
		return getDisjunctionTestAccess().getRule();
	}
	
	////single_test : variable | constant ;
	//SingleTest returns SingleTest:
	//    {SingleTest} (variable=Variable | constant=Constant)
	//;
	public SingleTestElements getSingleTestAccess() {
		return pSingleTest;
	}
	
	public ParserRule getSingleTestRule() {
		return getSingleTestAccess().getRule();
	}
	
	////relational_test : relation? single_test ;
	////RelationalTest returns RelationalTest:
	////    {RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=')? (singleTest=SingleTest)
	////;
	//RelationalTest returns RelationalTest:
	//    {RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=') => singleTest=SingleTest
	//    | {RelationalTest} singleTest=SingleTest
	//;
	public RelationalTestElements getRelationalTestAccess() {
		return pRelationalTest;
	}
	
	public ParserRule getRelationalTestRule() {
		return getRelationalTestAccess().getRule();
	}
	
	////variable : '<|' SymConstant '|>' ;
	//Variable returns Variable:
	//    {Variable} ('<' (SYM_CONSTANT_STRING | STATE) '>')
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	////relation : '<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=';
	////RelationalOp : ;
	////action_side : (action  | func_call | print)* ;
	//ActionSide returns ActionSide:
	//    {ActionSide} ((action+=Action) | (funcCall+=FuncCall) | (print+=Print))*
	//;
	public ActionSideElements getActionSideAccess() {
		return pActionSide;
	}
	
	public ParserRule getActionSideRule() {
		return getActionSideAccess().getRule();
	}
	
	////action : ( '(' variable attr_value_make+ ')' );
	//Action returns Action:
	//    {Action} ( '(' variable=Variable (attrValMake+=AttrValueMake)+ ')')
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	////print : ( '(' 'write ' ( Print_string | variable | '(crlf)')+ ')' )+ ;
	//Print returns Print:
	//    {Print} ('(' 'write' (PRINT_STRING | variable+=Variable | '(crlf)')+ ')' )
	//;
	public PrintElements getPrintAccess() {
		return pPrint;
	}
	
	public ParserRule getPrintRule() {
		return getPrintAccess().getRule();
	}
	
	////func_call : '(' func_name value* ')' ;
	////func_name : sym_constant | '+' | '-' | '*' | '/' ;
	//FuncCall returns FuncCall:
	//    {FuncCall} '(' ((SYM_CONSTANT_STRING | STATE) | '+' | '-' | '*' | '/') (value+=Value)* ')'
	//;
	public FuncCallElements getFuncCallAccess() {
		return pFuncCall;
	}
	
	public ParserRule getFuncCallRule() {
		return getFuncCallAccess().getRule();
	}
	
	////value : constant | func_call | variable ;
	//Value returns Value:
	//     (Constant) | (FuncCall) | (Variable)
	//;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	////attr_value_make : '^' variable_or_sym_constant ( '.' variable_or_sym_constant )* value_make* ;
	//AttrValueMake returns AttrValueMake:
	//    {AttrValueMake}  ('^' (variableOrSymConstant+=VariableorSymConstant) ( '.' (variableOrSymConstant+=VariableorSymConstant))* (valueMake+=ValueMake)*)
	//;
	public AttrValueMakeElements getAttrValueMakeAccess() {
		return pAttrValueMake;
	}
	
	public ParserRule getAttrValueMakeRule() {
		return getAttrValueMakeAccess().getRule();
	}
	
	////variable_or_sym_constant : variable | sym_constant ;
	//VariableorSymConstant returns VariableorSymConstant:
	//    {VariableorSymConstant} (variable=Variable | (SYM_CONSTANT_STRING | STATE))
	//;
	public VariableorSymConstantElements getVariableorSymConstantAccess() {
		return pVariableorSymConstant;
	}
	
	public ParserRule getVariableorSymConstantRule() {
		return getVariableorSymConstantAccess().getRule();
	}
	
	////constant : sym_constant | Int_constant | Float_constant | Print_string ;
	//Constant returns Constant:
	//    {Constant} ((SYM_CONSTANT_STRING | STATE) | INT | FLOAT | PRINT_STRING)
	//;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//ValueMake returns ValueMake:
	//    {ValueMake} (value=Value) (prefSpecifier+=PrefSpecifier)*
	//;
	public ValueMakeElements getValueMakeAccess() {
		return pValueMake;
	}
	
	public ParserRule getValueMakeRule() {
		return getValueMakeAccess().getRule();
	}
	
	////PrefSpecifier returns PrefSpecifier:
	////    {PrefSpecifier} (( unaryPref=UnaryPref ','? ) | ( unaryOrBinaryPref=UnaryOrBinaryPref ','?) | (unaryOrBinaryPref=UnaryOrBinaryPref) (value=Value) ','?)
	////;
	//PrefSpecifier returns PrefSpecifier:
	//    {PrefSpecifier} (unaryPref=UnaryPref (','?)?)
	//    | {PrefSpecifier} (unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
	//;
	public PrefSpecifierElements getPrefSpecifierAccess() {
		return pPrefSpecifier;
	}
	
	public ParserRule getPrefSpecifierRule() {
		return getPrefSpecifierAccess().getRule();
	}
	
	//////value_make : value pref_specifier* ;
	////ValueMake returns ValueMake:
	////    {ValueMake} (value=Value) (prefSpecifier=PrefSpecifier)
	////;
	////
	//////PrefSpecifierChain: //returns PrefSpecifierChain:
	//////    (prefSpecifier=PrefSpecifier) // (',' prefSpecifier+=PrefSpecifier)
	//////;
	//////pref_specifier : ( unary_pref ','? ) | ( unary_or_binary_pref ','? ) | unary_or_binary_pref value ','? ;
	////PrefSpecifier returns PrefSpecifier:
	////    {PrefSpecifier} (unary+=Unary)* | ((pref=UnaryOrBinaryPref ) (value=Value))//| (( pref=UnaryOrBinaryPref ) (value=Value)))
	////;
	////
	////Unary returns Unary:
	////    {Unary} (( pref=UnaryPref ) | ( pref=UnaryOrBinaryPref )) ','?
	////;
	////Binary returns Binary:
	////    {Binary} (pref=UnaryOrBinaryPref ) (value=Value)
	////;
	////unary_pref : '+' | '-' | '!' | '~' | '@' ;
	////unary_or_binary_pref : '>' | '=' | '<' | '&' ;
	//UnaryPref: '+' | '-' | '!' | '~' | '@';
	public UnaryPrefElements getUnaryPrefAccess() {
		return pUnaryPref;
	}
	
	public ParserRule getUnaryPrefRule() {
		return getUnaryPrefAccess().getRule();
	}
	
	//UnaryOrBinaryPref: '>' | '=' | '<' | '&';
	public UnaryOrBinaryPrefElements getUnaryOrBinaryPrefAccess() {
		return pUnaryOrBinaryPref;
	}
	
	public ParserRule getUnaryOrBinaryPrefRule() {
		return getUnaryOrBinaryPrefAccess().getRule();
	}
	
	//// Types of constants
	//STATE: 'state' ;
	public STATEElements getSTATEAccess() {
		return pSTATE;
	}
	
	public ParserRule getSTATERule() {
		return getSTATEAccess().getRule();
	}
	
	//IMPASSE: 'impasse';
	public IMPASSEElements getIMPASSEAccess() {
		return pIMPASSE;
	}
	
	public ParserRule getIMPASSERule() {
		return getIMPASSEAccess().getRule();
	}
	
	////Sym_constant : [a-zA-Z] [a-zA-Z0-9-_*]* ;
	//terminal SYM_CONSTANT_STRING : ('a'..'z' | 'A'..'Z') (('_')? ('*')? ('-')? ('a'..'z' | 'A'..'Z' | '0'..'9'))* ;
	public TerminalRule getSYM_CONSTANT_STRINGRule() {
		return tSYM_CONSTANT_STRING;
	}
	
	////Print_string : '|' ~[|]* '|' ;
	//terminal PRINT_STRING:
	//    '|' ( '\\|' | !'|' )* '|';
	public TerminalRule getPRINT_STRINGRule() {
		return tPRINT_STRING;
	}
	
	////Float_constant : [0-9]+ '.' [0-9]+ ;
	//terminal FLOAT returns ecore::EFloat:
	//    ('0'..'9')+ '.' ('0'..'9')+;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	////Int_constant : [0-9]+ ;
	//terminal INT returns ecore::EInt:
	//    ('0'..'9')+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	////WS : [ \t\r\n]+ -> skip ;
	//terminal WS            : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	////COMMENT : '#' ~[\r\n]* -> skip ;
	////@Override
	//terminal SL_COMMENT:
	//    '#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
}
