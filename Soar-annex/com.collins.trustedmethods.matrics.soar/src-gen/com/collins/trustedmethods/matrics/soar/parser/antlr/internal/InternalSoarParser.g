/*
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.25.0.
 */

parser grammar InternalSoarParser;

options {
	tokenVocab=InternalSoarLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package com.collins.trustedmethods.matrics.soar.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;

}

@members {

 	private SoarGrammarAccess grammarAccess;

    public InternalSoarParser(TokenStream input, SoarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AnnexLibrary";
   	}

   	@Override
   	protected SoarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnexLibraryRule()); }
	iv_ruleAnnexLibrary=ruleAnnexLibrary
	{ $current=$iv_ruleAnnexLibrary.current; }
	EOF;

// Rule AnnexLibrary
ruleAnnexLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall());
	}
	this_SoarAnnexLibrary_0=ruleSoarAnnexLibrary
	{
		$current = $this_SoarAnnexLibrary_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSoarAnnexLibrary
entryRuleSoarAnnexLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarAnnexLibraryRule()); }
	iv_ruleSoarAnnexLibrary=ruleSoarAnnexLibrary
	{ $current=$iv_ruleSoarAnnexLibrary.current; }
	EOF;

// Rule SoarAnnexLibrary
ruleSoarAnnexLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0());
				}
				lv_soarAnnexProductions_1_0=ruleSoarProduction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarAnnexLibraryRule());
					}
					add(
						$current,
						"soarAnnexProductions",
						lv_soarAnnexProductions_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSoarAnnexSubclause
entryRuleSoarAnnexSubclause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarAnnexSubclauseRule()); }
	iv_ruleSoarAnnexSubclause=ruleSoarAnnexSubclause
	{ $current=$iv_ruleSoarAnnexSubclause.current; }
	EOF;

// Rule SoarAnnexSubclause
ruleSoarAnnexSubclause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0());
				}
				lv_soarAnnexProductions_1_0=ruleSoarProduction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarAnnexSubclauseRule());
					}
					add(
						$current,
						"soarAnnexProductions",
						lv_soarAnnexProductions_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSoarProduction
entryRuleSoarProduction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarProductionRule()); }
	iv_ruleSoarProduction=ruleSoarProduction
	{ $current=$iv_ruleSoarProduction.current; }
	EOF;

// Rule SoarProduction
ruleSoarProduction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarProductionAccess().getSoarProductionAction_0(),
					$current);
			}
		)
		(
			otherlv_1=Sp
			{
				newLeafNode(otherlv_1, grammarAccess.getSoarProductionAccess().getSpKeyword_1_0());
			}
			    |
			otherlv_2=Gp
			{
				newLeafNode(otherlv_2, grammarAccess.getSoarProductionAccess().getGpKeyword_1_1());
			}
		)
		otherlv_3=LeftCurlyBracket
		{
			newLeafNode(otherlv_3, grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_name_4_0=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(lv_name_4_0, grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoarProductionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0());
				}
				lv_doc_5_0=ruleDocumentation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"doc",
						lv_doc_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Documentation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0());
				}
				lv_flag_6_0=ruleFlags
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"flag",
						lv_flag_6_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Flags");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getConditionsStateImpConditionParserRuleCall_6_0());
				}
				lv_conditions_7_0=ruleStateImpCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_7_0,
						"com.collins.trustedmethods.matrics.soar.Soar.StateImpCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=HyphenMinusHyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getActionsActionSideExprParserRuleCall_8_0());
				}
				lv_actions_9_0=ruleActionSideExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					add(
						$current,
						"actions",
						lv_actions_9_0,
						"com.collins.trustedmethods.matrics.soar.Soar.ActionSideExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10=RightCurlyBracket
		{
			newLeafNode(otherlv_10, grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDocumentationRule()); }
	iv_ruleDocumentation=ruleDocumentation
	{ $current=$iv_ruleDocumentation.current.getText(); }
	EOF;

// Rule Documentation
ruleDocumentation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getDocumentationAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleFlags
entryRuleFlags returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFlagsRule()); }
	iv_ruleFlags=ruleFlags
	{ $current=$iv_ruleFlags.current.getText(); }
	EOF;

// Rule Flags
ruleFlags returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlagsAccess().getColonKeyword_0());
		}
		(
			kw=OSupport
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getOSupportKeyword_1_0());
			}
			    |
			kw=ISupport
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getISupportKeyword_1_1());
			}
			    |
			kw=Chunk
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getChunkKeyword_1_2());
			}
			    |
			kw=Default
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getDefaultKeyword_1_3());
			}
			    |
			kw=Template
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getTemplateKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleStateImpCondition
entryRuleStateImpCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateImpConditionRule()); }
	iv_ruleStateImpCondition=ruleStateImpCondition
	{ $current=$iv_ruleStateImpCondition.current; }
	EOF;

// Rule StateImpCondition
ruleStateImpCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0());
			}
			ruleSTATE
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1());
			}
			ruleIMPASSE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateImpConditionAccess().getIdSymConstantParserRuleCall_3_0());
				}
				lv_id_4_0=ruleSymConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateImpConditionRule());
					}
					set(
						$current,
						"id",
						lv_id_4_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SymConstant");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0());
				}
				lv_attrValueTest_5_0=ruleAttrValueTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateImpConditionRule());
					}
					add(
						$current,
						"attrValueTest",
						lv_attrValueTest_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.AttrValueTest");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleAttrValueTest
entryRuleAttrValueTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrValueTestRule()); }
	iv_ruleAttrValueTest=ruleAttrValueTest
	{ $current=$iv_ruleAttrValueTest.current; }
	EOF;

// Rule AttrValueTest
ruleAttrValueTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0(),
					$current);
			}
		)
		otherlv_1=CircumflexAccent
		{
			newLeafNode(otherlv_1, grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_1());
		}
		(
			(
				lv_attrTest_2_0=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(lv_attrTest_2_0, grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttrValueTestRule());
					}
					addWithLastConsumed(
						$current,
						"attrTest",
						lv_attrTest_2_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
				}
			)
		)
		(
			otherlv_3=FullStop
			{
				newLeafNode(otherlv_3, grammarAccess.getAttrValueTestAccess().getFullStopKeyword_3_0());
			}
			(
				(
					lv_attrTest_4_0=RULE_SYM_CONSTANT_STRING
					{
						newLeafNode(lv_attrTest_4_0, grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttrValueTestRule());
						}
						addWithLastConsumed(
							$current,
							"attrTest",
							lv_attrTest_4_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrValueTestAccess().getTestConditionExprParserRuleCall_4_0());
				}
				lv_test_5_0=ruleConditionExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrValueTestRule());
					}
					set(
						$current,
						"test",
						lv_test_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.ConditionExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRelationalOp
entryRuleRelationalOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelationalOpRule()); }
	iv_ruleRelationalOp=ruleRelationalOp
	{ $current=$iv_ruleRelationalOp.current.getText(); }
	EOF;

// Rule RelationalOp
ruleRelationalOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=LessThanSignGreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignGreaterThanSignKeyword_0());
		}
		    |
		kw=LessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignKeyword_1());
		}
		    |
		kw=GreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignKeyword_2());
		}
		    |
		kw=LessThanSignEqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw=GreaterThanSignEqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getGreaterThanSignEqualsSignKeyword_4());
		}
		    |
		kw=EqualsSignEqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignEqualsSignKeyword_5());
		}
		    |
		kw=LessThanSignEqualsSignGreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_6());
		}
		    |
		kw=EqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRelationalOpAccess().getEqualsSignKeyword_7());
		}
	)
;

// Entry rule entryRuleConditionExpr
entryRuleConditionExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionExprRule()); }
	iv_ruleConditionExpr=ruleConditionExpr
	{ $current=$iv_ruleConditionExpr.current; }
	EOF;

// Rule ConditionExpr
ruleConditionExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConditionExprAccess().getPlusExprParserRuleCall());
	}
	this_PlusExpr_0=rulePlusExpr
	{
		$current = $this_PlusExpr_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRulePlusExpr
entryRulePlusExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlusExprRule()); }
	iv_rulePlusExpr=rulePlusExpr
	{ $current=$iv_rulePlusExpr.current; }
	EOF;

// Rule PlusExpr
rulePlusExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPlusExprAccess().getRelationalExprParserRuleCall_0());
		}
		this_RelationalExpr_0=ruleRelationalExpr
		{
			$current = $this_RelationalExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							PlusSign
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPlusExprAccess().getBinaryExprLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							lv_op_2_0=PlusSign
							{
								newLeafNode(lv_op_2_0, grammarAccess.getPlusExprAccess().getOpPlusSignKeyword_1_0_0_1_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getPlusExprRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_0, "+");
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPlusExprAccess().getRightRelationalExprParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleRelationalExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlusExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.RelationalExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRelationalExpr
entryRuleRelationalExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalExprRule()); }
	iv_ruleRelationalExpr=ruleRelationalExpr
	{ $current=$iv_ruleRelationalExpr.current; }
	EOF;

// Rule RelationalExpr
ruleRelationalExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRelationalExprAccess().getPrefixExprParserRuleCall_0());
		}
		this_PrefixExpr_0=rulePrefixExpr
		{
			$current = $this_PrefixExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleRelationalOp
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getRelationalExprAccess().getBinaryExprLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getRelationalExprAccess().getOpRelationalOpParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleRelationalOp
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getRelationalExprRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"com.collins.trustedmethods.matrics.soar.Soar.RelationalOp");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalExprAccess().getRightPrefixExprParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePrefixExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalExprRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.PrefixExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRulePrefixExpr
entryRulePrefixExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefixExprRule()); }
	iv_rulePrefixExpr=rulePrefixExpr
	{ $current=$iv_rulePrefixExpr.current; }
	EOF;

// Rule PrefixExpr
rulePrefixExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefixExprAccess().getUnaryExprAction_0_0(),
						$current);
				}
			)
			(
				(
					lv_op_1_0=HyphenMinus
					{
						newLeafNode(lv_op_1_0, grammarAccess.getPrefixExprAccess().getOpHyphenMinusKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrefixExprRule());
						}
						setWithLastConsumed($current, "op", lv_op_1_0, "-");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrefixExprAccess().getExprPrefixExprParserRuleCall_0_2_0());
					}
					lv_expr_2_0=rulePrefixExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrefixExprRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.PrefixExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrefixExprAccess().getAtomicConditionExprParserRuleCall_1());
		}
		this_AtomicConditionExpr_3=ruleAtomicConditionExpr
		{
			$current = $this_AtomicConditionExpr_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAtomicConditionExpr
entryRuleAtomicConditionExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAtomicConditionExprRule()); }
	iv_ruleAtomicConditionExpr=ruleAtomicConditionExpr
	{ $current=$iv_ruleAtomicConditionExpr.current; }
	EOF;

// Rule AtomicConditionExpr
ruleAtomicConditionExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicConditionExprAccess().getConjunctTestExprAction_0_0(),
						$current);
				}
			)
			otherlv_1=LeftCurlyBracket
			{
				newLeafNode(otherlv_1, grammarAccess.getAtomicConditionExprAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_0_2_0());
					}
					lv_tests_2_0=ruleConditionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicConditionExprRule());
						}
						add(
							$current,
							"tests",
							lv_tests_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ConditionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_3=RightCurlyBracket
			{
				newLeafNode(otherlv_3, grammarAccess.getAtomicConditionExprAccess().getRightCurlyBracketKeyword_0_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicConditionExprAccess().getMultiValTestExprAction_1_0(),
						$current);
				}
			)
			otherlv_5=LeftSquareBracket
			{
				newLeafNode(otherlv_5, grammarAccess.getAtomicConditionExprAccess().getLeftSquareBracketKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicConditionExprAccess().getTestsConditionExprParserRuleCall_1_2_0());
					}
					lv_tests_6_0=ruleConditionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicConditionExprRule());
						}
						add(
							$current,
							"tests",
							lv_tests_6_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ConditionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_7=RightSquareBracket
			{
				newLeafNode(otherlv_7, grammarAccess.getAtomicConditionExprAccess().getRightSquareBracketKeyword_1_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicConditionExprAccess().getDisjunctTestExprAction_2_0(),
						$current);
				}
			)
			otherlv_9=LessThanSignLessThanSign
			{
				newLeafNode(otherlv_9, grammarAccess.getAtomicConditionExprAccess().getLessThanSignLessThanSignKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicConditionExprAccess().getConstsConditionExprParserRuleCall_2_2_0());
					}
					lv_consts_10_0=ruleConditionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicConditionExprRule());
						}
						add(
							$current,
							"consts",
							lv_consts_10_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ConditionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_11=GreaterThanSignGreaterThanSign
			{
				newLeafNode(otherlv_11, grammarAccess.getAtomicConditionExprAccess().getGreaterThanSignGreaterThanSignKeyword_2_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicConditionExprAccess().getSymConstExprAction_3_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAtomicConditionExprAccess().getValSymConstantParserRuleCall_3_1_0());
					}
					lv_val_13_0=ruleSymConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAtomicConditionExprRule());
						}
						set(
							$current,
							"val",
							lv_val_13_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SymConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getAtomicConditionExprAccess().getConstStringExprAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_val_15_0=RULE_SYM_CONSTANT_STRING
					{
						newLeafNode(lv_val_15_0, grammarAccess.getAtomicConditionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAtomicConditionExprRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_15_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleActionSideExpr
entryRuleActionSideExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionSideExprRule()); }
	iv_ruleActionSideExpr=ruleActionSideExpr
	{ $current=$iv_ruleActionSideExpr.current; }
	EOF;

// Rule ActionSideExpr
ruleActionSideExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=LeftParenthesis
			{
				newLeafNode(otherlv_0, grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideExprAccess().getIdSymConstantParserRuleCall_0_1_0());
					}
					lv_id_1_0=ruleSymConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideExprRule());
						}
						set(
							$current,
							"id",
							lv_id_1_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SymConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_2=CircumflexAccent
			{
				newLeafNode(otherlv_2, grammarAccess.getActionSideExprAccess().getCircumflexAccentKeyword_0_2());
			}
			(
				(
					lv_makeId_3_0=RULE_SYM_CONSTANT_STRING
					{
						newLeafNode(lv_makeId_3_0, grammarAccess.getActionSideExprAccess().getMakeIdSYM_CONSTANT_STRINGTerminalRuleCall_0_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionSideExprRule());
						}
						setWithLastConsumed(
							$current,
							"makeId",
							lv_makeId_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideExprAccess().getAttrValMakesActionExprParserRuleCall_0_4_0());
					}
					lv_attrValMakes_4_0=ruleActionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideExprRule());
						}
						add(
							$current,
							"attrValMakes",
							lv_attrValMakes_4_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ActionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_5=RightParenthesis
			{
				newLeafNode(otherlv_5, grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		(
			otherlv_6=LeftParenthesis
			{
				newLeafNode(otherlv_6, grammarAccess.getActionSideExprAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_7=Write
			{
				newLeafNode(otherlv_7, grammarAccess.getActionSideExprAccess().getWriteKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideExprAccess().getTextActionExprParserRuleCall_1_2_0());
					}
					lv_text_8_0=ruleActionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideExprRule());
						}
						add(
							$current,
							"text",
							lv_text_8_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ActionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_9=RightParenthesis
			{
				newLeafNode(otherlv_9, grammarAccess.getActionSideExprAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleUnaryPref
entryRuleUnaryPref returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryPrefRule()); }
	iv_ruleUnaryPref=ruleUnaryPref
	{ $current=$iv_ruleUnaryPref.current.getText(); }
	EOF;

// Rule UnaryPref
ruleUnaryPref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=PlusSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0());
		}
		    |
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw=ExclamationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2());
		}
		    |
		kw=Tilde
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getTildeKeyword_3());
		}
		    |
		kw=CommercialAt
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4());
		}
	)
;

// Entry rule entryRuleUnaryOrBinaryPref
entryRuleUnaryOrBinaryPref returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOrBinaryPrefRule()); }
	iv_ruleUnaryOrBinaryPref=ruleUnaryOrBinaryPref
	{ $current=$iv_ruleUnaryOrBinaryPref.current.getText(); }
	EOF;

// Rule UnaryOrBinaryPref
ruleUnaryOrBinaryPref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=GreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw=EqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1());
		}
		    |
		kw=LessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2());
		}
		    |
		kw=Ampersand
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3());
		}
	)
;

// Entry rule entryRuleActionExpr
entryRuleActionExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionExprRule()); }
	iv_ruleActionExpr=ruleActionExpr
	{ $current=$iv_ruleActionExpr.current; }
	EOF;

// Rule ActionExpr
ruleActionExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				(
				)
				(
					(
						ruleSymConstant
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElement(
							grammarAccess.getActionExprAccess().getSymConstExprAction_0_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getActionExprAccess().getValSymConstantParserRuleCall_0_0_1_0());
						}
						lv_val_1_0=ruleSymConstant
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActionExprRule());
							}
							set(
								$current,
								"val",
								lv_val_1_0,
								"com.collins.trustedmethods.matrics.soar.Soar.SymConstant");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getStringExprAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_val_3_0=RULE_SYM_CONSTANT_STRING
					{
						newLeafNode(lv_val_3_0, grammarAccess.getActionExprAccess().getValSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionExprRule());
						}
						setWithLastConsumed(
							$current,
							"val",
							lv_val_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getPrefSpecifierExprAction_2_0(),
						$current);
				}
			)
			(
				{
					newCompositeNode(grammarAccess.getActionExprAccess().getUnaryPrefParserRuleCall_2_1_0());
				}
				ruleUnaryPref
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getActionExprAccess().getUnaryOrBinaryPrefParserRuleCall_2_1_1());
				}
				ruleUnaryOrBinaryPref
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getCrlfExprAction_3_0(),
						$current);
				}
			)
			otherlv_8=Crlf
			{
				newLeafNode(otherlv_8, grammarAccess.getActionExprAccess().getCrlfKeyword_3_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getStringExprAction_4_0(),
						$current);
				}
			)
			(
				(
					lv_expr_10_0=RULE_PIPE_STRING
					{
						newLeafNode(lv_expr_10_0, grammarAccess.getActionExprAccess().getExprPIPE_STRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionExprRule());
						}
						setWithLastConsumed(
							$current,
							"expr",
							lv_expr_10_0,
							"com.collins.trustedmethods.matrics.soar.Soar.PIPE_STRING");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getCommaExprAction_5_0(),
						$current);
				}
			)
			otherlv_12=Comma
			{
				newLeafNode(otherlv_12, grammarAccess.getActionExprAccess().getCommaKeyword_5_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getActionExprAccess().getParenExprAction_6_0(),
						$current);
				}
			)
			otherlv_14=LeftParenthesis
			{
				newLeafNode(otherlv_14, grammarAccess.getActionExprAccess().getLeftParenthesisKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionExprAccess().getExprsActionExprParserRuleCall_6_2_0());
					}
					lv_exprs_15_0=ruleActionExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionExprRule());
						}
						add(
							$current,
							"exprs",
							lv_exprs_15_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ActionExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_16=RightParenthesis
			{
				newLeafNode(otherlv_16, grammarAccess.getActionExprAccess().getRightParenthesisKeyword_6_3());
			}
		)
	)
;

// Entry rule entryRuleSymConstant
entryRuleSymConstant returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSymConstantRule()); }
	iv_ruleSymConstant=ruleSymConstant
	{ $current=$iv_ruleSymConstant.current.getText(); }
	EOF;

// Rule SymConstant
ruleSymConstant returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=LessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSymConstantAccess().getLessThanSignKeyword_0());
		}
		(
			this_SYM_CONSTANT_STRING_1=RULE_SYM_CONSTANT_STRING
			{
				$current.merge(this_SYM_CONSTANT_STRING_1);
			}
			{
				newLeafNode(this_SYM_CONSTANT_STRING_1, grammarAccess.getSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0());
			}
			    |
			{
				newCompositeNode(grammarAccess.getSymConstantAccess().getSTATEParserRuleCall_1_1());
			}
			this_STATE_2=ruleSTATE
			{
				$current.merge(this_STATE_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw=GreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSymConstantAccess().getGreaterThanSignKeyword_2());
		}
	)
;

// Entry rule entryRuleSTATE
entryRuleSTATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTATERule()); }
	iv_ruleSTATE=ruleSTATE
	{ $current=$iv_ruleSTATE.current.getText(); }
	EOF;

// Rule STATE
ruleSTATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=State
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSTATEAccess().getStateKeyword());
	}
;

// Entry rule entryRuleIMPASSE
entryRuleIMPASSE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIMPASSERule()); }
	iv_ruleIMPASSE=ruleIMPASSE
	{ $current=$iv_ruleIMPASSE.current.getText(); }
	EOF;

// Rule IMPASSE
ruleIMPASSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Impasse
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIMPASSEAccess().getImpasseKeyword());
	}
;
