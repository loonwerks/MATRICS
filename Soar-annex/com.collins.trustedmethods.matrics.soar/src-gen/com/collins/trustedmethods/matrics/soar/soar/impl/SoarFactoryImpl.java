/**
 * Copyright (c) 2023, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 * 
 * Generated by Xtext version 2.25.0.
 */
package com.collins.trustedmethods.matrics.soar.soar.impl;

import com.collins.trustedmethods.matrics.soar.soar.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SoarFactoryImpl extends EFactoryImpl implements SoarFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SoarFactory init()
  {
    try
    {
      SoarFactory theSoarFactory = (SoarFactory)EPackage.Registry.INSTANCE.getEFactory(SoarPackage.eNS_URI);
      if (theSoarFactory != null)
      {
        return theSoarFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SoarFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoarFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SoarPackage.SOAR_ANNEX_LIBRARY: return createSoarAnnexLibrary();
      case SoarPackage.SOAR_ANNEX_SUBCLAUSE: return createSoarAnnexSubclause();
      case SoarPackage.SOAR_PRODUCTION: return createSoarProduction();
      case SoarPackage.STATE_IMP_CONDITION: return createStateImpCondition();
      case SoarPackage.ATTR_VALUE_TEST: return createAttrValueTest();
      case SoarPackage.CONDITION_EXPR: return createConditionExpr();
      case SoarPackage.EXPR: return createExpr();
      case SoarPackage.ACTION_SIDE_EXPR: return createActionSideExpr();
      case SoarPackage.STATE_IMP_COND: return createStateImpCond();
      case SoarPackage.BINARY_EXPR: return createBinaryExpr();
      case SoarPackage.UNARY_EXPR: return createUnaryExpr();
      case SoarPackage.CONJUNCT_TEST_EXPR: return createConjunctTestExpr();
      case SoarPackage.MULTI_VAL_TEST_EXPR: return createMultiValTestExpr();
      case SoarPackage.DISJUNCT_TEST_EXPR: return createDisjunctTestExpr();
      case SoarPackage.SYM_CONST_EXPR: return createSymConstExpr();
      case SoarPackage.CONST_STRING_EXPR: return createConstStringExpr();
      case SoarPackage.STRING_EXPR: return createStringExpr();
      case SoarPackage.PREF_SPECIFIER_EXPR: return createPrefSpecifierExpr();
      case SoarPackage.CRLF_EXPR: return createCrlfExpr();
      case SoarPackage.COMMA_EXPR: return createCommaExpr();
      case SoarPackage.PAREN_EXPR: return createParenExpr();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarAnnexLibrary createSoarAnnexLibrary()
  {
    SoarAnnexLibraryImpl soarAnnexLibrary = new SoarAnnexLibraryImpl();
    return soarAnnexLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarAnnexSubclause createSoarAnnexSubclause()
  {
    SoarAnnexSubclauseImpl soarAnnexSubclause = new SoarAnnexSubclauseImpl();
    return soarAnnexSubclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarProduction createSoarProduction()
  {
    SoarProductionImpl soarProduction = new SoarProductionImpl();
    return soarProduction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateImpCondition createStateImpCondition()
  {
    StateImpConditionImpl stateImpCondition = new StateImpConditionImpl();
    return stateImpCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrValueTest createAttrValueTest()
  {
    AttrValueTestImpl attrValueTest = new AttrValueTestImpl();
    return attrValueTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionExpr createConditionExpr()
  {
    ConditionExprImpl conditionExpr = new ConditionExprImpl();
    return conditionExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionSideExpr createActionSideExpr()
  {
    ActionSideExprImpl actionSideExpr = new ActionSideExprImpl();
    return actionSideExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateImpCond createStateImpCond()
  {
    StateImpCondImpl stateImpCond = new StateImpCondImpl();
    return stateImpCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryExpr createBinaryExpr()
  {
    BinaryExprImpl binaryExpr = new BinaryExprImpl();
    return binaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnaryExpr createUnaryExpr()
  {
    UnaryExprImpl unaryExpr = new UnaryExprImpl();
    return unaryExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjunctTestExpr createConjunctTestExpr()
  {
    ConjunctTestExprImpl conjunctTestExpr = new ConjunctTestExprImpl();
    return conjunctTestExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiValTestExpr createMultiValTestExpr()
  {
    MultiValTestExprImpl multiValTestExpr = new MultiValTestExprImpl();
    return multiValTestExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DisjunctTestExpr createDisjunctTestExpr()
  {
    DisjunctTestExprImpl disjunctTestExpr = new DisjunctTestExprImpl();
    return disjunctTestExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SymConstExpr createSymConstExpr()
  {
    SymConstExprImpl symConstExpr = new SymConstExprImpl();
    return symConstExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstStringExpr createConstStringExpr()
  {
    ConstStringExprImpl constStringExpr = new ConstStringExprImpl();
    return constStringExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringExpr createStringExpr()
  {
    StringExprImpl stringExpr = new StringExprImpl();
    return stringExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrefSpecifierExpr createPrefSpecifierExpr()
  {
    PrefSpecifierExprImpl prefSpecifierExpr = new PrefSpecifierExprImpl();
    return prefSpecifierExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CrlfExpr createCrlfExpr()
  {
    CrlfExprImpl crlfExpr = new CrlfExprImpl();
    return crlfExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommaExpr createCommaExpr()
  {
    CommaExprImpl commaExpr = new CommaExprImpl();
    return commaExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParenExpr createParenExpr()
  {
    ParenExprImpl parenExpr = new ParenExprImpl();
    return parenExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarPackage getSoarPackage()
  {
    return (SoarPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SoarPackage getPackage()
  {
    return SoarPackage.eINSTANCE;
  }

} //SoarFactoryImpl
