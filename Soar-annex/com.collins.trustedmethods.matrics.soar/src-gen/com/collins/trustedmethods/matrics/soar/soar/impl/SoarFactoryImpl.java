/**
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 * 
 * Generated by Xtext version 2.33.0.
 */
package com.collins.trustedmethods.matrics.soar.soar.impl;

import com.collins.trustedmethods.matrics.soar.soar.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SoarFactoryImpl extends EFactoryImpl implements SoarFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SoarFactory init()
  {
    try
    {
      SoarFactory theSoarFactory = (SoarFactory)EPackage.Registry.INSTANCE.getEFactory(SoarPackage.eNS_URI);
      if (theSoarFactory != null)
      {
        return theSoarFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SoarFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoarFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SoarPackage.SOAR_ANNEX_LIBRARY: return createSoarAnnexLibrary();
      case SoarPackage.SOAR_ANNEX_SUBCLAUSE: return createSoarAnnexSubclause();
      case SoarPackage.SOAR_PRODUCTION: return createSoarProduction();
      case SoarPackage.CONDITION_SIDE: return createConditionSide();
      case SoarPackage.STATE_IMP_CONDITION: return createStateImpCondition();
      case SoarPackage.COND: return createCond();
      case SoarPackage.POSITIVE_COND: return createPositiveCond();
      case SoarPackage.COND_FOR_ONE_ID: return createCondForOneId();
      case SoarPackage.ATTR_VALUE_TEST: return createAttrValueTest();
      case SoarPackage.VALUE_TEST: return createValueTest();
      case SoarPackage.TEST: return createTest();
      case SoarPackage.DISJUNCTION_TEST: return createDisjunctionTest();
      case SoarPackage.SINGLE_TEST: return createSingleTest();
      case SoarPackage.RELATIONAL_TEST: return createRelationalTest();
      case SoarPackage.VARIABLE: return createVariable();
      case SoarPackage.ACTION_SIDE: return createActionSide();
      case SoarPackage.ACTION: return createAction();
      case SoarPackage.PRINT: return createPrint();
      case SoarPackage.FUNC_CALL: return createFuncCall();
      case SoarPackage.VALUE: return createValue();
      case SoarPackage.ATTR_VALUE_MAKE: return createAttrValueMake();
      case SoarPackage.VARIABLEOR_SYM_CONSTANT: return createVariableorSymConstant();
      case SoarPackage.CONSTANT: return createConstant();
      case SoarPackage.VALUE_MAKE: return createValueMake();
      case SoarPackage.PREF_SPECIFIER: return createPrefSpecifier();
      case SoarPackage.STATE_IMP_COND: return createStateImpCond();
      case SoarPackage.CONJUCTIVE_TEST: return createConjuctiveTest();
      case SoarPackage.SIMPLE_TEST: return createSimpleTest();
      case SoarPackage.MULTI_VALUE_TEST: return createMultiValueTest();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarAnnexLibrary createSoarAnnexLibrary()
  {
    SoarAnnexLibraryImpl soarAnnexLibrary = new SoarAnnexLibraryImpl();
    return soarAnnexLibrary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarAnnexSubclause createSoarAnnexSubclause()
  {
    SoarAnnexSubclauseImpl soarAnnexSubclause = new SoarAnnexSubclauseImpl();
    return soarAnnexSubclause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarProduction createSoarProduction()
  {
    SoarProductionImpl soarProduction = new SoarProductionImpl();
    return soarProduction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionSide createConditionSide()
  {
    ConditionSideImpl conditionSide = new ConditionSideImpl();
    return conditionSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateImpCondition createStateImpCondition()
  {
    StateImpConditionImpl stateImpCondition = new StateImpConditionImpl();
    return stateImpCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Cond createCond()
  {
    CondImpl cond = new CondImpl();
    return cond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PositiveCond createPositiveCond()
  {
    PositiveCondImpl positiveCond = new PositiveCondImpl();
    return positiveCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CondForOneId createCondForOneId()
  {
    CondForOneIdImpl condForOneId = new CondForOneIdImpl();
    return condForOneId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrValueTest createAttrValueTest()
  {
    AttrValueTestImpl attrValueTest = new AttrValueTestImpl();
    return attrValueTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueTest createValueTest()
  {
    ValueTestImpl valueTest = new ValueTestImpl();
    return valueTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Test createTest()
  {
    TestImpl test = new TestImpl();
    return test;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DisjunctionTest createDisjunctionTest()
  {
    DisjunctionTestImpl disjunctionTest = new DisjunctionTestImpl();
    return disjunctionTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleTest createSingleTest()
  {
    SingleTestImpl singleTest = new SingleTestImpl();
    return singleTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RelationalTest createRelationalTest()
  {
    RelationalTestImpl relationalTest = new RelationalTestImpl();
    return relationalTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionSide createActionSide()
  {
    ActionSideImpl actionSide = new ActionSideImpl();
    return actionSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Print createPrint()
  {
    PrintImpl print = new PrintImpl();
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FuncCall createFuncCall()
  {
    FuncCallImpl funcCall = new FuncCallImpl();
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Value createValue()
  {
    ValueImpl value = new ValueImpl();
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttrValueMake createAttrValueMake()
  {
    AttrValueMakeImpl attrValueMake = new AttrValueMakeImpl();
    return attrValueMake;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableorSymConstant createVariableorSymConstant()
  {
    VariableorSymConstantImpl variableorSymConstant = new VariableorSymConstantImpl();
    return variableorSymConstant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constant createConstant()
  {
    ConstantImpl constant = new ConstantImpl();
    return constant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueMake createValueMake()
  {
    ValueMakeImpl valueMake = new ValueMakeImpl();
    return valueMake;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrefSpecifier createPrefSpecifier()
  {
    PrefSpecifierImpl prefSpecifier = new PrefSpecifierImpl();
    return prefSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateImpCond createStateImpCond()
  {
    StateImpCondImpl stateImpCond = new StateImpCondImpl();
    return stateImpCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConjuctiveTest createConjuctiveTest()
  {
    ConjuctiveTestImpl conjuctiveTest = new ConjuctiveTestImpl();
    return conjuctiveTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTest createSimpleTest()
  {
    SimpleTestImpl simpleTest = new SimpleTestImpl();
    return simpleTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultiValueTest createMultiValueTest()
  {
    MultiValueTestImpl multiValueTest = new MultiValueTestImpl();
    return multiValueTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SoarPackage getSoarPackage()
  {
    return (SoarPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SoarPackage getPackage()
  {
    return SoarPackage.eINSTANCE;
  }

} //SoarFactoryImpl
