/**
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 * 
 * Generated by Xtext version 2.33.0.
 */
package com.collins.trustedmethods.matrics.soar.soar.impl;

import com.collins.trustedmethods.matrics.soar.soar.Action;
import com.collins.trustedmethods.matrics.soar.soar.ActionSide;
import com.collins.trustedmethods.matrics.soar.soar.FuncCall;
import com.collins.trustedmethods.matrics.soar.soar.Print;
import com.collins.trustedmethods.matrics.soar.soar.SoarPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Action Side</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideImpl#getAction <em>Action</em>}</li>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideImpl#getFuncCall <em>Func Call</em>}</li>
 *   <li>{@link com.collins.trustedmethods.matrics.soar.soar.impl.ActionSideImpl#getPrint <em>Print</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ActionSideImpl extends MinimalEObjectImpl.Container implements ActionSide
{
  /**
   * The cached value of the '{@link #getAction() <em>Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAction()
   * @generated
   * @ordered
   */
  protected EList<Action> action;

  /**
   * The cached value of the '{@link #getFuncCall() <em>Func Call</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFuncCall()
   * @generated
   * @ordered
   */
  protected EList<FuncCall> funcCall;

  /**
   * The cached value of the '{@link #getPrint() <em>Print</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrint()
   * @generated
   * @ordered
   */
  protected EList<Print> print;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ActionSideImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SoarPackage.Literals.ACTION_SIDE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Action> getAction()
  {
    if (action == null)
    {
      action = new EObjectContainmentEList<Action>(Action.class, this, SoarPackage.ACTION_SIDE__ACTION);
    }
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FuncCall> getFuncCall()
  {
    if (funcCall == null)
    {
      funcCall = new EObjectContainmentEList<FuncCall>(FuncCall.class, this, SoarPackage.ACTION_SIDE__FUNC_CALL);
    }
    return funcCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Print> getPrint()
  {
    if (print == null)
    {
      print = new EObjectContainmentEList<Print>(Print.class, this, SoarPackage.ACTION_SIDE__PRINT);
    }
    return print;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE__ACTION:
        return ((InternalEList<?>)getAction()).basicRemove(otherEnd, msgs);
      case SoarPackage.ACTION_SIDE__FUNC_CALL:
        return ((InternalEList<?>)getFuncCall()).basicRemove(otherEnd, msgs);
      case SoarPackage.ACTION_SIDE__PRINT:
        return ((InternalEList<?>)getPrint()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE__ACTION:
        return getAction();
      case SoarPackage.ACTION_SIDE__FUNC_CALL:
        return getFuncCall();
      case SoarPackage.ACTION_SIDE__PRINT:
        return getPrint();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE__ACTION:
        getAction().clear();
        getAction().addAll((Collection<? extends Action>)newValue);
        return;
      case SoarPackage.ACTION_SIDE__FUNC_CALL:
        getFuncCall().clear();
        getFuncCall().addAll((Collection<? extends FuncCall>)newValue);
        return;
      case SoarPackage.ACTION_SIDE__PRINT:
        getPrint().clear();
        getPrint().addAll((Collection<? extends Print>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE__ACTION:
        getAction().clear();
        return;
      case SoarPackage.ACTION_SIDE__FUNC_CALL:
        getFuncCall().clear();
        return;
      case SoarPackage.ACTION_SIDE__PRINT:
        getPrint().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SoarPackage.ACTION_SIDE__ACTION:
        return action != null && !action.isEmpty();
      case SoarPackage.ACTION_SIDE__FUNC_CALL:
        return funcCall != null && !funcCall.isEmpty();
      case SoarPackage.ACTION_SIDE__PRINT:
        return print != null && !print.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ActionSideImpl
