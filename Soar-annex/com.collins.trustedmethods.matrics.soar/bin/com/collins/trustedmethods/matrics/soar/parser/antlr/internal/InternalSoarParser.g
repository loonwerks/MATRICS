/*
 * Copyright (c) 2024, Collins Aerospace.
 * Developed with the sponsorship of Defense Advanced Research Projects Agency (DARPA).
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this data, 
 * including any software or models in source or binary form, as well as any drawings, specifications, 
 * and documentation (collectively "the Data"), to deal in the Data without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Data, and to permit persons to whom the Data is furnished to do so, 
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all copies or 
 * substantial portions of the Data.
 * 
 * THE DATA IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT 
 * LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 * IN NO EVENT SHALL THE AUTHORS, SPONSORS, DEVELOPERS, CONTRIBUTORS, OR COPYRIGHT HOLDERS BE LIABLE 
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE DATA OR THE USE OR OTHER DEALINGS IN THE DATA.
 *
 * Generated by Xtext version 2.33.0.
 */

parser grammar InternalSoarParser;

options {
	tokenVocab=InternalSoarLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@header {
package com.collins.trustedmethods.matrics.soar.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.collins.trustedmethods.matrics.soar.services.SoarGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private SoarGrammarAccess grammarAccess;

    public InternalSoarParser(TokenStream input, SoarGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "AnnexLibrary";
   	}

   	@Override
   	protected SoarGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleAnnexLibrary
entryRuleAnnexLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnexLibraryRule()); }
	iv_ruleAnnexLibrary=ruleAnnexLibrary
	{ $current=$iv_ruleAnnexLibrary.current; }
	EOF;

// Rule AnnexLibrary
ruleAnnexLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		/* */
	}
	{
		newCompositeNode(grammarAccess.getAnnexLibraryAccess().getSoarAnnexLibraryParserRuleCall());
	}
	this_SoarAnnexLibrary_0=ruleSoarAnnexLibrary
	{
		$current = $this_SoarAnnexLibrary_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSoarAnnexLibrary
entryRuleSoarAnnexLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarAnnexLibraryRule()); }
	iv_ruleSoarAnnexLibrary=ruleSoarAnnexLibrary
	{ $current=$iv_ruleSoarAnnexLibrary.current; }
	EOF;

// Rule SoarAnnexLibrary
ruleSoarAnnexLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexLibraryAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarAnnexLibraryAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0());
				}
				lv_soarAnnexProductions_1_0=ruleSoarProduction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarAnnexLibraryRule());
					}
					add(
						$current,
						"soarAnnexProductions",
						lv_soarAnnexProductions_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSoarAnnexSubclause
entryRuleSoarAnnexSubclause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarAnnexSubclauseRule()); }
	iv_ruleSoarAnnexSubclause=ruleSoarAnnexSubclause
	{ $current=$iv_ruleSoarAnnexSubclause.current; }
	EOF;

// Rule SoarAnnexSubclause
ruleSoarAnnexSubclause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexSubclauseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarAnnexSubclauseAccess().getSoarAnnexProductionsSoarProductionParserRuleCall_1_0());
				}
				lv_soarAnnexProductions_1_0=ruleSoarProduction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarAnnexSubclauseRule());
					}
					add(
						$current,
						"soarAnnexProductions",
						lv_soarAnnexProductions_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SoarProduction");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSoarProduction
entryRuleSoarProduction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSoarProductionRule()); }
	iv_ruleSoarProduction=ruleSoarProduction
	{ $current=$iv_ruleSoarProduction.current; }
	EOF;

// Rule SoarProduction
ruleSoarProduction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSoarProductionAccess().getSoarProductionAction_0(),
					$current);
			}
		)
		(
			otherlv_1=Sp
			{
				newLeafNode(otherlv_1, grammarAccess.getSoarProductionAccess().getSpKeyword_1_0());
			}
			    |
			otherlv_2=Gp
			{
				newLeafNode(otherlv_2, grammarAccess.getSoarProductionAccess().getGpKeyword_1_1());
			}
		)
		otherlv_3=LeftCurlyBracket
		{
			newLeafNode(otherlv_3, grammarAccess.getSoarProductionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_name_4_0=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(lv_name_4_0, grammarAccess.getSoarProductionAccess().getNameSYM_CONSTANT_STRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSoarProductionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getDocDocumentationParserRuleCall_4_0());
				}
				lv_doc_5_0=ruleDocumentation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"doc",
						lv_doc_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Documentation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getFlagFlagsParserRuleCall_5_0());
				}
				lv_flag_6_0=ruleFlags
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"flag",
						lv_flag_6_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Flags");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getConditionsConditionSideParserRuleCall_6_0());
				}
				lv_conditions_7_0=ruleConditionSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"conditions",
						lv_conditions_7_0,
						"com.collins.trustedmethods.matrics.soar.Soar.ConditionSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_8=HyphenMinusHyphenMinusGreaterThanSign
		{
			newLeafNode(otherlv_8, grammarAccess.getSoarProductionAccess().getHyphenMinusHyphenMinusGreaterThanSignKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSoarProductionAccess().getActionsActionSideParserRuleCall_8_0());
				}
				lv_actions_9_0=ruleActionSide
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSoarProductionRule());
					}
					set(
						$current,
						"actions",
						lv_actions_9_0,
						"com.collins.trustedmethods.matrics.soar.Soar.ActionSide");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10=RightCurlyBracket
		{
			newLeafNode(otherlv_10, grammarAccess.getSoarProductionAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleDocumentation
entryRuleDocumentation returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDocumentationRule()); }
	iv_ruleDocumentation=ruleDocumentation
	{ $current=$iv_ruleDocumentation.current.getText(); }
	EOF;

// Rule Documentation
ruleDocumentation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=QuotationMarkQuotationMarkQuotationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_0());
		}
		this_SYM_CONSTANT_STRING_1=RULE_SYM_CONSTANT_STRING
		{
			$current.merge(this_SYM_CONSTANT_STRING_1);
		}
		{
			newLeafNode(this_SYM_CONSTANT_STRING_1, grammarAccess.getDocumentationAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1());
		}
		kw=QuotationMarkQuotationMarkQuotationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDocumentationAccess().getQuotationMarkQuotationMarkQuotationMarkKeyword_2());
		}
	)
;

// Entry rule entryRuleFlags
entryRuleFlags returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFlagsRule()); }
	iv_ruleFlags=ruleFlags
	{ $current=$iv_ruleFlags.current.getText(); }
	EOF;

// Rule Flags
ruleFlags returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Colon
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFlagsAccess().getColonKeyword_0());
		}
		(
			kw=OSupport
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getOSupportKeyword_1_0());
			}
			    |
			kw=ISupport
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getISupportKeyword_1_1());
			}
			    |
			kw=Chunk
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getChunkKeyword_1_2());
			}
			    |
			kw=Default
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getDefaultKeyword_1_3());
			}
			    |
			kw=Template
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFlagsAccess().getTemplateKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleConditionSide
entryRuleConditionSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionSideRule()); }
	iv_ruleConditionSide=ruleConditionSide
	{ $current=$iv_ruleConditionSide.current; }
	EOF;

// Rule ConditionSide
ruleConditionSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConditionSideAccess().getConditionSideAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionSideAccess().getStateImpConditionStateImpConditionParserRuleCall_1_0());
				}
				lv_stateImpCondition_1_0=ruleStateImpCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionSideRule());
					}
					set(
						$current,
						"stateImpCondition",
						lv_stateImpCondition_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.StateImpCondition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionSideAccess().getCondCondParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleCond
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionSideRule());
					}
					add(
						$current,
						"cond",
						lv_cond_2_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Cond");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleStateImpCondition
entryRuleStateImpCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStateImpConditionRule()); }
	iv_ruleStateImpCondition=ruleStateImpCondition
	{ $current=$iv_ruleStateImpCondition.current; }
	EOF;

// Rule StateImpCondition
ruleStateImpCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getStateImpConditionAccess().getStateImpCondAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getStateImpConditionAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStateImpConditionAccess().getSTATEParserRuleCall_2_0());
			}
			ruleSTATE
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getStateImpConditionAccess().getIMPASSEParserRuleCall_2_1());
			}
			ruleIMPASSE
			{
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStateImpConditionAccess().getIdTestVariableParserRuleCall_3_0());
				}
				lv_idTest_4_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateImpConditionRule());
					}
					set(
						$current,
						"idTest",
						lv_idTest_4_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getStateImpConditionAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0());
				}
				lv_attrValueTest_5_0=ruleAttrValueTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStateImpConditionRule());
					}
					add(
						$current,
						"attrValueTest",
						lv_attrValueTest_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.AttrValueTest");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getStateImpConditionAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleCond
entryRuleCond returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondRule()); }
	iv_ruleCond=ruleCond
	{ $current=$iv_ruleCond.current; }
	EOF;

// Rule Cond
ruleCond returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCondAccess().getCondAction_0(),
					$current);
			}
		)
		(
			otherlv_1=HyphenMinus
			{
				newLeafNode(otherlv_1, grammarAccess.getCondAccess().getHyphenMinusKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCondAccess().getCondPositiveCondParserRuleCall_2_0());
				}
				lv_cond_2_0=rulePositiveCond
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"com.collins.trustedmethods.matrics.soar.Soar.PositiveCond");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePositiveCond
entryRulePositiveCond returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPositiveCondRule()); }
	iv_rulePositiveCond=rulePositiveCond
	{ $current=$iv_rulePositiveCond.current; }
	EOF;

// Rule PositiveCond
rulePositiveCond returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPositiveCondAccess().getPositiveCondAction_0_0(),
						$current);
				}
			)
			(
				((
					(
						ruleCondForOneId
					)
				)
				)=>
				(
					(
						{
							newCompositeNode(grammarAccess.getPositiveCondAccess().getCondForOneIdCondForOneIdParserRuleCall_0_1_0_0());
						}
						lv_condForOneId_1_0=ruleCondForOneId
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPositiveCondRule());
							}
							set(
								$current,
								"condForOneId",
								lv_condForOneId_1_0,
								"com.collins.trustedmethods.matrics.soar.Soar.CondForOneId");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
		    |
		(
			otherlv_2=LeftCurlyBracket
			{
				newLeafNode(otherlv_2, grammarAccess.getPositiveCondAccess().getLeftCurlyBracketKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPositiveCondAccess().getCondCondParserRuleCall_1_1_0());
					}
					lv_cond_3_0=ruleCond
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPositiveCondRule());
						}
						add(
							$current,
							"cond",
							lv_cond_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Cond");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_4=RightCurlyBracket
			{
				newLeafNode(otherlv_4, grammarAccess.getPositiveCondAccess().getRightCurlyBracketKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleCondForOneId
entryRuleCondForOneId returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCondForOneIdRule()); }
	iv_ruleCondForOneId=ruleCondForOneId
	{ $current=$iv_ruleCondForOneId.current; }
	EOF;

// Rule CondForOneId
ruleCondForOneId returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getCondForOneIdAccess().getCondForOneIdAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getCondForOneIdAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCondForOneIdAccess().getSTATEParserRuleCall_2_0());
			}
			ruleSTATE
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getCondForOneIdAccess().getIMPASSEParserRuleCall_2_1());
			}
			ruleIMPASSE
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getCondForOneIdAccess().getIdTestVariableParserRuleCall_3_0());
				}
				lv_idTest_4_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondForOneIdRule());
					}
					set(
						$current,
						"idTest",
						lv_idTest_4_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCondForOneIdAccess().getAttrValueTestAttrValueTestParserRuleCall_4_0());
				}
				lv_attrValueTest_5_0=ruleAttrValueTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCondForOneIdRule());
					}
					add(
						$current,
						"attrValueTest",
						lv_attrValueTest_5_0,
						"com.collins.trustedmethods.matrics.soar.Soar.AttrValueTest");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6=RightParenthesis
		{
			newLeafNode(otherlv_6, grammarAccess.getCondForOneIdAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleAttrValueTest
entryRuleAttrValueTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrValueTestRule()); }
	iv_ruleAttrValueTest=ruleAttrValueTest
	{ $current=$iv_ruleAttrValueTest.current; }
	EOF;

// Rule AttrValueTest
ruleAttrValueTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAttrValueTestAccess().getAttrValueTestAction_0(),
					$current);
			}
		)
		(
			otherlv_1=HyphenMinus
			{
				newLeafNode(otherlv_1, grammarAccess.getAttrValueTestAccess().getHyphenMinusKeyword_1());
			}
		)?
		otherlv_2=CircumflexAccent
		{
			newLeafNode(otherlv_2, grammarAccess.getAttrValueTestAccess().getCircumflexAccentKeyword_2());
		}
		(
			(
				lv_attrTest_3_0=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(lv_attrTest_3_0, grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttrValueTestRule());
					}
					addWithLastConsumed(
						$current,
						"attrTest",
						lv_attrTest_3_0,
						"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
				}
			)
		)
		(
			otherlv_4=FullStop
			{
				newLeafNode(otherlv_4, grammarAccess.getAttrValueTestAccess().getFullStopKeyword_4_0());
			}
			(
				(
					lv_attrTest_5_0=RULE_SYM_CONSTANT_STRING
					{
						newLeafNode(lv_attrTest_5_0, grammarAccess.getAttrValueTestAccess().getAttrTestSYM_CONSTANT_STRINGTerminalRuleCall_4_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttrValueTestRule());
						}
						addWithLastConsumed(
							$current,
							"attrTest",
							lv_attrTest_5_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SYM_CONSTANT_STRING");
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getAttrValueTestAccess().getValueTestValueTestParserRuleCall_5_0());
				}
				lv_valueTest_6_0=ruleValueTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttrValueTestRule());
					}
					add(
						$current,
						"valueTest",
						lv_valueTest_6_0,
						"com.collins.trustedmethods.matrics.soar.Soar.ValueTest");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleValueTest
entryRuleValueTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueTestRule()); }
	iv_ruleValueTest=ruleValueTest
	{ $current=$iv_ruleValueTest.current; }
	EOF;

// Rule ValueTest
ruleValueTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getValueTestAccess().getValueTestAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValueTestAccess().getTestTestParserRuleCall_0_1_0_0());
						}
						lv_test_1_0=ruleTest
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValueTestRule());
							}
							set(
								$current,
								"test",
								lv_test_1_0,
								"com.collins.trustedmethods.matrics.soar.Soar.Test");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2=PlusSign
					{
						newLeafNode(otherlv_2, grammarAccess.getValueTestAccess().getPlusSignKeyword_0_1_1());
					}
				)?
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getValueTestAccess().getCondForOneIdCondForOneIdParserRuleCall_1_0_0());
					}
					lv_condForOneId_3_0=ruleCondForOneId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getValueTestRule());
						}
						set(
							$current,
							"condForOneId",
							lv_condForOneId_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.CondForOneId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=PlusSign
				{
					newLeafNode(otherlv_4, grammarAccess.getValueTestAccess().getPlusSignKeyword_1_1());
				}
			)?
		)
	)
;

// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	iv_ruleTest=ruleTest
	{ $current=$iv_ruleTest.current; }
	EOF;

// Rule Test
ruleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTestAccess().getConjuctiveTestAction_0_0(),
						$current);
				}
			)
			otherlv_1=LeftCurlyBracket
			{
				newLeafNode(otherlv_1, grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_0_2_0());
					}
					lv_disjunctionTest_2_0=ruleDisjunctionTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestRule());
						}
						set(
							$current,
							"disjunctionTest",
							lv_disjunctionTest_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.DisjunctionTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_1_0_0());
					}
					lv_relationalTest_3_0=ruleRelationalTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestRule());
						}
						set(
							$current,
							"relationalTest",
							lv_relationalTest_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.RelationalTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=RightCurlyBracket
			{
				newLeafNode(otherlv_4, grammarAccess.getTestAccess().getRightCurlyBracketKeyword_1_1());
			}
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTestAccess().getSimpleTestAction_2_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTestAccess().getDisjunctionTestDisjunctionTestParserRuleCall_2_1_0());
					}
					lv_disjunctionTest_6_0=ruleDisjunctionTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTestRule());
						}
						set(
							$current,
							"disjunctionTest",
							lv_disjunctionTest_6_0,
							"com.collins.trustedmethods.matrics.soar.Soar.DisjunctionTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTestAccess().getRelationalTestRelationalTestParserRuleCall_3_0());
				}
				lv_relationalTest_7_0=ruleRelationalTest
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTestRule());
					}
					set(
						$current,
						"relationalTest",
						lv_relationalTest_7_0,
						"com.collins.trustedmethods.matrics.soar.Soar.RelationalTest");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTestAccess().getMultiValueTestAction_4_0(),
						$current);
				}
			)
			otherlv_9=LeftSquareBracket
			{
				newLeafNode(otherlv_9, grammarAccess.getTestAccess().getLeftSquareBracketKeyword_4_1());
			}
			(
				this_INT_10=RULE_INT
				{
					newLeafNode(this_INT_10, grammarAccess.getTestAccess().getINTTerminalRuleCall_4_2());
				}
			)+
			otherlv_11=RightSquareBracket
			{
				newLeafNode(otherlv_11, grammarAccess.getTestAccess().getRightSquareBracketKeyword_4_3());
			}
		)
	)
;

// Entry rule entryRuleDisjunctionTest
entryRuleDisjunctionTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDisjunctionTestRule()); }
	iv_ruleDisjunctionTest=ruleDisjunctionTest
	{ $current=$iv_ruleDisjunctionTest.current; }
	EOF;

// Rule DisjunctionTest
ruleDisjunctionTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getDisjunctionTestAccess().getDisjunctionTestAction_0(),
					$current);
			}
		)
		otherlv_1=LessThanSignLessThanSign
		{
			newLeafNode(otherlv_1, grammarAccess.getDisjunctionTestAccess().getLessThanSignLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDisjunctionTestAccess().getConstantConstantParserRuleCall_2_0());
				}
				lv_constant_2_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDisjunctionTestRule());
					}
					add(
						$current,
						"constant",
						lv_constant_2_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3=GreaterThanSignGreaterThanSign
		{
			newLeafNode(otherlv_3, grammarAccess.getDisjunctionTestAccess().getGreaterThanSignGreaterThanSignKeyword_3());
		}
	)
;

// Entry rule entryRuleSingleTest
entryRuleSingleTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSingleTestRule()); }
	iv_ruleSingleTest=ruleSingleTest
	{ $current=$iv_ruleSingleTest.current; }
	EOF;

// Rule SingleTest
ruleSingleTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSingleTestAccess().getSingleTestAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleTestAccess().getVariableVariableParserRuleCall_1_0_0());
					}
					lv_variable_1_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleTestRule());
						}
						set(
							$current,
							"variable",
							lv_variable_1_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSingleTestAccess().getConstantConstantParserRuleCall_1_1_0());
					}
					lv_constant_2_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSingleTestRule());
						}
						set(
							$current,
							"constant",
							lv_constant_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleRelationalTest
entryRuleRelationalTest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelationalTestRule()); }
	iv_ruleRelationalTest=ruleRelationalTest
	{ $current=$iv_ruleRelationalTest.current; }
	EOF;

// Rule RelationalTest
ruleRelationalTest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationalTestAccess().getRelationalTestAction_0_0(),
						$current);
				}
			)
			(
				otherlv_1=LessThanSignGreaterThanSign
				{
					newLeafNode(otherlv_1, grammarAccess.getRelationalTestAccess().getLessThanSignGreaterThanSignKeyword_0_1_0());
				}
				    |
				otherlv_2=LessThanSign
				{
					newLeafNode(otherlv_2, grammarAccess.getRelationalTestAccess().getLessThanSignKeyword_0_1_1());
				}
				    |
				otherlv_3=GreaterThanSign
				{
					newLeafNode(otherlv_3, grammarAccess.getRelationalTestAccess().getGreaterThanSignKeyword_0_1_2());
				}
				    |
				otherlv_4=LessThanSignEqualsSign
				{
					newLeafNode(otherlv_4, grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignKeyword_0_1_3());
				}
				    |
				otherlv_5=GreaterThanSignEqualsSign
				{
					newLeafNode(otherlv_5, grammarAccess.getRelationalTestAccess().getGreaterThanSignEqualsSignKeyword_0_1_4());
				}
				    |
				otherlv_6=EqualsSignEqualsSign
				{
					newLeafNode(otherlv_6, grammarAccess.getRelationalTestAccess().getEqualsSignEqualsSignKeyword_0_1_5());
				}
				    |
				otherlv_7=LessThanSignEqualsSignGreaterThanSign
				{
					newLeafNode(otherlv_7, grammarAccess.getRelationalTestAccess().getLessThanSignEqualsSignGreaterThanSignKeyword_0_1_6());
				}
				    |
				otherlv_8=EqualsSign
				{
					newLeafNode(otherlv_8, grammarAccess.getRelationalTestAccess().getEqualsSignKeyword_0_1_7());
				}
			)
			(
				((
					ruleSingleTest
				)
				)=>
				(
					{
						newCompositeNode(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_0_2_0());
					}
					lv_singleTest_9_0=ruleSingleTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalTestRule());
						}
						set(
							$current,
							"singleTest",
							lv_singleTest_9_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SingleTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getRelationalTestAccess().getRelationalTestAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelationalTestAccess().getSingleTestSingleTestParserRuleCall_1_1_0());
					}
					lv_singleTest_11_0=ruleSingleTest
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelationalTestRule());
						}
						set(
							$current,
							"singleTest",
							lv_singleTest_11_0,
							"com.collins.trustedmethods.matrics.soar.Soar.SingleTest");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		(
			otherlv_1=LessThanSign
			{
				newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getLessThanSignKeyword_1_0());
			}
			(
				this_SYM_CONSTANT_STRING_2=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(this_SYM_CONSTANT_STRING_2, grammarAccess.getVariableAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0());
				}
				    |
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getVariableAccess().getSTATEParserRuleCall_1_1_1());
				}
				ruleSTATE
				{
					afterParserOrEnumRuleCall();
				}
			)
			otherlv_4=GreaterThanSign
			{
				newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getGreaterThanSignKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleActionSide
entryRuleActionSide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionSideRule()); }
	iv_ruleActionSide=ruleActionSide
	{ $current=$iv_ruleActionSide.current; }
	EOF;

// Rule ActionSide
ruleActionSide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionSideAccess().getActionSideAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideAccess().getActionActionParserRuleCall_1_0_0());
					}
					lv_action_1_0=ruleAction
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideRule());
						}
						add(
							$current,
							"action",
							lv_action_1_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Action");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideAccess().getFuncCallFuncCallParserRuleCall_1_1_0());
					}
					lv_funcCall_2_0=ruleFuncCall
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideRule());
						}
						add(
							$current,
							"funcCall",
							lv_funcCall_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.FuncCall");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getActionSideAccess().getPrintPrintParserRuleCall_1_2_0());
					}
					lv_print_3_0=rulePrint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionSideRule());
						}
						add(
							$current,
							"print",
							lv_print_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Print");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getActionAccess().getActionAction_0(),
					$current);
			}
		)
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getActionAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getVariableVariableParserRuleCall_1_1_0());
					}
					lv_variable_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"variable",
							lv_variable_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getAttrValMakeAttrValueMakeParserRuleCall_1_2_0());
					}
					lv_attrValMake_3_0=ruleAttrValueMake
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						add(
							$current,
							"attrValMake",
							lv_attrValMake_3_0,
							"com.collins.trustedmethods.matrics.soar.Soar.AttrValueMake");
						afterParserOrEnumRuleCall();
					}
				)
			)+
			otherlv_4=RightParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getActionAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRulePrint
entryRulePrint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrintRule()); }
	iv_rulePrint=rulePrint
	{ $current=$iv_rulePrint.current; }
	EOF;

// Rule Print
rulePrint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getPrintAccess().getPrintAction_0(),
					$current);
			}
		)
		(
			otherlv_1=LeftParenthesis
			{
				newLeafNode(otherlv_1, grammarAccess.getPrintAccess().getLeftParenthesisKeyword_1_0());
			}
			otherlv_2=Write
			{
				newLeafNode(otherlv_2, grammarAccess.getPrintAccess().getWriteKeyword_1_1());
			}
			(
				this_PRINT_STRING_3=RULE_PRINT_STRING
				{
					newLeafNode(this_PRINT_STRING_3, grammarAccess.getPrintAccess().getPRINT_STRINGTerminalRuleCall_1_2_0());
				}
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getPrintAccess().getVariableVariableParserRuleCall_1_2_1_0());
						}
						lv_variable_4_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrintRule());
							}
							add(
								$current,
								"variable",
								lv_variable_4_0,
								"com.collins.trustedmethods.matrics.soar.Soar.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				otherlv_5=Crlf
				{
					newLeafNode(otherlv_5, grammarAccess.getPrintAccess().getCrlfKeyword_1_2_2());
				}
			)+
			otherlv_6=RightParenthesis
			{
				newLeafNode(otherlv_6, grammarAccess.getPrintAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleFuncCall
entryRuleFuncCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncCallRule()); }
	iv_ruleFuncCall=ruleFuncCall
	{ $current=$iv_ruleFuncCall.current; }
	EOF;

// Rule FuncCall
ruleFuncCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getFuncCallAccess().getFuncCallAction_0(),
					$current);
			}
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getFuncCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				this_SYM_CONSTANT_STRING_2=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(this_SYM_CONSTANT_STRING_2, grammarAccess.getFuncCallAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_2_0_0());
				}
				    |
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getFuncCallAccess().getSTATEParserRuleCall_2_0_1());
				}
				ruleSTATE
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			otherlv_4=PlusSign
			{
				newLeafNode(otherlv_4, grammarAccess.getFuncCallAccess().getPlusSignKeyword_2_1());
			}
			    |
			otherlv_5=HyphenMinus
			{
				newLeafNode(otherlv_5, grammarAccess.getFuncCallAccess().getHyphenMinusKeyword_2_2());
			}
			    |
			otherlv_6=Asterisk
			{
				newLeafNode(otherlv_6, grammarAccess.getFuncCallAccess().getAsteriskKeyword_2_3());
			}
			    |
			otherlv_7=Solidus
			{
				newLeafNode(otherlv_7, grammarAccess.getFuncCallAccess().getSolidusKeyword_2_4());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncCallAccess().getValueValueParserRuleCall_3_0());
				}
				lv_value_8_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncCallRule());
					}
					add(
						$current,
						"value",
						lv_value_8_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_9=RightParenthesis
		{
			newLeafNode(otherlv_9, grammarAccess.getFuncCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getValueAccess().getConstantParserRuleCall_0());
		}
		this_Constant_0=ruleConstant
		{
			$current = $this_Constant_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getValueAccess().getFuncCallParserRuleCall_1());
		}
		this_FuncCall_1=ruleFuncCall
		{
			$current = $this_FuncCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getValueAccess().getVariableParserRuleCall_2());
		}
		this_Variable_2=ruleVariable
		{
			$current = $this_Variable_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAttrValueMake
entryRuleAttrValueMake returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttrValueMakeRule()); }
	iv_ruleAttrValueMake=ruleAttrValueMake
	{ $current=$iv_ruleAttrValueMake.current; }
	EOF;

// Rule AttrValueMake
ruleAttrValueMake returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAttrValueMakeAccess().getAttrValueMakeAction_0(),
					$current);
			}
		)
		(
			otherlv_1=CircumflexAccent
			{
				newLeafNode(otherlv_1, grammarAccess.getAttrValueMakeAccess().getCircumflexAccentKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_1_0());
					}
					lv_variableOrSymConstant_2_0=ruleVariableorSymConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrValueMakeRule());
						}
						add(
							$current,
							"variableOrSymConstant",
							lv_variableOrSymConstant_2_0,
							"com.collins.trustedmethods.matrics.soar.Soar.VariableorSymConstant");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=FullStop
				{
					newLeafNode(otherlv_3, grammarAccess.getAttrValueMakeAccess().getFullStopKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAttrValueMakeAccess().getVariableOrSymConstantVariableorSymConstantParserRuleCall_1_2_1_0());
						}
						lv_variableOrSymConstant_4_0=ruleVariableorSymConstant
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAttrValueMakeRule());
							}
							add(
								$current,
								"variableOrSymConstant",
								lv_variableOrSymConstant_4_0,
								"com.collins.trustedmethods.matrics.soar.Soar.VariableorSymConstant");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getAttrValueMakeAccess().getValueMakeValueMakeParserRuleCall_1_3_0());
					}
					lv_valueMake_5_0=ruleValueMake
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttrValueMakeRule());
						}
						add(
							$current,
							"valueMake",
							lv_valueMake_5_0,
							"com.collins.trustedmethods.matrics.soar.Soar.ValueMake");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleVariableorSymConstant
entryRuleVariableorSymConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableorSymConstantRule()); }
	iv_ruleVariableorSymConstant=ruleVariableorSymConstant
	{ $current=$iv_ruleVariableorSymConstant.current; }
	EOF;

// Rule VariableorSymConstant
ruleVariableorSymConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableorSymConstantAccess().getVariableorSymConstantAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableorSymConstantAccess().getVariableVariableParserRuleCall_1_0_0());
					}
					lv_variable_1_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableorSymConstantRule());
						}
						set(
							$current,
							"variable",
							lv_variable_1_0,
							"com.collins.trustedmethods.matrics.soar.Soar.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				this_SYM_CONSTANT_STRING_2=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(this_SYM_CONSTANT_STRING_2, grammarAccess.getVariableorSymConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_1_0());
				}
				    |
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getVariableorSymConstantAccess().getSTATEParserRuleCall_1_1_1());
				}
				ruleSTATE
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstantAccess().getConstantAction_0(),
					$current);
			}
		)
		(
			(
				this_SYM_CONSTANT_STRING_1=RULE_SYM_CONSTANT_STRING
				{
					newLeafNode(this_SYM_CONSTANT_STRING_1, grammarAccess.getConstantAccess().getSYM_CONSTANT_STRINGTerminalRuleCall_1_0_0());
				}
				    |
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getConstantAccess().getSTATEParserRuleCall_1_0_1());
				}
				ruleSTATE
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			this_INT_3=RULE_INT
			{
				newLeafNode(this_INT_3, grammarAccess.getConstantAccess().getINTTerminalRuleCall_1_1());
			}
			    |
			this_FLOAT_4=RULE_FLOAT
			{
				newLeafNode(this_FLOAT_4, grammarAccess.getConstantAccess().getFLOATTerminalRuleCall_1_2());
			}
			    |
			this_PRINT_STRING_5=RULE_PRINT_STRING
			{
				newLeafNode(this_PRINT_STRING_5, grammarAccess.getConstantAccess().getPRINT_STRINGTerminalRuleCall_1_3());
			}
		)
	)
;

// Entry rule entryRuleValueMake
entryRuleValueMake returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueMakeRule()); }
	iv_ruleValueMake=ruleValueMake
	{ $current=$iv_ruleValueMake.current; }
	EOF;

// Rule ValueMake
ruleValueMake returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getValueMakeAccess().getValueMakeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValueMakeAccess().getValueValueParserRuleCall_1_0());
				}
				lv_value_1_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueMakeRule());
					}
					set(
						$current,
						"value",
						lv_value_1_0,
						"com.collins.trustedmethods.matrics.soar.Soar.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getValueMakeAccess().getPrefSpecifierPrefSpecifierParserRuleCall_2_0());
				}
				lv_prefSpecifier_2_0=rulePrefSpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueMakeRule());
					}
					add(
						$current,
						"prefSpecifier",
						lv_prefSpecifier_2_0,
						"com.collins.trustedmethods.matrics.soar.Soar.PrefSpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePrefSpecifier
entryRulePrefSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrefSpecifierRule()); }
	iv_rulePrefSpecifier=rulePrefSpecifier
	{ $current=$iv_rulePrefSpecifier.current; }
	EOF;

// Rule PrefSpecifier
rulePrefSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPrefSpecifierAccess().getUnaryPrefUnaryPrefParserRuleCall_0_1_0_0());
						}
						lv_unaryPref_1_0=ruleUnaryPref
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrefSpecifierRule());
							}
							set(
								$current,
								"unaryPref",
								lv_unaryPref_1_0,
								"com.collins.trustedmethods.matrics.soar.Soar.UnaryPref");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2=Comma
					{
						newLeafNode(otherlv_2, grammarAccess.getPrefSpecifierAccess().getCommaKeyword_0_1_1());
					}
				)?
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrefSpecifierAccess().getPrefSpecifierAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getPrefSpecifierAccess().getUnaryOrBinaryPrefUnaryOrBinaryPrefParserRuleCall_1_1_0_0());
						}
						lv_unaryOrBinaryPref_4_0=ruleUnaryOrBinaryPref
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrefSpecifierRule());
							}
							set(
								$current,
								"unaryOrBinaryPref",
								lv_unaryOrBinaryPref_4_0,
								"com.collins.trustedmethods.matrics.soar.Soar.UnaryOrBinaryPref");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_5=Comma
					{
						newLeafNode(otherlv_5, grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getPrefSpecifierAccess().getValueValueParserRuleCall_1_1_1_1_0());
							}
							lv_value_6_0=ruleValue
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPrefSpecifierRule());
								}
								set(
									$current,
									"value",
									lv_value_6_0,
									"com.collins.trustedmethods.matrics.soar.Soar.Value");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
				(
					otherlv_7=Comma
					{
						newLeafNode(otherlv_7, grammarAccess.getPrefSpecifierAccess().getCommaKeyword_1_1_2());
					}
				)?
			)
		)
	)
;

// Entry rule entryRuleUnaryPref
entryRuleUnaryPref returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryPrefRule()); }
	iv_ruleUnaryPref=ruleUnaryPref
	{ $current=$iv_ruleUnaryPref.current.getText(); }
	EOF;

// Rule UnaryPref
ruleUnaryPref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=PlusSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getPlusSignKeyword_0());
		}
		    |
		kw=HyphenMinus
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getHyphenMinusKeyword_1());
		}
		    |
		kw=ExclamationMark
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getExclamationMarkKeyword_2());
		}
		    |
		kw=Tilde
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getTildeKeyword_3());
		}
		    |
		kw=CommercialAt
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryPrefAccess().getCommercialAtKeyword_4());
		}
	)
;

// Entry rule entryRuleUnaryOrBinaryPref
entryRuleUnaryOrBinaryPref returns [String current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOrBinaryPrefRule()); }
	iv_ruleUnaryOrBinaryPref=ruleUnaryOrBinaryPref
	{ $current=$iv_ruleUnaryOrBinaryPref.current.getText(); }
	EOF;

// Rule UnaryOrBinaryPref
ruleUnaryOrBinaryPref returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=GreaterThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw=EqualsSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getEqualsSignKeyword_1());
		}
		    |
		kw=LessThanSign
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getLessThanSignKeyword_2());
		}
		    |
		kw=Ampersand
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getUnaryOrBinaryPrefAccess().getAmpersandKeyword_3());
		}
	)
;

// Entry rule entryRuleSTATE
entryRuleSTATE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSTATERule()); }
	iv_ruleSTATE=ruleSTATE
	{ $current=$iv_ruleSTATE.current.getText(); }
	EOF;

// Rule STATE
ruleSTATE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=State
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSTATEAccess().getStateKeyword());
	}
;

// Entry rule entryRuleIMPASSE
entryRuleIMPASSE returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIMPASSERule()); }
	iv_ruleIMPASSE=ruleIMPASSE
	{ $current=$iv_ruleIMPASSE.current.getText(); }
	EOF;

// Rule IMPASSE
ruleIMPASSE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Impasse
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getIMPASSEAccess().getImpasseKeyword());
	}
;
