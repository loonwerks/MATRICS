grammar com.collins.trustedmethods.matrics.soar.Soar hidden(WS, SL_COMMENT)//with org.osate.xtext.aadl2.properties.Properties

generate soar "http://www.collins.com/trustedmethods/matrics/soar/Soar"
import "http://aadl.info/AADL/2.0" as aadl2
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AnnexLibrary returns aadl2::AnnexLibrary:
	SoarAnnexLibrary
;

AnnexSubclause returns aadl2::AnnexSubclause:
	SoarAnnexSubclause
;

SoarAnnexLibrary:
	{SoarAnnexLibrary} soarAnnexProductions+=SoarProduction*
;

SoarAnnexSubclause:
	{SoarAnnexSubclause} soarAnnexProductions+=SoarProduction*
;


//Updated Grammar

//soar_production : ('sp'|'gp') '{' sym_constant Documentation? flags? condition_side '-->' action_side '}' ;
SoarProduction returns SoarProduction : 
	{SoarProduction} ('sp'|'gp') '{' name=SYM_CONSTANT_STRING doc=Documentation? flag=Flags? conditions=ConditionSide '-->' actions=ActionSide '}'
;


//Documentation : '"""' ~["]* '"""' ;
//Documentation : STRING;
Documentation : '"""' SYM_CONSTANT_STRING '"""';

Flags : ':' ('o-support' | 'i-support' | 'chunk' | 'default' | 'template' ) ;

// Grammar for Condition Side

//condition_side : state_imp_cond cond* ;
ConditionSide returns ConditionSide: 
	{ConditionSide} (stateImpCondition=StateImpCondition) (cond+=Cond)*
;

//state_imp_cond : '(' (STATE | 'impasse') id_test? attr_value_tests+ ')' ;
StateImpCondition returns StateImpCondition: 
	{StateImpCond} '(' (STATE | IMPASSE) (idTest=Variable)? (attrValueTest+=AttrValueTest)+ ')'
;

//cond : positive_cond | ( ('-') positive_cond ) ;
Cond returns Cond:
	{Cond} ('-')? (cond=PositiveCond)
;

//positive_cond : conds_for_one_id | ('{' cond+ '}') ;
PositiveCond returns PositiveCond:
	{PositiveCond} => (condForOneId=CondForOneId) | ('{' (cond+=Cond)+ '}')
;

//conds_for_one_id : '(' (STATE | IMPASSE)? id_test AttrValueTests+ ')';
CondForOneId returns CondForOneId:
	{CondForOneId} '(' (STATE | IMPASSE)? (idTest=Variable) (attrValueTest+=AttrValueTest)+ ')'
;

//id_test : test ;
//AttrValueTests : '-'? '^' attr_test ('.' attr_test)* value_test* ;
 AttrValueTest returns AttrValueTest:
 	{AttrValueTest} '-'? '^' (attrTest+=SYM_CONSTANT_STRING) ('.' attrTest+=SYM_CONSTANT_STRING)* (valueTest+=ValueTest)*
 ;
 
//attr_test : test ;
//value_test : ( test '+'? ) | ( conds_for_one_id '+'? ) ;
 ValueTest returns ValueTest:
 	{ValueTest} (test=Test '+'?) | (condForOneId=CondForOneId '+'?)
 ;
 
//test : conjunctive_test | simple_test | multi_value_test ;
// conjunctive_test : '{' simple_test+ '}' ;
//simple_test : disjunction_test | relational_test ;
//multi_value_test : '[' Int_constant+ ']' ;
 Test returns Test:
	{ConjuctiveTest} '{' disjunctionTest=DisjunctionTest | relationalTest=RelationalTest '}'
 |	{SimpleTest} disjunctionTest=DisjunctionTest | relationalTest=RelationalTest
 |	{MultiValueTest} '[' INT+ ']' 
 ;
 
//disjunction_test : '<<' constant+ '>>' ;
DisjunctionTest returns DisjunctionTest:
	{DisjunctionTest} '<<' (constant+=Constant)+ '>>'
;


//single_test : variable | constant ;
SingleTest returns SingleTest:
	{SingleTest} (variable=Variable | constant=Constant)
;

//relational_test : relation? single_test ;
//RelationalTest returns RelationalTest:
//	{RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=')? (singleTest=SingleTest)
//;

RelationalTest returns RelationalTest:
    {RelationalTest} ('<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=') => singleTest=SingleTest
    | {RelationalTest} singleTest=SingleTest
;


//variable : '<|' SymConstant '|>' ;
Variable returns Variable:
	{Variable} ('<' (SYM_CONSTANT_STRING | STATE) '>')
;

//relation : '<>' | '<' | '>' | '<=' | '>=' | '==' | '<=>' | '=';
//RelationalOp : ;


//action_side : (action  | func_call | print)* ;
ActionSide returns ActionSide:
	{ActionSide} ((action+=Action) | (funcCall+=FuncCall) | (print+=Print))*
;

//action : ( '(' variable attr_value_make+ ')' );
Action returns Action:
	{Action} ( '(' variable=Variable (attrValMake+=AttrValueMake)+ ')')
;

//print : ( '(' 'write ' ( Print_string | variable | '(crlf)')+ ')' )+ ;
Print returns Print: 
	{Print} ('(' 'write' (PRINT_STRING | variable+=Variable | '(crlf)')+ ')' )
;

//func_call : '(' func_name value* ')' ;
//func_name : sym_constant | '+' | '-' | '*' | '/' ;

FuncCall returns FuncCall:
    {FuncCall} '(' ((SYM_CONSTANT_STRING | STATE) | '+' | '-' | '*' | '/') (value+=Value)* ')'
;

//value : constant | func_call | variable ;
Value returns Value:
	 (Constant) | (FuncCall) | (Variable)
;

//attr_value_make : '^' variable_or_sym_constant ( '.' variable_or_sym_constant )* value_make* ;
AttrValueMake returns AttrValueMake:
	
	{AttrValueMake}  ('^' (variableOrSymConstant+=VariableorSymConstant) ( '.' (variableOrSymConstant+=VariableorSymConstant))* (valueMake+=ValueMake)*)
;

//variable_or_sym_constant : variable | sym_constant ;
VariableorSymConstant returns VariableorSymConstant:
	{VariableorSymConstant} (variable=Variable | (SYM_CONSTANT_STRING | STATE))
;


//constant : sym_constant | Int_constant | Float_constant | Print_string ;
Constant returns Constant:
	{Constant} ((SYM_CONSTANT_STRING | STATE) | INT | FLOAT | PRINT_STRING)
;

ValueMake returns ValueMake:
	{ValueMake} (value=Value) (prefSpecifier+=PrefSpecifier)*
;

//PrefSpecifier returns PrefSpecifier:
//	{PrefSpecifier} (( unaryPref=UnaryPref ','? ) | ( unaryOrBinaryPref=UnaryOrBinaryPref ','?) | (unaryOrBinaryPref=UnaryOrBinaryPref) (value=Value) ','?) 
//;

PrefSpecifier returns PrefSpecifier:
    {PrefSpecifier} (unaryPref=UnaryPref (','?)?)
    | {PrefSpecifier} (unaryOrBinaryPref=UnaryOrBinaryPref ((',' value=Value)?)? (','?))
;




////value_make : value pref_specifier* ;
//ValueMake returns ValueMake:
//	{ValueMake} (value=Value) (prefSpecifier=PrefSpecifier)
//;
//

////PrefSpecifierChain: //returns PrefSpecifierChain:
////	(prefSpecifier=PrefSpecifier) // (',' prefSpecifier+=PrefSpecifier)
////;
////pref_specifier : ( unary_pref ','? ) | ( unary_or_binary_pref ','? ) | unary_or_binary_pref value ','? ;
//PrefSpecifier returns PrefSpecifier:
//	{PrefSpecifier} (unary+=Unary)* | ((pref=UnaryOrBinaryPref ) (value=Value))//| (( pref=UnaryOrBinaryPref ) (value=Value)))
//;
//
//Unary returns Unary:
//	{Unary} (( pref=UnaryPref ) | ( pref=UnaryOrBinaryPref )) ','?
//;

//Binary returns Binary:
//	{Binary} (pref=UnaryOrBinaryPref ) (value=Value)
//;
//unary_pref : '+' | '-' | '!' | '~' | '@' ;
//unary_or_binary_pref : '>' | '=' | '<' | '&' ;
UnaryPref: '+' | '-' | '!' | '~' | '@'; 
UnaryOrBinaryPref: '>' | '=' | '<' | '&';

// Types of constants
STATE: 'state' ;
IMPASSE: 'impasse';

//Sym_constant : [a-zA-Z] [a-zA-Z0-9-_*]* ;
terminal SYM_CONSTANT_STRING : ('a'..'z' | 'A'..'Z') (('_')? ('*')? ('-')? ('a'..'z' | 'A'..'Z' | '0'..'9'))* ;

//Print_string : '|' ~[|]* '|' ;
terminal PRINT_STRING:
    '|' ( '\\|' | !'|' )* '|';

//Float_constant : [0-9]+ '.' [0-9]+ ;
terminal FLOAT returns ecore::EFloat:
    ('0'..'9')+ '.' ('0'..'9')+;

//Int_constant : [0-9]+ ;
terminal INT returns ecore::EInt:
    ('0'..'9')+;
    	
//WS : [ \t\r\n]+ -> skip ;
terminal WS			: (' '|'\t'|'\r'|'\n')+;
		
//COMMENT : '#' ~[\r\n]* -> skip ;	
//@Override
terminal SL_COMMENT:
	'#' !('\n' | '\r')* ('\r'? '\n')?;
	
		
//terminal STRING	: 
//			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' 
////|			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
//;
//terminal PIPE_STRING :
//	'|' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'|') )* '|'
//;
//terminal fragment
//EXPONENT  :  ('e'|'E') ('+'|'-')? ( DIGIT )+  ;

//terminal fragment
//INT_EXPONENT :  ('e'|'E') ('+')? ( DIGIT )+ ;
			
//terminal fragment
//DIGIT     :  ( '0'..'9' ) ;
//			
//terminal REAL_LIT : 	
//	(DIGIT)+ ( '.' (DIGIT)+ )
//  ;
//
//terminal INTEGER_LIT : 
//		(DIGIT)+
//  ;
//terminal SL_COMMENT : '#' !('\n' | '\r')* ('\r'? '\n')?;